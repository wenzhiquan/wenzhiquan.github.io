<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown 简明语法</title>
    <url>/2014/10/14/2014-10-14-markdown-simple-syntax/</url>
    <content><![CDATA[<blockquote>
<p>“Markdown 语言是现在编写博客最为常用的语言。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Markdown 的目标是实现「易读易写」，成为一种适用于网络的「书写语言」。</p>
<p>一份使用 Markdown 格式撰写的文件可以直接以纯文本发布，它的最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>Markdown 的语法由一些符号所组成，其作用一目了然。比如：在文字两旁加上星号，看起来就像<strong>强调</strong>。</p>
<p>Markdown 兼容 HTML 语法并且会将<code>&lt;</code>和<code>&amp;</code>等符号进行自动转换，这项特性可以让我们很容易地用 Markdown 写 HTML code。</p>
<span id="more"></span>

<!-- more -->

<h3 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h3><h4 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h4><ul>
<li>空白行表示单一段落，相当于<code>&lt;p/&gt;</code>。</li>
<li>连续两个空格表示换行，相当于<code>&lt;br/&gt;</code>。</li>
<li>连续三个<code>*</code>或<code>+</code>或<code>-</code>,然后空白行，表示 hr 横线</li>
</ul>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>标题是在首行插入 1 到 6 个<code>#</code>,对应的是标题 1 至标题 6，例如：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure>

<p>同时，也可以选择性地「闭合」标题，在行尾加上<code>#</code>，这么做只是为了美观：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ###</span><br></pre></td></tr></table></figure>

<h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>Markdown 标记区块引用是使用类似 email 中用<code>&gt;</code>加<code>space</code>的引用方式:</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">This</span> is a blockquote <span class="keyword">with</span> two paragraphs. <span class="title class_">Lorem</span> ipsum dolor sit amet,</span></span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Donec</span> sit amet nisl. <span class="title class_">Aliquam</span> semper ipsum sit amet velit. <span class="title class_">Suspendisse</span></span></span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>区块引用可以嵌套，只要根据层次加上不同数量的<code>&gt;</code>：</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">This</span> is the first level <span class="keyword">of</span> quoting.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; <span class="title class_">This</span> is nested blockquote.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Back</span> to the first level.</span></span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<blockquote>
<ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return &quot;Hello world!&quot;;
</code></pre>
</blockquote>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用<code>*</code>、<code>+</code>或是<code>-</code>作为列表标记：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 三种符号效果相同</span></span><br><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br><span class="line"><span class="bullet">+</span>   Red</span><br><span class="line"><span class="bullet">+</span>   Green</span><br><span class="line"><span class="bullet">+</span>   Blue</span><br><span class="line"><span class="bullet">-</span>   Red</span><br><span class="line"><span class="bullet">-</span>   Green</span><br><span class="line"><span class="bullet">-</span>   Blue</span><br></pre></td></tr></table></figure>

<p>效果均为：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>有序列表则使用数字接着一个英文句点<code>.</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>  Bird</span><br><span class="line"><span class="bullet">2.</span>  McHale</span><br><span class="line"><span class="bullet">3.</span>  Parish</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个<code>space</code>或是 1 个<code>tab</code>就可以，例如，下面的输入：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p>这是一个普通段落：</p>
<pre><code>这是一个代码区块。
</code></pre>
<p>代码区块中，一般的 Markdown 语法不会被转换，像是<code>*</code>便只是<code>*</code>。</p>
<p>此外，还可以使用一对<br>‘ ``` ‘（连续三个数字键 1 左边的反引号）将段落包围起来使其成为代码区块。</p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>你可以在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。你也可以在<code>*</code>或是<code>-</code>中间插入<code>space</code>。下面每种写法都可以建立分隔线：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">* * *</span></span><br><span class="line"></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>可以使用以下的方式建立表格：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">h1|<span class="string">h2</span>|h3</span><br><span class="line">--|<span class="string">--</span>|<span class="string">--</span></span><br><span class="line"><span class="string">c1</span>|<span class="string">c2</span>|c3</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">|<span class="string">h1</span>|<span class="string">h2</span>|<span class="string">h3</span>|</span><br><span class="line">|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|</span><br><span class="line">|<span class="string">c1</span>|<span class="string">c2</span>|<span class="string">c3</span>|</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>h1</th>
<th>h2</th>
<th>h3</th>
</tr>
</thead>
<tbody><tr>
<td>c1</td>
<td>c2</td>
<td>c3</td>
</tr>
</tbody></table>
<p>或者</p>
<table>
<thead>
<tr>
<th>h1</th>
<th>h2</th>
<th>h3</th>
</tr>
</thead>
<tbody><tr>
<td>c1</td>
<td>c2</td>
<td>c3</td>
</tr>
</tbody></table>
<h3 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用<code>[]</code>来标记。</p>
<p><em>行内式链接</em></p>
<p>要建立一个行内式的链接，只要在<code>[]</code>后面紧接着<code>()</code>并插入网址链接即可，如果你还想要加上链接的<code>title</code>文字，只要在网址后面，用<code>&quot;&quot;</code>把<code>title</code>文字包起来即可，例如：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">这是[百度](http://www.baidu.com <span class="string">&quot;百度首页&quot;</span>)的行内式链接.</span><br><span class="line"></span><br><span class="line">这个[百度](http://www.baidu.com)不包含<span class="string">`title`</span>参数.</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p>这是<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v" title="百度首页">百度<i class="fa fa-external-link-alt"></i></span>的行内式链接.</p>
<p>这个<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v">百度<i class="fa fa-external-link-alt"></i></span>不包含<code>title</code>参数.</p>
<p><em>参考式链接</em></p>
<p>参考式的链接是在链接文字的<code>[]</code>后面再接上另一个<code>[]</code>，而在第二个<code>[]</code>里面要填入用以辨识链接的标记，接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>
这是[百度][id]参考式链接.

[id]: http://www.baidu.com  "百度首页"
</code></pre>

<p>效果为：</p>
<p>这是<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v" title="百度首页">百度<i class="fa fa-external-link-alt"></i></span>参考式链接.</p>
<p>链接内容定义的形式为：</p>
<ul>
<li><code>[]</code>（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>紧跟着一个<code>:</code></li>
<li>接着是一个以上的<code>space</code>或<code>tab</code></li>
<li>然后是链接的网址</li>
<li>最后可以选择性地输入<code>title</code>内容，可以用<code>&#39;&#39;</code>、<code>&quot;&quot;</code>或是<code>()</code>包着</li>
</ul>
<h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown 使用星号<code>*</code>和下划线<code>_</code>作为标记强调字词的符号，被<code>*</code>或<code>_</code>包围的字词会被转成用<code>&lt;em&gt;</code>标签包围，用两个<code>*</code>或<code>_</code>包起来的话，则会被转成<code>&lt;strong&gt;</code>，例如：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">*单个星号*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_单个下划线_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**双星号**</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">__双下划线__</span></span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p><em>单个星号</em></p>
<p><em>单个下划线</em></p>
<p><strong>双星号</strong></p>
<p><strong>双下划线</strong></p>
<p>强调样式的限制是，样式符号必须成对出现，如果你的<code>*</code>和<code>_</code>两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>强调也可以直接插在文字中间：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">这是一个<span class="strong">*强调*</span>。</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p>这是一个<em>强调</em>。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果要标记一小段行内代码，你可以用<code>`</code>把它包起来，例如：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> the `printf()` <span class="keyword">function</span>.</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p>Use the <code>printf()</code> function.</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<p><em>行内式图片</em></p>
<p>行内式的图片语法看起来像是：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[测试图片]</span>(/uploads/home-bg-art.jpg)</span><br><span class="line"></span><br><span class="line">!<span class="selector-attr">[测试图片]</span>(/uploads/home-bg-art.jpg &quot;这是一个测试图片&quot;)</span><br></pre></td></tr></table></figure>

<p>详细叙述如下：</p>
<ul>
<li>一个<code>!</code></li>
<li>接着一个<code>[]</code>，里面放上图片的替代文字</li>
<li>接着一个<code>()</code>，里面放上图片的网址，最后还可以用<code>&quot;&quot;</code>包住,并加上选择性的<code>title</code>文字。</li>
</ul>
<p>效果为：</p>
<p><img data-src="/uploads/home-bg-art.jpg" alt="测试图片"></p>
<p><img data-src="/uploads/home-bg-art.jpg" alt="测试图片" title="这是一个测试图片"></p>
<p><em>参考式图片</em></p>
<p>参考式的图片语法则如下：</p>
<pre><code>
![Alt text][id]

[id]: /uploads/home-bg-art.jpg "这是一个测试图片"
</code></pre>

<p>效果为：</p>
<p><img data-src="/uploads/home-bg-art.jpg" alt="Alt text" title="这是一个测试图片"></p>
<p>到目前为止，Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的<code>&lt;img&gt;</code>标签。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用<code>&lt;&gt;</code>包起来，Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;http:<span class="comment">//www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="symbol">baidu@</span><span class="number">163.</span>com&gt;</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v">http://www.baidu.com<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="bWFpbHRvOmJhaWR1QDE2My5jb20=">mailto:baidu@163.com<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号:</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\\</span>   反斜线</span><br><span class="line"><span class="string">\`</span>   反引号</span><br><span class="line"><span class="string">\*</span>   星号</span><br><span class="line"><span class="string">\_</span>   底线</span><br><span class="line"><span class="string">\&#123;&#125;</span>  花括号</span><br><span class="line"><span class="string">\[]</span>  方括号</span><br><span class="line"><span class="string">\()</span>  括弧</span><br><span class="line"><span class="string">\#</span>   井字号</span><br><span class="line"><span class="string">\+</span>   加号</span><br><span class="line"><span class="string">\-</span>   减号</span><br><span class="line"><span class="string">\.</span>   英文句点</span><br><span class="line"><span class="string">\!</span>   惊叹号</span><br></pre></td></tr></table></figure>

<p>效果为：</p>
<p>\ 反斜线</p>
<p>` 反引号</p>
<p>* 星号</p>
<p>_ 底线</p>
<p>{} 花括号</p>
<p>[] 方括号</p>
<p>() 括弧</p>
<p># 井字号</p>
<p>+ 加号</p>
<p>- 减号</p>
<p>. 英文句点</p>
<p>! 惊叹号</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>简明语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora 20 安装gitolite</title>
    <url>/2014/10/14/2014-10-14-fedora-20-gitolite/</url>
    <content><![CDATA[<blockquote>
<p>“git本地化之后，可能会用到权限管理，gitolite就是一个强大的权限管理工具”</p>
</blockquote>
<h3 id="gitolite安装先决条件"><a href="#gitolite安装先决条件" class="headerlink" title="gitolite安装先决条件"></a>gitolite安装先决条件</h3><p>关于<code>git</code>和<code>ssh</code>登录的基础知识，网上已经有很多很好的文章，在这里就不再加以赘述了。</p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>要安装<code>gitolite</code>，首先要安装<code>git</code>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="创建git用户组和git用户"><a href="#创建git用户组和git用户" class="headerlink" title="创建git用户组和git用户"></a>创建git用户组和git用户</h4><p>然后，需要新建用户和用户组<code>git</code>，以方便所有用户使用<code>git</code>账户进行登录：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加git用户组</span></span><br><span class="line">sudo groupadd git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新用户git并将其添加到用户组git之中</span></span><br><span class="line">sudo <span class="keyword">adduser </span>-g git git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户git的密码</span></span><br><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>

<h4 id="创建管理员密钥"><a href="#创建管理员密钥" class="headerlink" title="创建管理员密钥"></a>创建管理员密钥</h4><p>由于初始化<code>gitolite</code>需要一个管理员的公钥，所以需要创建一个<code>key</code>:</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为名为“yourname”的账户生成相应的key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;yourname&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择存储key的位置及key文件名称</span></span><br><span class="line">Enter file in which to save the key (/home/user/.ssh/id_rsa): /home/user/.ssh/yourname</span><br><span class="line">Enter passphrase (empty for no passphrase): <span class="comment">#为你的key创建密码，一般不需要，回车即可</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#回车即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后输出类似的结果表示key生成成功</span></span><br><span class="line">...</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|<span class="string">    . .          </span>|</span><br><span class="line">|<span class="string">     = .         </span>|</span><br><span class="line">|<span class="string">  . o E          </span>|</span><br><span class="line">|<span class="string"> o o = o         </span>|</span><br><span class="line">|<span class="string">  o o = S        </span>|</span><br><span class="line">|<span class="string">   . + B.        </span>|</span><br><span class="line">|<span class="string">    . =o.        </span>|</span><br><span class="line">|<span class="string">     .o.         </span>|</span><br><span class="line">|<span class="string">     .oo.        </span>|</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<h4 id="将公钥上传到git用户中"><a href="#将公钥上传到git用户中" class="headerlink" title="将公钥上传到git用户中"></a>将公钥上传到git用户中</h4><p>生成<code>key</code>之后，需要将其上传到<code>git</code>用户之中：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将公钥上传到git用户中</span></span><br><span class="line">scp /home/user/.ssh/yourname.pub git<span class="variable">@localhost</span><span class="symbol">:/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ECDSA</span> key fingerprint is <span class="number">77</span><span class="symbol">:ad</span><span class="symbol">:e9</span><span class="symbol">:c2</span><span class="symbol">:e3</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">f:</span><span class="symbol">bc:</span><span class="symbol">eb:</span><span class="number">38</span><span class="symbol">:</span><span class="number">42</span><span class="symbol">:e8</span><span class="symbol">:</span><span class="number">24</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">f:</span><span class="symbol">b4:</span><span class="number">4</span><span class="symbol">a:</span>a9.</span><br><span class="line"><span class="title class_">Are</span> you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>

<p>若此时出现错误：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ssh: <span class="keyword">connect</span> <span class="keyword">to</span> host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> port <span class="number">22</span>: <span class="keyword">Connection</span> refused</span><br><span class="line">lost <span class="keyword">connection</span></span><br></pre></td></tr></table></figure>

<p>则说明<code>ssh</code>服务没有打开，需要开启<code>ssh</code>服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启ssh服务</span></span><br><span class="line">sudo<span class="built_in"> service </span>sshd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动ssh服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure>

<p>除此之外，要让局域网内的用户能够访问<code>git</code>服务器，需要关闭防火墙：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">stop</span> firewalld.service</span><br><span class="line">sudo systemctl <span class="keyword">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

<h3 id="安装gitolite"><a href="#安装gitolite" class="headerlink" title="安装gitolite"></a>安装gitolite</h3><h4 id="进入git用户并创建bin目录"><a href="#进入git用户并创建bin目录" class="headerlink" title="进入git用户并创建bin目录"></a>进入git用户并创建bin目录</h4><p>安装<code>gitolite</code>的操作需要在<code>git</code>用户下进行，首先需要切换到<code>git</code>用户：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">su git</span></span><br></pre></td></tr></table></figure>

<p>输入密码后，需要切换到<code>git</code>用户的用户根目录下创建<code>bin</code>文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建bin文件夹是为了将gitolite安装到其中便于认知和管理</span></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br></pre></td></tr></table></figure>

<h4 id="克隆gitolite并安装"><a href="#克隆gitolite并安装" class="headerlink" title="克隆gitolite并安装"></a>克隆gitolite并安装</h4><p>我们需要从<code>github</code>中克隆<code>gitolite</code>的官方仓库进行安装：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆gitolite仓库</span></span><br><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/sitaramc/gi</span>tolite</span><br><span class="line"></span><br><span class="line"><span class="comment">#将gitolite安装到bin目录下</span></span><br><span class="line">.<span class="regexp">/gitolite/i</span>nstall -to ~<span class="regexp">/bin/</span></span><br></pre></td></tr></table></figure>

<p>安装<code>gitolite</code>的时候，可能会出现错误：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Can<span class="symbol">&#x27;t</span> locate Data/Dumper.pm <span class="keyword">in</span> @INC</span><br></pre></td></tr></table></figure>

<p>这是由于没有安装相应的<code>perl</code>包所导致的，需要切换回非<code>git</code>用户进行安装，使用命令：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用CPAN安装perl包</span></span><br><span class="line">sudo perl -MCPAN -e <span class="keyword">shell</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">cpan[<span class="number">1</span>]&gt; <span class="keyword">install </span>Data::Dumper</span><br></pre></td></tr></table></figure>

<p>如果是首次使用<code>CPAN</code>会进行一定的配置，在询问是否自动配置处输入<code>yes</code>即可。</p>
<p>使用<code>CPAN</code>时可能出现错误：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Can<span class="symbol">&#x27;t</span> locate CPAN.pm <span class="keyword">in</span> @INC</span><br></pre></td></tr></table></figure>

<p>这是由于没有安装<code>CPAN</code>出现的错误，使用命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> perl-CPAN</span><br></pre></td></tr></table></figure>

<p>安装完成后，应该会自动集成<code>Data::Dumper</code>包。</p>
<p>回到<code>git</code>用户，安装<code>gitolite</code>后，<code>bin</code>文件夹中会出现相应的文件，到此，<code>gitolite</code>就安装成功了。</p>
<h4 id="使用公钥初始化gitolite"><a href="#使用公钥初始化gitolite" class="headerlink" title="使用公钥初始化gitolite"></a>使用公钥初始化gitolite</h4><p>完成安装<code>gitolite</code>后，需要使用刚才上传的公钥将<code>gitolite</code>进行初始化，这个公钥的所有者将成为<code>gitolite</code>的第一个管理员, 在<code>git</code>用户根目录下，使用命令：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"># 使用yourname.pub对gitolite进行初始化</span><br><span class="line">./bin/gitolite setup -pk yourname.pub</span><br><span class="line"></span><br><span class="line">初始化空的 Git 版本库于 /home/git/repositories/gitolite-admin.git/</span><br><span class="line">初始化空的 Git 版本库于 /home/git/repositories/testing.git/</span><br><span class="line"><span class="symbol">WARNING: </span>/home/git/.ssh missing; creating a new one</span><br><span class="line"><span class="code">    (this is normal on a brand new install)</span></span><br><span class="line"><span class="symbol">WARNING: </span>/home/git/.ssh/authorized_keys missing; creating a new one</span><br><span class="line"><span class="code">    (this is normal on a brand new install)</span></span><br></pre></td></tr></table></figure>

<p>到此为止，<code>gitolite</code>的初始化已经完成。</p>
<h3 id="添加gitolite的用户和仓库"><a href="#添加gitolite的用户和仓库" class="headerlink" title="添加gitolite的用户和仓库"></a>添加gitolite的用户和仓库</h3><p>不要手动在<code>git</code>服务器中添加新用户或者新仓库。因为<code>gitolite</code>的用户，仓库和权限规则都是使用一个名为<code>gitolite-admin</code>的特殊仓库进行维护的，想要进行修改，就需要通过修改该仓库的文件并<code>push</code>到服务器当中。</p>
<p>要添加用户和仓库，首先需要退出<code>git</code>用户后，将<code>gitolite-admin</code>克隆到本地:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出git用户</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将gitolite-admin仓库克隆到本地</span></span><br><span class="line">git clone git@localhost:gitolite-admin</span><br></pre></td></tr></table></figure>

<p>进入<code>gtiolite</code>目录后，可以看到两个子目录<code>conf</code>和<code>keydir</code>，<code>conf/gitolite.conf</code>用于修改仓库，用户及其权限，<code>keydir</code>用于存放用户的公钥。</p>
<p>为了增加新用户<code>alice</code>，<code>bob</code>和<code>carol</code>， 首先需要获取他们的公钥（alice.pub，bob.pub和carol.pub），并添加到<code>keydir</code>文件夹当中。</p>
<p>为了增加新仓库<code>foo</code>，并赋予这些用户不同的权限，修改<code>conf/gitolite.conf</code>文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repo foo</span><br><span class="line">    RW+         =   <span class="type">alice</span></span><br><span class="line">    <span class="variable">RW</span>          <span class="operator">=</span>   <span class="type">bob</span></span><br><span class="line">    <span class="variable">R</span>           <span class="operator">=</span>   carol</span><br></pre></td></tr></table></figure>

<p>进行修改之后，需要将改动上传到服务器使其生效：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">add</span> conf</span><br><span class="line">git <span class="built_in">add</span> keydir</span><br><span class="line">git commit -m <span class="string">&quot;added foo, gave access to alice, bob, carol&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>当<code>git</code>的<code>push</code>操作成功后，<code>gitolite</code>将会把新用户添加到服务器的<code>~/.ssh/authorized_keys</code>文件中，然后会新建一个名为<code>foo</code>的空仓库。</p>
<h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p><code>gitolite</code>的权限管理非常强大，之前展示的只是最简单的权限管理，下面是更加深入一些的管理：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">repo foo</span><br><span class="line">    RW+                     =   alice</span><br><span class="line">    -   <span class="keyword">master</span>              <span class="title">=   bob</span></span><br><span class="line">    -   refs/tags/v[<span class="number">0</span>-<span class="number">9</span>]    =   bob</span><br><span class="line">    RW                      =   bob</span><br><span class="line">    RW  refs/tags/v[<span class="number">0</span>-<span class="number">9</span>]    =   carol</span><br><span class="line">    R                       =   dave</span><br></pre></td></tr></table></figure>

<p>下面对上述规则进行阐述：</p>
<ul>
<li><p><code>alice</code>能够对仓库进行所有的操作。</p>
</li>
<li><p><code>bob</code>能够创建和推送任何名字不为<code>master</code>的分支，并能够添加任何不以<code>v+数字</code>开头的<code>tag</code>。</p>
</li>
<li><p><code>carol</code>能够添加任何以<code>v+数字</code>开头的<code>tag</code>。</p>
</li>
<li><p><code>dave</code>能够进行<code>clone</code>和<code>fetch</code>操作。</p>
</li>
</ul>
<p>更加详细的权限管理请看<span class="exturl" data-url="aHR0cDovL2dpdG9saXRlLmNvbS9naXRvbGl0ZS9naXRvbGl0ZS5odG1sJTIyZ2l0b2xpdGUlRTUlQUUlOTglRTYlOTYlQjklRTYlOTYlODclRTYlQTElQTMlMjI=">官方文档<i class="fa fa-external-link-alt"></i></span>。</p>
<h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p><code>gitolite</code>允许创建用户组：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@staff</span>      =   alice bob carol</span><br><span class="line"><span class="variable">@interns</span>    =   ashok</span><br><span class="line"></span><br><span class="line">repo secret</span><br><span class="line">    RW      =   <span class="variable">@staff</span></span><br><span class="line"></span><br><span class="line">repo foss</span><br><span class="line">    RW+     =   <span class="variable">@staff</span></span><br><span class="line">    RW      =   <span class="variable">@interns</span></span><br></pre></td></tr></table></figure>

<p>用户组是可以堆叠的，下面的写法和上方的<code>@staff</code>是相同的：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@staff</span>      =   alice bob</span><br><span class="line"><span class="variable">@staff</span>      =   carol</span><br></pre></td></tr></table></figure>

<p>同样的，也可以将用户组添加到另一个用户组当中：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@all-devs</span>   =   <span class="variable">@staff</span> <span class="variable">@interns</span></span><br></pre></td></tr></table></figure>

<p>此外，<code>gitolite</code>有一个特殊的用户组，名为<code>@all</code>，他表示所有的用户。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS Yosemite 配置sublime text C语言开发环境</title>
    <url>/2015/05/04/2015-05-04-mac-sublime-c/</url>
    <content><![CDATA[<blockquote>
<p>“Sublime Text是一个轻便的文本编辑器”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5zdWJsaW1ldGV4dC5jb20vMw==" title="sublime text 3">Sublime Text<i class="fa fa-external-link-alt"></i></span> 是一个代码编辑器，也是HTML和散文先进的文本编辑器。它是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的<span class="exturl" data-url="aHR0cDovL3d3dy52aW0ub3JnL2Rvd25sb2FkLnBocA==" title="Vim">Vim<i class="fa fa-external-link-alt"></i></span>。<br><span class="exturl" data-url="aHR0cDovL3d3dy5zdWJsaW1ldGV4dC5jb20vMw==" title="sublime text 3">Sublime Text<i class="fa fa-external-link-alt"></i></span>具有漂亮的用户界面和强大的功能，例如代码缩略图，代码段等。还可自定义键绑定，菜单和工具栏。它的主要功能包括：拼写检查，书签，Goto 功能，即时项目切换，多选择，多窗口等等。它是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。它还具有大量的可扩展插件，极大地丰富了这款编辑器的功能。</p>
<span id="more"></span>

<h3 id="安装配置sublime-text"><a href="#安装配置sublime-text" class="headerlink" title="安装配置sublime text"></a>安装配置sublime text</h3><h4 id="安装sublime-text-3"><a href="#安装sublime-text-3" class="headerlink" title="安装sublime text 3"></a>安装sublime text 3</h4><p>首先可以前往<span class="exturl" data-url="aHR0cDovL3d3dy5zdWJsaW1ldGV4dC5jb20vMw==" title="sublime text 3">Sublime Text官方网站<i class="fa fa-external-link-alt"></i></span>下载对应平台的软件，安装完成后即可使用。但是为了更好地使用这一款强大的软件，我们可以安装一些插件。</p>
<p>这款软件是永久免费的，但是免费版会时不时的弹出购买提示，下面提供一个注册码，可以直接注册这个软件：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line">Andrew Weber</span><br><span class="line">Single User License</span><br><span class="line">EA7E-<span class="number">855605</span></span><br><span class="line"><span class="number">813</span>A03DD <span class="number">5</span>E4AD9E6 <span class="number">6</span>C0EEB94 BC99798F</span><br><span class="line"><span class="number">942194A6</span> <span class="number">02396E98</span> E62C9979 <span class="number">4</span>BB979FE</span><br><span class="line"><span class="number">91424</span>C9D A45400BF F6747D88 <span class="number">2</span>FB88078</span><br><span class="line"><span class="number">90</span>F5CC94 <span class="number">1</span>CDC92DC <span class="number">8457107</span><span class="keyword">A</span> F151657B</span><br><span class="line"><span class="number">1D22E383</span> <span class="keyword">A</span><span class="number">997F016</span> <span class="number">42397640</span> <span class="number">33</span>F41CFC</span><br><span class="line">E1D0AE85 A0BBD039 <span class="number">0E9C8D55</span> E1B89D5D</span><br><span class="line"><span class="number">5</span>CDB7036 E56DE1C0 EFCC0840 <span class="number">650</span>CD3A6</span><br><span class="line">B98FC99C <span class="number">8</span>FAC73EE D<span class="number">2B95564</span> DF450523</span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure>

<h4 id="安装sublime-text-3-插件"><a href="#安装sublime-text-3-插件" class="headerlink" title="安装sublime text 3 插件"></a>安装sublime text 3 插件</h4><p><em>Package Control组件：</em></p>
<ul>
<li><p>按control+`(键盘上1左边的按钮)调出console控制台</p>
</li>
<li><p>粘贴以下代码到底部命令行并回车：</p>
</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(ipp, pf), <span class="string">&#x27;wb&#x27;</span>).<span class="keyword">write</span>(urllib.request.urlopen( <span class="string">&#x27;http://sublime.wbond.net/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重启Sublime Text 3</p>
</li>
<li><p>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功</p>
</li>
</ul>
<p>下面是sublime text 2 的安装命令：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import urllib2,<span class="built_in">os</span>; pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); <span class="built_in">os</span>.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class="built_in">open</span>( <span class="built_in">os</span>.<span class="built_in">path</span>.join( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).<span class="built_in">write</span>( urllib2.urlopen( <span class="string">&#x27;http://sublime.wbond.net/&#x27;</span> +pf.replace( <span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span> )).<span class="built_in">read</span>()); <span class="built_in">print</span>( <span class="string">&#x27;Please restart Sublime Text to finish installation&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用Package Control安装插件的方法：</p>
</blockquote>
<ul>
<li><p>按下Ctrl+Shift+P调出命令面板</p>
</li>
<li><p>输入pcic 调出 Install Package 选项并回车，然后在列表中选中要安装的插件</p>
</li>
</ul>
<p><em>较为常用的一些插件</em></p>
<ol>
<li><p><code>ConvertToUTF8</code>　　支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件</p>
</li>
<li><p><code>Bracket Highlighter</code>　　用于匹配括号，引号和html标签。对于很长的代码很有用。安装好之后，不需要设置插件会自动生效</p>
</li>
<li><p><code>DocBlockr</code>　　DocBlockr可以自动生成PHPDoc风格的注释。它支持的语言有Javascript, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++</p>
</li>
<li><p><code>Emmet(Zen Coding)</code>　　快速生成HTML代码段的插件，强大到无与伦比，不知道的请自行google</p>
</li>
<li><p><code>SideBar Enhancements</code>　　这个插件改进了侧边栏，增加了许多功能</p>
</li>
<li><p><code>SideBar Folders</code>　　增加了侧边栏对于文件夹的支持</p>
</li>
<li><p><code>SublimeCodeIntel</code>    提供了代码提示和自动补全功能</p>
</li>
</ol>
<p>sublime text 还具有很多插件，读者可以根据自己所使用的语言和需要进行相应的安装</p>
<p><em>配置sublime text主题</em></p>
<p>Sublime Text本身对于主题的扩展也是十分的强大，一些推荐的主题可以前往<span class="exturl" data-url="aHR0cDovL2Rlc2lnbmJlZXAuY29tLzIwMTQvMDYvMTAvMzUtY29vbC1zdWJsaW1lLXRleHQtdGhlbWVzLw==">design beep网站<i class="fa fa-external-link-alt"></i></span>进行选择和安装</p>
<p>下面介绍一下我安装的主题和相应的配置文件：</p>
<p>在package control中分别输入<code>numix</code>和<code>itg.flat</code>进行主题的安装，然后安装插件<code>markdown extend</code>增加对markdown语法的支持，然后编辑<code>Settings-User</code>，加入以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;color_scheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Packages/Theme - itg.flat/itg.dark.tmTheme&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;numix_sidebar_tree_medium&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;numix_small_tabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Numix.sublime-theme&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="/uploads/in-post/sublime_theme.png" alt="numix主题"></p>
<h3 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h3><p>安装完sublime text后，编辑C语言的文本编辑器就已经配置好了，但是想要编译C文件，则需要安装<span class="exturl" data-url="aHR0cDovL2djYy5nbnUub3JnLw==" title="gcc官方网站">gcc<i class="fa fa-external-link-alt"></i></span>，在Mac OS中，直接使用<code>brew</code>命令进行安装即可，安装命令如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>gcc</span><br></pre></td></tr></table></figure>

<p>等待安装完成</p>
<p>输入命令<code>gcc -v</code>验证是否安装成功，如果安装成功，应该有以下提示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Configured</span> with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/<span class="number">4</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Apple</span> LLVM version <span class="number">6</span>.<span class="number">1</span>.<span class="number">0</span> (clang-<span class="number">602</span>.<span class="number">0</span>.<span class="number">49</span>) (based <span class="literal">on</span> LLVM <span class="number">3</span>.<span class="number">6</span>.<span class="number">0</span>svn)</span><br><span class="line"><span class="attribute">Target</span>: x86_64-apple-darwin14.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Thread</span> model: posix</span><br></pre></td></tr></table></figure>

<h3 id="配置sublime-text的C语言编译系统"><a href="#配置sublime-text的C语言编译系统" class="headerlink" title="配置sublime text的C语言编译系统"></a>配置sublime text的C语言编译系统</h3><p>经过前面的步骤，就可以分别进行C语言的编辑和编译，但是为了方便，只需要简单地配置就可以直接用sublime text进行编译了</p>
<p>打开Tools-&gt;Build System-&gt;New Build System，在新建的文件中输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;gcc -o <span class="variable">$&#123;file_base_name&#125;</span> <span class="variable">$file_name</span>&quot;</span>],</span><br><span class="line">    <span class="string">&quot;shell&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;working_dir&quot;</span> : <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;selector&quot;</span>: <span class="string">&quot;source.c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;variants&quot;</span> :</span><br><span class="line">    [&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Run&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span> : <span class="string">&quot;./<span class="variable">$&#123;file_base_name&#125;</span>&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用control+B进行编译文件，使用control+shift+B运行编译好的文件</p>
<p>以下是sublime text 2的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;gcc&quot;</span>,  <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;<span class="variable">$file_base_name</span>&quot;</span>, <span class="string">&quot;<span class="variable">$file_name</span>&quot;</span>],</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span> : [<span class="string">&quot;./<span class="variable">$file_base_name</span>&quot;</span>],</span><br><span class="line">    <span class="string">&quot;selector&quot;</span> : <span class="string">&quot;source.c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shell&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;working_dir&quot;</span> : <span class="string">&quot;<span class="variable">$file_path</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一行相当于在shell中输入命令<code>gcc -o 文件名 文件名.c</code></p>
</li>
<li><p>第二行则是运行编译成功的文件</p>
</li>
<li><p>第三行的意思是对后缀为<code>.c</code>的文件进行选择</p>
</li>
</ul>
<p>编辑完成后，保存文件，命名为C.sublime-build，然后就可以在Build System中选中这个编译方式了</p>
<p>编辑文件hello.c:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用命令<code>command + B</code>编译并运行，效果如下:</p>
<p><img data-src="/uploads/in-post/hello_world_c.png" alt="hello world"></p>
<p>至此，就可以在你的Mac OS中使用sublime text进行C语言的开发了</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS安装jekyll</title>
    <url>/2015/03/19/2015-03-19-mac-install-jekyll/</url>
    <content><![CDATA[<blockquote>
<p>“jekyll 是一款简单的博客系统，静态网站生成器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>jekyll 是一款简单的博客系统，静态网站生成器。她有一个模版目录，存放整个静态网站的模版文件，可以通过<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nob3BpZnkvbGlxdWlkL3dpa2k=" title="Liquid">Liquid<i class="fa fa-external-link-alt"></i></span>处理模版文件，把使用标记语言<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UZXh0aWxl" title="Textile">Textile<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYXJrZG93bg==" title="Markdown">Markdown<i class="fa fa-external-link-alt"></i></span>编写的内容文件，按照模版格式，转换成最终的静态网站页面。大名鼎鼎的GitHub Pages就是通过它实现的。搭建好我们的博客系统之后，我们还可以把它放到github的pages上进行展示。</p>
<span id="more"></span>

<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>使用Mac的程序员必不可少的一步便是安装Homebrew，他就像是centOS的<code>yum</code>命令和ubuntu的<code>apt-get</code>命令一样，通过<code>brew</code>命令，我们可以快速的安装一些软件包。<br>使用命令行安装Homebrew的命令如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装最新版ruby"><a href="#安装最新版ruby" class="headerlink" title="安装最新版ruby"></a>安装最新版ruby</h3><p>Homebrew安装完成之后，使用它来安装最新版本的ruby，代码如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>ruby</span><br></pre></td></tr></table></figure>

<p>安装完成之后，会提示安装好的ruby目录为<code>/usr/local/Cellar/ruby/2.2.0</code>,我用的shell为zsh，所以想要最新安装的ruby生效，需要将<code>~/.zshrc</code>配置文件中的环境变量<code>PATH</code>中添加上新版本ruby的目录，在<code>PATH</code>后添加上ruby安装目录的<code>bin</code>文件夹，如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="string">&quot;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/Cellar/ruby/2.2.0/bin&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后输入命令<code>source ~/.zshrc</code>，再使用ruby就是最新版本了。</p>
<p>输入命令<code>ruby --version</code>查看ruby版本：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ruby</span> <span class="number">2</span>.<span class="number">2</span>.<span class="number">0</span>p0 (<span class="number">2014</span>-<span class="number">12</span>-<span class="number">25</span> revision <span class="number">49005</span>)<span class="meta"> [x86_64-darwin14]</span></span><br></pre></td></tr></table></figure>
<p>如果，版本不对，就使用命令<code>echo $PATH</code>查看最新版本的ruby目录是否在环境变量<code>PATH</code>中，如果不对，就按照上述过程修改环境变量<code>PATH</code>。</p>
<h3 id="安装jkeyll"><a href="#安装jkeyll" class="headerlink" title="安装jkeyll"></a>安装jkeyll</h3><p>安装最新版本的jekyll，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> jekyll</span><br></pre></td></tr></table></figure>

<p>因为我们将会使用Markdown语言作为标记语言，所以还需要安装kramdown，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> kramdown</span><br></pre></td></tr></table></figure>

<p>至此，本机的jekyll运行环境就已经搭建好了</p>
<h3 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h3><p>安装好之后，就可以自己构建一个博客系统，或者也可以到<span class="exturl" data-url="aHR0cDovL2pla3lsbHRoZW1lcy5vcmcv" title="jekyll 模板网站">jekyll模板网站<i class="fa fa-external-link-alt"></i></span> 下载自己喜欢的模板进行修改，然后运行并查看效果，要运行jekyll首先要进入博客的根目录，然后运行命令<code>jekyll server</code>，最后会显示启动信息：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Server</span> address: http:<span class="comment">//127.0.0.1:4000/</span></span><br><span class="line"><span class="built_in">Server</span> running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>

<p>说明程序已经成功启动，在浏览器中输入localhost:4000，就可以查看自己的博客了。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Jekyll</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>七种基本排序算法</title>
    <url>/2016/03/28/2016-03-28-seven-sort/</url>
    <content><![CDATA[<blockquote>
<p>“排序算法可以说是数据结构与算法当中最为基础的部分”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>排序算法可以说是数据结构与算法当中最为基础的部分，针对的是数组这一数据结构。将数组中的无序数据元素通过算法整理为有序的数据元素即为排序。</p>
<span id="more"></span>

<h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>简介：</p>
<p><code>冒泡排序</code>（Bubble Sort）是一种简单的排序算法。它重复地访问要排序的数列，将每次访问的最大值“浮”到数组尾部。</p>
<p>步骤如下：</p>
<ol>
<li>   比较相邻的元素。如果第一个比第二个大，就交换他们两个，直到把最大的元素放到数组尾部。</li>
<li>   遍历长度减一，对剩下的元素从头重复以上的步骤。</li>
<li>   直到没有任何一对数字需要比较时完成。</li>
</ol>
<!--break-->

<p>实现代码：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">def <span class="keyword">bubbleSort(arr):</span></span><br><span class="line"><span class="keyword"></span>    for i in range(len(arr))[::-<span class="number">1</span>]:</span><br><span class="line">        for <span class="keyword">j </span>in range(i):</span><br><span class="line">            if arr[<span class="keyword">j] </span>&gt; arr[<span class="keyword">j </span>+ <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">swap(arr[j], </span>arr[<span class="keyword">j </span>+ <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img data-src="/uploads/in-post/bubbleSort.gif" alt="冒泡排序"></p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>简介：</p>
<p><code>选择排序</code>(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，重复上述过程，直到所有元素均排序完毕。</p>
<p>步骤如下：</p>
<ol>
<li>   遍历数组，找到最小的元素，将其置于数组起始位置。</li>
<li>   从上次最小元素存放的后一个元素开始遍历至数组尾，将最小的元素置于开始处。</li>
<li>   重复上述过程，直到元素排序完毕。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="built_in">min</span> = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[<span class="built_in">min</span>]:</span><br><span class="line">                <span class="built_in">min</span> = j</span><br><span class="line">        swap(arr[i], arr[<span class="built_in">min</span>])</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img data-src="/uploads/in-post/selectSort.gif" alt="选择排序"></p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>简介：</p>
<p><code>插入排序</code>（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>步骤如下：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置中</li>
<li>重复步骤2</li>
</ol>
<p>实现代码：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def insertSort(arr):</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        tmp = arr[i]</span><br><span class="line">        <span class="keyword">pre</span> = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> arr[<span class="keyword">pre</span>] &gt; tmp:</span><br><span class="line">            arr[<span class="keyword">pre</span> + <span class="number">1</span>] = arr[<span class="keyword">pre</span>]</span><br><span class="line">            <span class="keyword">pre</span> -= <span class="number">1</span></span><br><span class="line">        arr[<span class="keyword">pre</span> + <span class="number">1</span>] = tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h3><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>简介：</p>
<p><code>希尔排序</code>(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>
<p>步骤如下：</p>
<ol>
<li>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；</li>
<li>随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def insertSort(arr):</span><br><span class="line">    <span class="keyword">k</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">k</span> &lt; <span class="built_in">len</span>(arr) / <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">k</span> = <span class="number">3</span> * h + <span class="number">1</span> //此处为Knuth算法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">k</span> &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">k</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            tmp = arr[i]</span><br><span class="line">            <span class="keyword">pre</span> = i - <span class="keyword">k</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> arr[<span class="keyword">pre</span>] &gt; tmp:</span><br><span class="line">                arr[<span class="keyword">pre</span> + <span class="keyword">k</span>] = arr[<span class="keyword">pre</span>]</span><br><span class="line">                <span class="keyword">pre</span> -= <span class="keyword">k</span></span><br><span class="line">            arr[<span class="keyword">pre</span> + <span class="keyword">k</span>] = tmp</span><br><span class="line">        <span class="keyword">k</span> = (<span class="keyword">k</span> - <span class="number">1</span>) / <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img data-src="/uploads/in-post/shellSort.gif" alt="希尔排序"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>简介：</p>
<p><code>快速排序</code>（Quicksort）是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<p>步骤如下：</p>
<p>步骤：</p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">quickSort</span><span class="params">(arr, low, high)</span>:</span></span><br><span class="line"><span class="function">    if low &lt; high:</span></span><br><span class="line"><span class="function">        pivot =</span> <span class="built_in">partition</span>(arr, low, high)</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, low, pivot - <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, pivot + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">partition</span><span class="params">(arr, low, high)</span>:</span></span><br><span class="line"><span class="function">    pivot =</span> arr[low]</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> arr[high] &gt;= pivot:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        arr[low] = arr[high]</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> arr[low] &lt;= pivot:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        arr[high] = arr[low]</span><br><span class="line">    arr[low] = pivot</span><br><span class="line">    <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img data-src="/uploads/in-post/quickSort.gif" alt="快速排序"></p>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>简介：</p>
<p><code>归并排序</code>(Merge Sort)是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>
<p>步骤如下：</p>
<ol>
<li>申请空间，创建两个数组，长度分别为两个有序数组的长度</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<p>实现代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">def mergeSort(arr, low, high):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        <span class="keyword">mid</span> = low + (high - low) / <span class="number">2</span></span><br><span class="line">        mergeSort(arr, low, <span class="keyword">mid</span>)</span><br><span class="line">        mergeSort(arr, <span class="keyword">mid</span> + <span class="number">1</span>, high)</span><br><span class="line">        <span class="literal">return</span> <span class="built_in">merge</span>(arr, low, <span class="keyword">mid</span>, high)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">merge</span>(arr, low, <span class="keyword">mid</span>, high):</span><br><span class="line">    leftArr = arr[low : <span class="keyword">mid</span> + <span class="number">1</span>]</span><br><span class="line">    rightArr = arr[<span class="keyword">mid</span> + <span class="number">1</span> : high + <span class="number">1</span>]</span><br><span class="line">    i, j, m = <span class="number">0</span>, <span class="number">0</span>, low</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(leftArr) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(rightArr)：</span><br><span class="line">        <span class="keyword">if</span> leftArr[i] &lt; rightArr[j]:</span><br><span class="line">            arr[m] = leftArr[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arr[m] = rightArr[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(leftArr):</span><br><span class="line">        arr[m] = leftArr[i]</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(rightArr):</span><br><span class="line">        arr[m] = rightArr[j]</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>实现效果：</p>
<p><img data-src="/uploads/in-post/mergeSort.gif" alt="归并排序"></p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>简介：</p>
<p>堆积排序（Heap Sort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>步骤如下：</p>
<ol>
<li>按堆的定义将数组R[0..n]调整为堆（这个过程称为创建初始堆），交换R[0]和R[n]；</li>
<li>将R[0..n-1]调整为堆，交换R[0]和R[n-1]；</li>
<li>重复上述过程，直到交换了R[0]和R[1]为止。</li>
</ol>
<p>实现代码：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">def</span> heapSort(arr):</span><br><span class="line">    <span class="attribute">for</span> i in range(len(arr) / <span class="number">2</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="attribute">heapAdjust</span>(arr, i, len(arr))</span><br><span class="line"></span><br><span class="line">    <span class="attribute">for</span> i in range(len(arr) - <span class="number">1</span>)[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="attribute">swap</span>(arr[i], arr[<span class="number">0</span>])</span><br><span class="line">        <span class="attribute">heapAdjust</span>(arr, <span class="number">0</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> heapAdjust(arr, parent, length)：</span><br><span class="line">    <span class="attribute">tmp</span> = arr[parent]</span><br><span class="line">    <span class="attribute">child</span> = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">    <span class="attribute">while</span> child &lt; length:</span><br><span class="line">        <span class="attribute">if</span> child + <span class="number">1</span> &lt; length and arr[child + <span class="number">1</span>] &gt; arr[child]:</span><br><span class="line">            <span class="attribute">child</span> += <span class="number">1</span></span><br><span class="line">        <span class="attribute">if</span> arr[child] &lt;= tmp:</span><br><span class="line">            <span class="attribute">break</span></span><br><span class="line">        <span class="attribute">arr</span>[parent] = arr[child]</span><br><span class="line">        <span class="attribute">parent</span> = child</span><br><span class="line">        <span class="attribute">child</span> = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">        <span class="attribute">arr</span>[parent] = tmp</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img data-src="/uploads/in-post/heapSort.gif" alt="堆排序"></p>
<h3 id="各排序算法时间空间复杂度"><a href="#各排序算法时间空间复杂度" class="headerlink" title="各排序算法时间空间复杂度"></a>各排序算法时间空间复杂度</h3><p><img data-src="/uploads/in-post/sortTimeComplexity.png"></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS上搭建Nginx,Mysql,PHP开发环境</title>
    <url>/2015/05/29/2015-05-29-install-nginx-php-mysql-mac/</url>
    <content><![CDATA[<blockquote>
<p>“LNMP开发环境是PHP语言开发网站的主流环境。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>LNMP代表的就是：Linux系统下Nginx+MySQL+PHP这种网站服务器架构。Linux是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。<span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy8=">Nginx<i class="fa fa-external-link-alt"></i></span>是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。<span class="exturl" data-url="aHR0cDovL3d3dy5teXNxbC5jb20v">Mysql<i class="fa fa-external-link-alt"></i></span>是一个小型关系型数据库管理系统。<span class="exturl" data-url="aHR0cDovL3BocC5uZXQv">PHP<i class="fa fa-external-link-alt"></i></span>是一种在服务器端执行的嵌入HTML文档的脚本语言。这四种软件均为免费开源软件，组合到一起，成为一个免费、高效、扩展性强的网站服务系统。</p>
<span id="more"></span>

<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>使用Mac的程序员必不可少的一步便是安装Homebrew，他就像是centOS的<code>yum</code>命令和ubuntu的<code>apt-get</code>命令一样，通过<code>brew</code>命令，我们可以快速的安装一些软件包。<br>使用命令行安装Homebrew的命令如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>brew doctor</code>检查是否存在冲突，然后使用<code>brew update &amp;&amp; brew upgrade</code>对brew进行升级。</p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>nginx在Mac OS中可以直接使用brew命令进行安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>nginx</span><br></pre></td></tr></table></figure>

<p>如果需要使用80端口的话，需要将nginx加入root组当中：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp -v <span class="regexp">/usr/</span>local<span class="regexp">/opt/</span>nginx<span class="regexp">/*.plist /</span>Library<span class="regexp">/LaunchDaemons/</span></span><br><span class="line">sudo chown root:wheel <span class="regexp">/Library/</span>LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>

<p>然后使用命令启动nginx服务：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx</span></span><br></pre></td></tr></table></figure>

<p>测试nginx是否安装成功，因为默认配置文件监听的是<code>8080</code>端口，所以先对<code>8080</code>端口发起请求：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">curl -IL http:<span class="comment">//127.0.0.1:8080</span></span><br></pre></td></tr></table></figure>

<p>结果应该类似于下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.9.1</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 29 May 2015 14:50:47 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>612</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Fri, 29 May 2015 14:40:47 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;5444dea7-264&quot;</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br></pre></td></tr></table></figure>

<p>nginx的相关操作如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">sudo nginx //启动nginx</span><br><span class="line">sudo nginx -s reload|<span class="string">reopen</span>|<span class="string">quit //重新加载</span>|<span class="string">重启</span>|<span class="string">退出</span></span><br></pre></td></tr></table></figure>

<h3 id="安装php-fpm"><a href="#安装php-fpm" class="headerlink" title="安装php-fpm"></a>安装php-fpm</h3><p>因为brew并没有php-fpm的源，所以首先要添加源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/dupes</span><br><span class="line">brew tap homebrew/php</span><br></pre></td></tr></table></figure>

<p>然后安装php-fpm，输入命令:</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">brew install php56</span> <span class="literal">--</span><span class="comment">whitout</span><span class="literal">-</span><span class="comment">apache</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">imap</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">tidy</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">debug</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">pgsql</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mysql</span> <span class="literal">--</span><span class="comment">with</span><span class="literal">-</span><span class="comment">fpm</span></span><br></pre></td></tr></table></figure>

<p>程序会自动安装，等待几分钟后完成安装。</p>
<p>安装完成后，还需要将php加入<code>$PATH</code>当中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果使用bash的话</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用ZSH的话</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>然后可以设置php-fpm的开机自启动：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p ~<span class="regexp">/Library/</span>LaunchAgents</span><br><span class="line">ln -sfv <span class="regexp">/usr/</span>local<span class="regexp">/opt/</span>php56<span class="regexp">/homebrew.mxcl.php56.plist ~/</span>Library<span class="regexp">/LaunchAgents/</span></span><br><span class="line">launchctl load -w ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.php56.plist</span><br></pre></td></tr></table></figure>

<p>使用以下命令监测php-fpm是否启动成功：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">lsof -Pni4 | <span class="type">grep</span> LISTEN | <span class="type">grep</span> php</span><br></pre></td></tr></table></figure>

<p>如果启动成功应当有以下类似输出：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php</span>-fpm   <span class="number">27578</span> wenzhiquan    <span class="number">9</span>u  IPv4 <span class="number">0</span>xf29f8b26c08fc27      <span class="number">0</span>t0  TCP <span class="number">127.0.0.1:9000</span> (LISTEN)</span><br><span class="line"><span class="attribute">php</span>-fpm   <span class="number">27628</span> wenzhiquan    <span class="number">0</span>u  IPv4 <span class="number">0</span>xf29f8b26c08fc27      <span class="number">0</span>t0  TCP <span class="number">127.0.0.1:9000</span> (LISTEN)</span><br><span class="line"><span class="attribute">php</span>-fpm   <span class="number">27629</span> wenzhiquan    <span class="number">0</span>u  IPv4 <span class="number">0</span>xf29f8b26c08fc27      <span class="number">0</span>t0  TCP <span class="number">127.0.0.1:9000</span> (LISTEN)</span><br><span class="line"><span class="attribute">php</span>-fpm   <span class="number">27630</span> wenzhiquan    <span class="number">0</span>u  IPv4 <span class="number">0</span>xf29f8b26c08fc27      <span class="number">0</span>t0  TCP <span class="number">127.0.0.1:9000</span> (LISTEN)</span><br></pre></td></tr></table></figure>

<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>MySQL也可以使用brew命令直接进行安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</span><br></pre></td></tr></table></figure>

<p>同样，可以设置MySQL的开机自启动：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -sfv <span class="regexp">/usr/</span>local<span class="regexp">/opt/my</span>sql<span class="regexp">/*.plist ~/</span>Library/LaunchAgents</span><br><span class="line">launchctl load ~<span class="regexp">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>

<p>然后进行MySQL的安全安装，使用以下命令，可以更改root密码、删除匿名用户、关闭远程连接等：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br></pre></td></tr></table></figure>

<p>然后会输出以下内容：</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Enter</span> current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):		<span class="comment">//默认没有密码，直接回车即可</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Change</span> the root password? [Y/n]						<span class="comment">//是否更改root密码，选择是，然后输入并确认密码</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Remove</span> anonymous users? [Y/n]							<span class="comment">//是否删除匿名用户，选择是</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Disallow</span> root login remotely? [Y/n]					<span class="comment">//是否禁止远程登录，选择是</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Remove</span> test database and access to it? [Y/n]			<span class="comment">//是否删除test数据库，选择是</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title class_">Reload</span> privilege tables now? [Y/n]					<span class="comment">//是否重载表格数据，选择是</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试数据库是否安装成功：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>然后输入刚才设置的root密码，将会输出以下内容：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">exit</span>			<span class="regexp">//</span>输入<span class="keyword">exit</span>退出数据库</span><br></pre></td></tr></table></figure>

<h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>首先，为我们的配置文件创建一些文件夹，这些是仿照ubuntu的nginx结构进行建立的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/etc/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/etc/nginx/sites-available</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/etc/nginx/sites-enabled</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/etc/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/etc/nginx/ssl</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www</span><br><span class="line">sudo <span class="built_in">chown</span> :staff /var/www</span><br><span class="line">sudo <span class="built_in">chmod</span> 775 /var/www</span><br></pre></td></tr></table></figure>

<p>然后修改nginx配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>将内容替换为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /usr/local/etc/nginx/logs/<span class="literal">error</span>.log <span class="literal">debug</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>             mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /usr/local/etc/nginx/logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /usr/local/etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后创建php-fpm配置文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/ect/</span>nginx<span class="regexp">/conf.d/</span>php-fpm</span><br></pre></td></tr></table></figure>

<p>输入以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span>      <span class="variable">$uri</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后加入站点配置文件：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/ect/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<p>输入以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>       /var/www/;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /usr/local/etc/nginx/logs/default.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">include</span>   /usr/local/etc/nginx/conf.d/php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> = /info &#123;</span><br><span class="line">        <span class="attribute">allow</span>   <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">deny</span>    all;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /.<span class="literal">info</span>.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">404</span>     /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">403</span>     /<span class="number">403</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx，至此，配置完成，在www下写一个测试文件，进行测试即可</p>
<p><strong>尽情的享受在Mac OS开发PHP的快感吧！</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Mac</tag>
        <tag>Nginx</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora 22上安装jekyll</title>
    <url>/2015/09/18/2015-09-18-install-jekyll-fedora/</url>
    <content><![CDATA[<blockquote>
<p>“jekyll 是一款简单的博客系统，静态网站生成器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>jekyll</code>是一个简单的免费的Blog生成工具，类似<code>WordPress</code>。但是和<code>WordPress</code>又有很大的不同，原因是<code>jekyll</code>只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如<code>Disqus</code>。最关键的是<code>jekyll</code>可以免费部署在<code>Github</code>上，而且可以绑定自己的域名。</p>
<span id="more"></span>

<h3 id="安装最新版ruby"><a href="#安装最新版ruby" class="headerlink" title="安装最新版ruby"></a>安装最新版ruby</h3><p>调用命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> ruby</span><br></pre></td></tr></table></figure>

<p>安装完成后,输入命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ruby -v</span></span><br></pre></td></tr></table></figure>

<p>会有如下类似的显示:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ruby</span> <span class="number">2</span>.<span class="number">2</span>.<span class="number">3</span>p173 (<span class="number">2015</span>-<span class="number">08</span>-<span class="number">18</span> revision <span class="number">51636</span>)<span class="meta"> [x86_64-linux]</span></span><br></pre></td></tr></table></figure>

<p>说明已经成功安装了2.2.3版本的ruby。</p>
<h3 id="安装jkeyll"><a href="#安装jkeyll" class="headerlink" title="安装jkeyll"></a>安装jkeyll</h3><p>安装最新版本的jekyll，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> jekyll</span><br></pre></td></tr></table></figure>

<p>安装过程中可能会报如下错误:</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">Fetching: ffi<span class="string">-1</span>.9.10.gem (100%)</span><br><span class="line">Building native extensions.  This could take a while...</span><br><span class="line"><span class="keyword">ERROR:  </span>Error installing jekyll:</span><br><span class="line">	ERROR: Failed to build gem native extension.</span><br><span class="line"></span><br><span class="line">    /usr/bin/ruby -r ./siteconf20150918<span class="string">-17908</span>-j7rbks.rb extconf.rb</span><br><span class="line">mkmf.rb can&#x27;t find header files for ruby at /usr/share/include/ruby.h</span><br><span class="line"></span><br><span class="line">extconf failed, exit code 1</span><br><span class="line"></span><br><span class="line">Gem files will remain installed in /home/wenzhiquan/.gem/ruby/gems/ffi<span class="string">-1</span>.9.10 for inspection.</span><br><span class="line">Results logged to /home/wenzhiquan/.gem/ruby/extensions/x86_64-linux/ffi<span class="string">-1</span>.9.10/gem_make.out</span><br></pre></td></tr></table></figure>

<p>原因是没有安装gem本地扩展,输入命令<code>sudo dnf install ruby-devel</code>安装dev版本的ruby即可解决问题。如果是报gcc相关的错误,只需要<code>sudo dnf install gcc</code>进行安装即可。</p>
<p>因为我们将会使用Markdown语言作为标记语言，所以还需要安装kramdown，命令如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> kramdown</span><br></pre></td></tr></table></figure>

<p>至此，本机的jekyll运行环境就已经搭建好了。</p>
<p>如果ruby下载过慢，可以修改gem的下载源：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems<span class="meta">.org</span>/  </span><br><span class="line">gem sources -a https://ruby.taobao<span class="meta">.org</span>/  </span><br><span class="line">gem sources -l  </span><br><span class="line">*** CURRENT SOURCES ***  </span><br><span class="line"><span class="symbol">https:</span>//ruby.taobao<span class="meta">.org</span>  </span><br><span class="line"><span class="meta"># 请确保只有 ruby.taobao.org  </span></span><br><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure>

<h3 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h3><p>安装好之后，就可以自己构建一个博客系统，或者也可以到<span class="exturl" data-url="aHR0cDovL2pla3lsbHRoZW1lcy5vcmcv" title="jekyll 模板网站">jekyll模板网站<i class="fa fa-external-link-alt"></i></span> 下载自己喜欢的模板进行修改，然后运行并查看效果，要运行jekyll首先要进入博客的根目录，然后运行命令<code>jekyll server</code>，最后会显示启动信息：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Server</span> address: http:<span class="comment">//127.0.0.1:4000/</span></span><br><span class="line"><span class="built_in">Server</span> running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>

<p>说明程序已经成功启动，在浏览器中输入<code>localhost:4000</code>，就可以查看自己的博客了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>fedora22 配置Nginx,Mysql,PHP</title>
    <url>/2014/12/09/2014-12-09-nginx-mysql-php-fedora/</url>
    <content><![CDATA[<blockquote>
<p>“LNMP开发环境是PHP语言开发网站的主流环境。”</p>
</blockquote>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>nginx在fedora当中是一个默认包，所以直接使用命令行进行安装即可：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> nginx -y</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>然后启动nginx服务：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo service nginx <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure>

<p>然后在你的浏览器当中输入localhost，如果看到以下界面即为安装成功：</p>
<p><img data-src="/uploads/in-post/nginx_sccess.png" alt="nginx success" title="nginx success"></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>mysql在fedora当中叫做MariaDB，但是也可以用安装mysql的命令直接进行安装：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">sudo dnf install mysql mysql-<span class="keyword">server</span> -y</span><br></pre></td></tr></table></figure>

<p>然后启动mysql服务：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo service mariadb <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mariadb.service</span><br></pre></td></tr></table></figure>

<p>然后输入命令：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">sudo netstat -tap <span class="string">| grep mysql</span></span><br></pre></td></tr></table></figure>

<p>如果出现以下代码，说明启动成功：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tcp</span>        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0.0.0</span>:mysql           <span class="number">0.0.0.0</span>:*               LISTEN</span><br><span class="line"> <span class="attribute">5464</span>/mysqld</span><br></pre></td></tr></table></figure>

<p>启动成功后，我们需要给root用户设置一个密码，以防止任何人都可以访问我们的数据库：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysqladmin</span> -u root password <span class="string">&quot;root&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>我们可以让PHP5在nginx中以FastCGI的模式工作。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install</span> php lighttpd-fastcgi php-devel php-fpm php-mysql -y</span><br></pre></td></tr></table></figure>

<p>然后启动php-fpm服务：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo service php-fpm <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>当然，也可以设置他为开机启动：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure>

<p>启动之后，还需要配置nginx使之支持php</p>
<h3 id="配置nginx支持php"><a href="#配置nginx支持php" class="headerlink" title="配置nginx支持php"></a>配置nginx支持php</h3><p>首先备份原先的conf文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf /</span>etc<span class="regexp">/nginx/</span>nginx.conf.bak</span><br></pre></td></tr></table></figure>

<p>然后复制一份配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf.default /</span>etc<span class="regexp">/nginx/</span>nginx.conf</span><br></pre></td></tr></table></figure>

<p>新建两个目录用于分别存放可用和生效的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/nginx/sites-avaliable</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure>
<p>这两个目录是模仿Ubuntu的nginx目录进行创建的，其中sites-analiable文件夹用于存放所有可用的server配置，sites-enabled文件夹用于存放生效的server配置</p>
<p>修改nginx配置文件，添加fastcgi支持</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/nginx/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>将文件修改为以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  /var/log/nginx/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span>        /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件将从conf.d和sites-enabled文件夹中读取所有的server配置，首先需要在sites-avaliable文件夹中建立可用的server配置，然后软链接到sites-enabled文件夹中，这样就可以修改可用配置时，生效配置也会修改，但是删除生效配置时不会对可用配置造成影响：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-avaliable/</span><span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<p>将其修改为以下内容：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost; <span class="comment"># or other domain name you like.</span></span><br><span class="line">    <span class="comment">#include /data/www/.htaccess;</span></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">	root <span class="string">/usr/share/nginx/html</span>;<span class="string">//</span>这里是web项目文件夹的根目录</span><br><span class="line"></span><br><span class="line">	include <span class="string">/etc/nginx/default.d/</span>*<span class="string">.conf</span>;<span class="string">//</span>这个配置文件是安装php和php-fpm时自动生成的，是对nginx针对php的配置</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">        <span class="comment">#try_files $uri $uri/ /index.php?$args;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404              <span class="string">/404.html</span>;</span><br><span class="line">    location = <span class="string">/404.html</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  <span class="string">/50x.html</span>;</span><br><span class="line">    location = <span class="string">/50x.html</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在sites-enabled文件夹中建立可用配置的软链接即可</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-avaliable/</span><span class="keyword">default</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span></span><br></pre></td></tr></table></figure>

<p>具体的其他nginx相关配置可以详见<span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb2NzLw==">nginx官方网站<i class="fa fa-external-link-alt"></i></span></p>
<p>另外，如果php报与时区相关的错误，则需要修改/etc/php.ini文件，在其中<code>[Date]</code>标签下加入一行<code>date.timezone = &#39;Asia/Shanghai&#39;</code>即可</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>每次配置nginx文件后，都需要将其进行重启：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo service nginx restart</span></span><br></pre></td></tr></table></figure>

<p>每次配置php.ini文件后，也需要将其进行重启：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo service php-fpm restart</span></span><br></pre></td></tr></table></figure>

<p>然后建立index.php文件进行测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">vim /usr/share/nginx/html/info.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在浏览器中输入servername进行测试：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：localhost/<span class="meta">info</span>.php</span><br><span class="line">显示phpinfo界面说明解析成功</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Fedora</tag>
        <tag>PHP</tag>
        <tag>Nginx</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式的八种写法</title>
    <url>/2016/03/28/2016-03-28-singleton-eight-type/</url>
    <content><![CDATA[<blockquote>
<p>“单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>单例模式</code>（singleton）是一种常用的设计模式，其定义是单例对象的类只能允许创建一个实例，而可以被多次调用。</p>
<p>单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。</p>
<span id="more"></span>

<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>显然单例模式的要点有三个：</p>
<p>一是某个类只能有一个实例；</p>
<p>二是它必须自行创建这个实例；</p>
<p>三是它必须自行向整个系统提供这个实例。</p>
<p>单例的实现主要是通过以下两个步骤：</p>
<p>1). 将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；</p>
<p>2). 在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，没有对创建实例的方法进行线程保护，会出现两个线程同时调用创建方法的情况，由于它们没有检测到实例的存在，从而同时各自创建了一个实例，这样就会构造出两个不同的实例，从而违反了单例模式中实例唯一的原则。所以需要对多线程状态下的单例模式进行线程保护。</p>
<h3 id="八种写法"><a href="#八种写法" class="headerlink" title="八种写法"></a>八种写法</h3><h4 id="懒汉式（线程不安全）-不可用"><a href="#懒汉式（线程不安全）-不可用" class="headerlink" title="懒汉式（线程不安全）[不可用]"></a>懒汉式（线程不安全）[不可用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法起到了<code>Lazy Loading</code>的效果，即只有在需要调用类时才生成相应的实例。</p>
<p>这种写法只能在单线程下使用。如果在多线程下，一个线程进入了<code>if(singleton == null)</code>判断语句块，还未往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p>
<h4 id="懒汉式（线程安全，同步方法）-不推荐用"><a href="#懒汉式（线程安全，同步方法）-不推荐用" class="headerlink" title="懒汉式（线程安全，同步方法）[不推荐用]"></a>懒汉式（线程安全，同步方法）[不推荐用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> synchronized Singleton <span class="title">getInstance</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决了4.1的线程不安全问题，保证了同时只能有一个对<code>getInstance()</code>方法的调用。</p>
<p>缺点：效率低下，每个线程在执行<code>getInstance()</code>方法时都要进行同步。而事实上只要保证第一次建立实例时同步即可。</p>
<h4 id="懒汉式-线程安全，同步代码块-不可用"><a href="#懒汉式-线程安全，同步代码块-不可用" class="headerlink" title="懒汉式(线程安全，同步代码块)[不可用]"></a>懒汉式(线程安全，同步代码块)[不可用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (Singleton.<span class="keyword">class</span>) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于4.2实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。</p>
<p>但是这种同步并不能起到线程同步的作用。会遇到与4.1中的实现方式相同的问题，假如一个线程进入了<code>if (singleton == null)</code>判断语句块，还未往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>
<h4 id="双重校验锁-可用"><a href="#双重校验锁-可用" class="headerlink" title="双重校验锁[可用]"></a>双重校验锁[可用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (Singleton.<span class="keyword">class</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法是针对4.2实现方式进行的改进，同时又避免了4.3中不能起到线程同步作用的问题。因为在同步代码块中再次进行了<code>if (singleton == null)</code>判断，保证了只会新建一个实例。</p>
<p>注意：因为使用了<code>volatile</code>关键字，所以在JDK1.5之后，双重检查锁定才能够正常达到单例效果。</p>
<h4 id="饿汉式（静态常量）-可用"><a href="#饿汉式（静态常量）-可用" class="headerlink" title="饿汉式（静态常量）[可用]"></a>饿汉式（静态常量）[可用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：写法简单，在类装载时完成实例化。避免了线程同步问题。</p>
<p>缺点：一定会实例化类，没有达到<code>Lazy Loading</code>的效果。如果从未使用过这个实例，会造成内存的浪费。</p>
<h4 id="饿汉式（静态代码块）-可用"><a href="#饿汉式（静态代码块）-可用" class="headerlink" title="饿汉式（静态代码块）[可用]"></a>饿汉式（静态代码块）[可用]</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> static</span> &#123;</span><br><span class="line">       <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span> Singleton getInstance() &#123;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和4.5方法起到相同的作用，优缺点也相同。</p>
<h4 id="静态内部类-推荐用"><a href="#静态内部类-推荐用" class="headerlink" title="静态内部类[推荐用]"></a>静态内部类[推荐用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SingletonInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> final Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式与4.5和4.6的饿汉式写法采用的机制类似，但又不相同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要<code>Singleton</code>类被装载就会实例化，没有起到<code>Lazy Loading</code>的作用，而静态内部类方式在<code>Singleton</code>类被装载时并不会立即实例化，而是在调用<code>getInstance()</code>方法时，才会装载<code>SingletonInstance</code>类，进而完成<code>Singleton</code>的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>优点：线程安全，延迟加载，效率高。</p>
<h4 id="枚举-推荐用"><a href="#枚举-推荐用" class="headerlink" title="枚举[推荐用]"></a>枚举[推荐用]</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span>()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这种方式是<code>Effective Java</code>作者<code>Josh Bloch</code>提倡的方式，借助JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒。</p>
<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><ul>
<li>需要频繁的进行创建和销毁的对象；</li>
<li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li>
<li>工具类对象；</li>
<li>频繁访问数据库或文件的对象。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>Singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配Sunday算法</title>
    <url>/2016/05/28/2016-05-28-string-match-sunday/</url>
    <content><![CDATA[<blockquote>
<p>“Sunday算法是Daniel M.Sunday于1990年提出的字符串模式匹配。”</p>
</blockquote>
<h3 id="Sunday算法简介"><a href="#Sunday算法简介" class="headerlink" title="Sunday算法简介"></a>Sunday算法简介</h3><p>字符串查找算法中，最著名的两个是<code>KMP</code>算法(Knuth-Morris-Pratt)和<code>BM</code>算法(Boyer-Moore)。两个算法在最坏情况下均具有线性的查找时间。但是在实用上，KMP算法并不比c库函数<code>strstr()</code>快多少，而<code>BM</code>算法则往往比<code>KMP</code>算法快上3－5倍(未经验证)。而<code>Sunday</code>算法比<code>BM</code>还要快，而且更易理解。<code>Sunday</code>算法的核心思想是：在匹配过程中，模式串并不被要求一定要按从左向右进行比较还是从右向左进行比较，它在发现不匹配时，算法能跳过尽可能多的字符以进行下一步的匹配，从而提高了匹配效率。</p>
<span id="more"></span>

<h3 id="Sunday算法讲解"><a href="#Sunday算法讲解" class="headerlink" title="Sunday算法讲解"></a>Sunday算法讲解</h3><p>假设现在有两个字符串</p>
<p>主串为 A = “What a nice algorithm”</p>
<p>模式串为 B = “nice”</p>
<p>Sunday算法的大致原理是：</p>
<p>先从左到右逐个字符进行比较，以A和B字符串为例：初始状态i = 0, 指向A的第一个字符，j = 0 指向B的第一个字符，分别为<code>W</code>和<code>n</code>，不匹配，于是要把子串往后移动。</p>
<p>|W|h|a|t| |a| |n|i|c|e| |a|l|g|o|r|i|t|h|m|<br>|-|<br>|i| | | |m|<br>|n|i|c|e|<br>|j|</p>
<p>此时，Sunday算法要求，找到位于A字串中位于B字符串后面的第一个字符，即下图中m所指向的字符<code>空格</code>，在模式字符串B中从后向前查找是否存在<code>空格</code>，如果不存在，则直接将模式串置于m之后。</p>
<p>|W|h|a|t| |a| |n|i|c|e| |a|l|g|o|r|i|t|h|m|<br>|-|<br>|i| | | |m| | | | |<br>| | | | | |n|i|c|e|<br>|j|</p>
<p>然后将i和j置于新位置，继续进行匹配。</p>
<p>|W|h|a|t| |a| |n|i|c|e| |a|l|g|o|r|i|t|h|m|<br>|-|<br>| | | | | |i| | | |m|<br>| | | | | |n|i|c|e|<br>| | | | | |j| |k| |</p>
<p><code>a</code>和<code>n</code>不匹配，需要将子串向后移动，可以看到此时m所在位置的字符<code>c</code>和k所在位置的字符<code>c</code>相同，此时需要将相同的字符对齐，让j再次指向B字符串的头一个字符，相应地，将i指向主串对应的字符<code>n</code>。</p>
<p>|W|h|a|t| |a| |n|i|c|e| |a|l|g|o|r|i|t|h|m|<br>|-|<br>| | | | | | | |i| | | |<br>| | | | | | | |n|i|c|e|<br>| | | | | | | |j| | | |</p>
<p>此时找到匹配的字符串，算法结束。</p>
<h3 id="Sunday算法代码"><a href="#Sunday算法代码" class="headerlink" title="Sunday算法代码"></a>Sunday算法代码</h3><p>java代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="type">int</span> strStr(String <span class="type">text</span>, String pattern) &#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || <span class="type">text</span> == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern.equals(&quot;&quot;)) <span class="keyword">return</span> <span class="number">0</span>;   // 如果模式串为空，认为第<span class="number">0</span>位已经匹配</span><br><span class="line">    <span class="type">int</span> tlen = <span class="type">text</span>.length(), plen = pattern.length();</span><br><span class="line">    <span class="keyword">if</span> (plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k;  // 分别记录<span class="type">text</span>索引，pattern索引和模式串计数索引</span><br><span class="line">    <span class="type">int</span> <span class="keyword">index</span>;  // 记录不匹配时字符（m所在位置）的索引</span><br><span class="line">    <span class="keyword">while</span> (i &lt; tlen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">text</span>.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">index</span> = result + plen;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = plen - <span class="number">1</span>; k &gt;= <span class="number">0</span> &amp;&amp; <span class="type">text</span>.charAt(<span class="keyword">index</span>) != pattern.charAt(k); k<span class="comment">--);</span></span><br><span class="line">        i = result;</span><br><span class="line">        i += plen - k;</span><br><span class="line">        result = i;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result + plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;  // 如果匹配长度超过主串，匹配失败</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &lt;= tlen? result: <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="需要注意的测试用例"><a href="#需要注意的测试用例" class="headerlink" title="需要注意的测试用例"></a>需要注意的测试用例</h3><ul>
<li>“”, “”</li>
<li>null, “a”</li>
<li>“tartarget”, “target”</li>
<li>“source”, “rced”</li>
</ul>
<h3 id="相关题目地址"><a href="#相关题目地址" class="headerlink" title="相关题目地址"></a>相关题目地址</h3><p>Leetcode:<br><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaW1wbGVtZW50LXN0cnN0ci8=">Implement strStr()<i class="fa fa-external-link-alt"></i></span></p>
<p>Lintcode:<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zdHJzdHIv">strStr<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle搭建Spring MVC和MyBatis开发环境</title>
    <url>/2016/04/12/2016-04-12-idea-gradle-ssm/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><span class="exturl" data-url="aHR0cDovL2dyYWRsZS5vcmcv">Gradle<i class="fa fa-external-link-alt"></i></span>是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。<br>它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。</p>
<p><span class="exturl" data-url="aHR0cDovL3NwcmluZy5pby8=">Spring MVC<i class="fa fa-external-link-alt"></i></span>属于SpringFrameWork的后续产品，已经融合<br>在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</p>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cubXliYXRpcy5vcmcv">MyBatis<i class="fa fa-external-link-alt"></i></span>本是apache的一个开源项目iBatis, 2010年这个项目<br>由apache software foundation 迁移到了google code，并且改名为MyBatis 。<br>2013年11月迁移到Github。</p>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.安装mysql，并完成相应数据库的建立</p>
<p>2.安装IDEA完整版</p>
<p>3.下载tomcat或其他服务器</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>打开<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLw==">IDEA<i class="fa fa-external-link-alt"></i></span>软件，选择Create New Project：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/start.png"></p>
<p>选择创建基于gradle的java web项目：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/selectGradle.png"></p>
<p>输入GroupId和ArtifactId：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/groupAndArtifact.png"></p>
<p>选择gradle的来源，可以用自己下载的gradle，也可以使用IDEA内建的gradle版本：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/gradleSource.png"></p>
<p>选择项目的目录：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/projectLocation.png"></p>
<p>点击完成，会生成一个最基本的java web目录，增加文件夹和相应文件，将其目录结构改为以下结构：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/projectDirectory.png"></p>
<p>其中resources目录中的config文件夹中的文件和WEB-INF文件夹下的web.xml，<br>以及build.gradle都是自己进行配置的。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jarDirection&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;driverClass&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">connectionURL</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;connectionURL&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">userId</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;userId&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">password</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetPackage</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;modelPackage&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetProject</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;src_main_java&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetPackage</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;sqlMapperPackage&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetProject</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;src_main_java&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetPackage</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;mapperPackage&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">targetProject</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;src_main_java&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 每一个数据库表都需要建立一个对应的table字段 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;test&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            &lt;generatedKey column=&quot;ID&quot; sqlStatement=&quot;DB2&quot; identity=&quot;true&quot; /&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            &lt;columnOverride column=&quot;DATE_FIELD&quot; property=&quot;startDate&quot; /&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            &lt;ignoreColumn column=&quot;FRED&quot; /&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            &lt;columnOverride column=&quot;LONG_VARCHAR_FIELD&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成的model类所在包</span></span><br><span class="line"><span class="attr">modelPackage</span>=cn.edu.bupt.wen.model</span><br><span class="line"><span class="comment"># 生成的mapper接口类所在包</span></span><br><span class="line"><span class="attr">mapperPackage</span>=cn.edu.bupt.wen.mapper</span><br><span class="line"><span class="comment"># 生成的mapper xml文件所在包</span></span><br><span class="line"><span class="attr">sqlMapperPackage</span>=cn.edu.bupt.wen.mybatis_mapper</span><br></pre></td></tr></table></figure>

<h5 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示</span></span><br><span class="line">jdbc.<span class="attribute">jarDirection</span>=/Users/wenzhiquan/.gradle/caches/modules-2/files-2.1/mysql</span><br><span class="line">/mysql-connector-java/5.1.38/dbbd7cd309ce167ec8367de4e41c63c2c8593cc5</span><br><span class="line">/mysql-connector-java-5.1.38.jar</span><br><span class="line">jdbc.<span class="attribute">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/bookbest</span><br><span class="line">jdbc.<span class="attribute">user</span>=root</span><br><span class="line">jdbc.<span class="attribute">pass</span>=root</span><br></pre></td></tr></table></figure>

<h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.edu.bupt.wen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/statics/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/statics/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="string">&#x27;cn.edu.bupt.wen&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;idea&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">    mybatisGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取config文件夹中对应的配置文件</span></span><br><span class="line">ext&#123;</span><br><span class="line">    <span class="keyword">def</span> prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">file</span>(<span class="string">&quot;src/main/resources/config/mybatis/jdbc-mysql.properties&quot;</span>)</span><br><span class="line">    .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">file</span>(<span class="string">&quot;src/main/resources/config/mybatis/gradle.properties&quot;</span>)</span><br><span class="line">    .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    prop.<span class="keyword">each</span> &#123;</span><br><span class="line">        <span class="keyword">project</span>.extensions.add(<span class="string">&quot;$it.key&quot;</span>,it.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置gradle的依赖项</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.codehaus.groovy:groovy-all:2.3.11&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;jstl:jstl:1.2&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-aop:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-context:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-beans:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-web:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-webmvc:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-tx:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-jdbc:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.springframework:spring-test:4.2.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;mysql:mysql-connector-java:5.1.38&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.mybatis.generator:mybatis-generator-core:1.3.2&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.mybatis:mybatis-spring:1.2.3&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;org.mybatis:mybatis:3.3.0&#x27;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mybatisGenerator <span class="string">&#x27;org.mybatis.generator:mybatis-generator-core:1.3.2&#x27;</span></span><br><span class="line">    mybatisGenerator <span class="string">&#x27;mysql:mysql-connector-java:5.1.38&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, name: <span class="string">&#x27;junit&#x27;</span>, version: <span class="string">&#x27;4.11&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用ant创建一个自动生成MyBatis目录文件的task</span></span><br><span class="line"><span class="keyword">task</span> mybatisGenerate &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;targetProject&#x27;</span>] = projectDir.path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;jarDirection&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;jdbc.jarDirection&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;driverClass&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;jdbc.driverClassName&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;connectionURL&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;jdbc.url&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;userId&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;jdbc.user&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;password&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;jdbc.pass&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;src_main_java&#x27;</span>] = <span class="keyword">sourceSets</span>.main.java.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;src_main_resources&#x27;</span>] = <span class="keyword">sourceSets</span>.main.resources.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;modelPackage&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;modelPackage&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;mapperPackage&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;mapperPackage&#x27;</span>]</span><br><span class="line">    <span class="keyword">ant</span>.properties[<span class="string">&#x27;sqlMapperPackage&#x27;</span>] = <span class="keyword">project</span>[<span class="string">&#x27;sqlMapperPackage&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ant</span>.taskdef(</span><br><span class="line">            name: <span class="string">&#x27;mbgenerator&#x27;</span>,</span><br><span class="line">            classname: <span class="string">&#x27;org.mybatis.generator.ant.GeneratorAntTask&#x27;</span>,</span><br><span class="line">            <span class="keyword">classpath</span>: <span class="keyword">configurations</span>.mybatisGenerator.asPath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ant</span>.mbgenerator(overwrite: <span class="keyword">true</span>,</span><br><span class="line">            configfile: <span class="string">&#x27;src/main/resources/config/mybatis/generatorConfig.xml&#x27;</span>,</span><br><span class="line">            verbose: <span class="keyword">true</span>) &#123;</span><br><span class="line">        propertyset &#123;</span><br><span class="line">            propertyref(name: <span class="string">&#x27;targetProject&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;jarDirection&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;driverClass&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;connectionURL&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;src_main_java&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;src_main_resources&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;modelPackage&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;mapperPackage&#x27;</span>)</span><br><span class="line">            propertyref(name: <span class="string">&#x27;sqlMapperPackage&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下载gradle依赖包"><a href="#下载gradle依赖包" class="headerlink" title="下载gradle依赖包"></a>下载gradle依赖包</h4><p>至此，基本的配置就完成了，接下来就需要运行gradle下载相应的依赖包了，<br>操作如下：打开<code>IDEA &gt; View &gt; Tool Windows &gt; gradle</code>:</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/runGradle.png"></p>
<p>点击图中的按钮，IDEA就会自动下载依赖包了。</p>
<p>下载完成后，目录下的<code>External Libraries</code>文件夹会生成相应的目录：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/gradleDownload.png"></p>
<p>下载完依赖包之后，整体的配置基本上就完成了。</p>
<h3 id="部署到Tomcat服务器"><a href="#部署到Tomcat服务器" class="headerlink" title="部署到Tomcat服务器"></a>部署到Tomcat服务器</h3><p>打开<code>IDEA &gt; Run &gt; Edit Configurations...</code></p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/tomcatConf.png"></p>
<p>点击tomcat server的local选项，点击右上角的<code>configure...</code>，<br>在弹出的对话框中选中下载的Tomcat根目录：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/tomcatHome.png"></p>
<p>然后将配置好的tomcat添加到运行库当中：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/addTomcat.png"></p>
<h3 id="编写代码并运行"><a href="#编写代码并运行" class="headerlink" title="编写代码并运行"></a>编写代码并运行</h3><h4 id="编写controller代码"><a href="#编写controller代码" class="headerlink" title="编写controller代码"></a>编写controller代码</h4><p>在controller文件夹中创建<code>IndexController</code>文件，将代码修改为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.bupt.wen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author wenzhiquan</span></span><br><span class="line"><span class="comment"> * Created on 16/4/12 下午12:25</span></span><br><span class="line"><span class="comment"> * File name: IndexController.java</span></span><br><span class="line"><span class="comment"> * Description: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="string">&quot;/&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String index()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改index-jsp"><a href="#修改index-jsp" class="headerlink" title="修改index.jsp"></a>修改index.jsp</h4><p>将index.jsp文件修改为自己想要的样式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  <span class="title class_">Created</span> by <span class="title class_">IntelliJ</span> <span class="variable constant_">IDEA</span>.</span><br><span class="line">  <span class="title class_">User</span>: wenzhiquan</span><br><span class="line">  <span class="title class_">Date</span>: <span class="number">16</span>/<span class="number">4</span>/<span class="number">12</span></span><br><span class="line">  <span class="title class_">Time</span>: 下午<span class="number">12</span>:<span class="number">23</span></span><br><span class="line">  <span class="title class_">To</span> change <span class="variable language_">this</span> template use <span class="title class_">File</span> | <span class="title class_">Settings</span> | <span class="title class_">File</span> <span class="title class_">Templates</span>.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  Hello World!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h4><p><img data-src="/uploads/in-post/idea_gradle_ssm/runTomcat.png"></p>
<p>点击运行按钮，服务器启动后会自动启动浏览器进入主界面：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/indexJsp.png"></p>
<p>至此，hello world程序已经完成。</p>
<h3 id="自动生成mybatis相关文件"><a href="#自动生成mybatis相关文件" class="headerlink" title="自动生成mybatis相关文件"></a>自动生成mybatis相关文件</h3><p>进入<code>gradle</code>的view，点击创建<code>gradle</code>任务：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/mybatisGen.png"></p>
<p>创建一个mybatisGenerate任务：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/mybatisGenRun.png"></p>
<p>点击OK，会在<code>model</code>，<code>mapper</code>和<code>mybatis_mapper</code>文件夹中自动生成相应的文件：</p>
<p><img data-src="/uploads/in-post/idea_gradle_ssm/afterMybatisGen.png"></p>
<p>至此，Spring MVC + MyBatis的Java Web开发环境配置完成。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（1）—— String</title>
    <url>/2016/05/31/2016-05-31-interview-algorithm-string/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–String相关”</p>
</blockquote>
<span id="more"></span>

<h3 id="Two-Strings-Are-Anagrams-easy"><a href="#Two-Strings-Are-Anagrams-easy" class="headerlink" title="Two Strings Are Anagrams - easy"></a>Two Strings Are Anagrams - easy</h3><p>题目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Write a method <span class="title function_">anagram</span><span class="params">(s,t)</span> to decide <span class="keyword">if</span> two strings are anagrams or not.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="type">Given</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>, t = <span class="string">&quot;dcab&quot;</span>, <span class="keyword">return</span> <span class="literal">true</span>.</span><br><span class="line"><span class="type">Given</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>, t = <span class="string">&quot;ab&quot;</span>, <span class="keyword">return</span> <span class="literal">true</span>.</span><br><span class="line"><span class="type">Given</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>, t = <span class="string">&quot;ac&quot;</span>, <span class="keyword">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title">anagram</span><span class="params">(<span class="type">String</span> s, <span class="type">String</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">length</span>() != t.<span class="built_in">length</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap&lt;Character, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将第一个字符串的每个字母存入哈希表中，也可以用数组进行处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">        <span class="type">char</span> tmp = s.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (hashMap.<span class="built_in">containsKey</span>(tmp)) &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, hashMap.<span class="built_in">get</span>(tmp) <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询第二个字符串中的每个字母是否在哈希表中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> tmp = t.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (!hashMap.<span class="built_in">containsKey</span>(tmp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.<span class="built_in">put</span>(tmp, hashMap.<span class="built_in">get</span>(tmp) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (hashMap.<span class="built_in">get</span>(tmp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS90d28tc3RyaW5ncy1hcmUtYW5hZ3JhbXMv">Two Strings Are Anagrams<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Compare-Strings-easy"><a href="#Compare-Strings-easy" class="headerlink" title="Compare Strings - easy"></a>Compare Strings - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Compare <span class="literal">two</span> strings A <span class="keyword">and</span> B, determine whether A <span class="keyword">contains</span> all <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">characters</span></span><br><span class="line"><span class="keyword">in</span> B.The <span class="keyword">characters</span> <span class="keyword">in</span> <span class="keyword">string</span> A <span class="keyword">and</span> B are all Upper Case letters.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For A = <span class="string">&quot;ABCD&quot;</span>, B = <span class="string">&quot;ACD&quot;</span>, <span class="literal">return</span> <span class="literal">true</span>.</span><br><span class="line">For A = <span class="string">&quot;ABCD&quot;</span>, B = <span class="string">&quot;AABC&quot;</span>, <span class="literal">return</span> <span class="literal">false</span>.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title">compareStrings</span><span class="params">(<span class="type">String</span> s, <span class="type">String</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">        <span class="type">char</span> tmp = s.<span class="built_in">charAt</span>(i);</span><br><span class="line">        arr[tmp - <span class="string">&#x27;A&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> tmp = t.<span class="built_in">charAt</span>(i);</span><br><span class="line">        arr[tmp - <span class="string">&#x27;A&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[tmp - <span class="string">&#x27;A&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vemgtY24vcHJvYmxlbS9jb21wYXJlLXN0cmluZ3Mv">Compare Strings<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="strStr-easy"><a href="#strStr-easy" class="headerlink" title="strStr - easy"></a>strStr - easy</h3><p>题目</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">For <span class="keyword">a</span> given <span class="keyword">source</span> <span class="built_in">string</span> <span class="built_in">and</span> <span class="keyword">a</span> target <span class="built_in">string</span>, you should output the <span class="keyword">first</span></span><br><span class="line"><span class="built_in">index</span>(from <span class="number">0</span>) of target <span class="built_in">string</span> in <span class="keyword">source</span> <span class="built_in">string</span>.</span><br><span class="line"></span><br><span class="line">If target does not exist in <span class="keyword">source</span>, just <span class="keyword">return</span> -<span class="number">1</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If <span class="keyword">source</span> = <span class="string">&quot;source&quot;</span> <span class="built_in">and</span> target = <span class="string">&quot;target&quot;</span>, <span class="keyword">return</span> -<span class="number">1</span>.</span><br><span class="line"></span><br><span class="line">If <span class="keyword">source</span> = <span class="string">&quot;abcdabcdefg&quot;</span> <span class="built_in">and</span> target = <span class="string">&quot;bcd&quot;</span>, <span class="keyword">return</span> <span class="number">1</span>.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span>(<span class="built_in">String</span> <span class="built_in">text</span>, <span class="built_in">String</span> pattern) &#123;</span><br><span class="line">    <span class="comment">//write your code here</span></span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="literal">null</span> || <span class="built_in">text</span> == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern.<span class="property">equals</span>(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tlen = <span class="built_in">text</span>.<span class="property">length</span>(), plen = pattern.<span class="property">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; tlen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">text</span>.<span class="property">charAt</span>(i) == pattern.<span class="property">charAt</span>(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index = result plen;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = plen - <span class="number">1</span>; k &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">text</span>.<span class="property">charAt</span>(index) != pattern.<span class="property">charAt</span>(k); k--);</span><br><span class="line">        i = result;</span><br><span class="line">        i += plen - k;</span><br><span class="line">        result = i;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result plen &gt; tlen) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &lt;= tlen? result: <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zdHJzdHIv">strStr<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Anagrams-medium"><a href="#Anagrams-medium" class="headerlink" title="Anagrams - medium"></a>Anagrams - medium</h3><p>题目</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Given</span> an array of strings, return all groups of strings that are anagrams.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Example</span></span><br><span class="line"><span class="symbol">Given</span> [<span class="string">&quot;lint&quot;</span>, <span class="string">&quot;intl&quot;</span>, <span class="string">&quot;inlt&quot;</span>, <span class="string">&quot;code&quot;</span>], return [<span class="string">&quot;lint&quot;</span>, <span class="string">&quot;inlt&quot;</span>, <span class="string">&quot;intl&quot;</span>].</span><br><span class="line"></span><br><span class="line"><span class="symbol">Given</span> [<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;dc&quot;</span>, <span class="string">&quot;e&quot;</span>], return [<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;dc&quot;</span>].</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="built_in">String</span>&gt; <span class="title function_">anagrams</span>(<span class="built_in">String</span>[] strs) &#123;</span><br><span class="line">    <span class="type">int</span> length = strs.<span class="property">length</span>;</span><br><span class="line">    List&lt;<span class="built_in">String</span>&gt; result = <span class="keyword">new </span><span class="class title_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span> || strs == <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">HashMap</span>&lt;<span class="built_in">String</span>, <span class="built_in">ArrayList</span>&lt;<span class="built_in">String</span>&gt;&gt; <span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> <span class="built_in">str</span>: strs) &#123;</span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">key</span> = <span class="title function_">getKey</span>(<span class="built_in">str</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">map</span>.<span class="property">containsKey</span>(<span class="built_in">key</span>)) &#123;</span><br><span class="line">            <span class="built_in">map</span>.<span class="property">put</span>(<span class="built_in">key</span>, <span class="keyword">new </span><span class="class title_">ArrayList</span>&lt;<span class="built_in">String</span>&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="property">get</span>(<span class="built_in">key</span>).<span class="property">add</span>(<span class="built_in">str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">ArrayList</span>&lt;<span class="built_in">String</span>&gt; tmp: <span class="built_in">map</span>.<span class="property">values</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            result.<span class="property">addAll</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="title function_">getKey</span>(<span class="built_in">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="type">char</span>[] array = <span class="built_in">str</span>.<span class="property">toCharArray</span>();</span><br><span class="line">    Arrays.<span class="property">sort</span>(array);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>.<span class="property">valueOf</span>(array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vemgtY24vcHJvYmxlbS9hbmFncmFtcy8=">Anagrams<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Longest-Common-Substring-medium"><a href="#Longest-Common-Substring-medium" class="headerlink" title="Longest Common Substring - medium"></a>Longest Common Substring - medium</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="literal">two</span> strings, find <span class="keyword">the</span> longest common substring.Return <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">it</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given A = <span class="string">&quot;ABCD&quot;</span>, B = <span class="string">&quot;CBCE&quot;</span>, <span class="literal">return</span> <span class="number">2.</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="type">String</span> A, <span class="type">String</span> B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lengthA = A.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> lengthB = B.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (lengthA &lt; <span class="number">0</span> || lengthB &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="type">int</span>[lengthA][lengthB];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lengthA; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lengthB; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A.<span class="built_in">charAt</span>(i) == B.<span class="built_in">charAt</span>(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> arr[i][j] = arr[i <span class="number">-1</span>][j - <span class="number">1</span>] <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; arr[i][j])</span><br><span class="line">                    max = arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9sb25nZXN0LWNvbW1vbi1zdWJzdHJpbmcv">Longest Common Substring <i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Longest-Common-Prefix-medium"><a href="#Longest-Common-Prefix-medium" class="headerlink" title="Longest Common Prefix - medium"></a>Longest Common Prefix - medium</h3><p>题目</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Given</span> k strings, find the longest <span class="meta">common</span> prefix (LCP).</span><br><span class="line"></span><br><span class="line"><span class="symbol">Example</span></span><br><span class="line"><span class="symbol">For</span> strings <span class="string">&quot;ABCD&quot;</span>, <span class="string">&quot;ABEF&quot;</span> <span class="keyword">and</span> <span class="string">&quot;ACEF&quot;</span>, the LCP is <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">For</span> strings <span class="string">&quot;ABCDEFG&quot;</span>, <span class="string">&quot;ABCEFG&quot;</span> <span class="keyword">and</span> <span class="string">&quot;ABCEFA&quot;</span>, the LCP is <span class="string">&quot;ABC&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">    // write your code here</span><br><span class="line">    <span class="keyword">if</span> (strs.<span class="built_in">length</span> &lt; <span class="number">1</span>) <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="built_in">prefix</span> = strs[<span class="number">0</span>];</span><br><span class="line">    int <span class="built_in">length</span> = <span class="built_in">prefix</span>.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (String str: strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.equals(<span class="string">&quot;&quot;</span>)) <span class="built_in">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.<span class="built_in">length</span>() &lt; <span class="built_in">length</span>) &#123;</span><br><span class="line">            <span class="built_in">length</span> = str.<span class="built_in">length</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!str.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">length</span>).equals(<span class="built_in">prefix</span>)) &#123;</span><br><span class="line">            <span class="built_in">length</span> -= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">prefix</span> = <span class="built_in">prefix</span>.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">length</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">prefix</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9sb25nZXN0LWNvbW1vbi1wcmVmaXgv">Longest Common Prefix<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="String-to-Integer-II-hard"><a href="#String-to-Integer-II-hard" class="headerlink" title="String to Integer II - hard"></a>String to Integer II - hard</h3><p>题目</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Implement <span class="keyword">function</span> atoi <span class="keyword">to</span> convert a string <span class="keyword">to</span> an <span class="type">integer</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> <span class="keyword">no</span> <span class="keyword">valid</span> <span class="keyword">conversion</span> could be performed, a zero <span class="keyword">value</span> <span class="keyword">is</span> returned.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> the correct <span class="keyword">value</span> <span class="keyword">is</span> <span class="keyword">out</span> <span class="keyword">of</span> the range <span class="keyword">of</span> representable <span class="keyword">values</span>, INT_MAX (<span class="number">2147483647</span>) <span class="keyword">or</span> INT_MIN (<span class="number">-2147483648</span>) <span class="keyword">is</span> returned.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">&quot;10&quot; =&gt; <span class="number">10</span></span><br><span class="line">&quot;-1&quot; =&gt; <span class="number">-1</span></span><br><span class="line">&quot;123123123123123&quot; =&gt; <span class="number">2147483647</span></span><br><span class="line">&quot;1.0&quot; =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> atoi(String <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">str</span>.trim();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>.length() &gt; <span class="number">12</span>) <span class="built_in">str</span> = <span class="built_in">str</span>.substring(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span> == <span class="literal">null</span> || <span class="built_in">str</span>.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">char</span> [] arr = <span class="built_in">str</span>.toCharArray();</span><br><span class="line">    <span class="built_in">int</span> symbol = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) symbol = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) symbol = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; arr[<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span>) result += (arr[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">str</span>.length(); i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (arr[i] &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; arr[i] &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">             result *= <span class="number">10</span>;</span><br><span class="line">             result += (arr[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (symbol != <span class="number">0</span>) result *= symbol;</span><br><span class="line">    <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="built_in">int</span>)result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zdHJpbmctdG8taW50ZWdlci1paS8=">String to Integer II<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统常用命令</title>
    <url>/2016/06/05/2016-06-05-linux-frequently-used-order/</url>
    <content><![CDATA[<blockquote>
<p>“Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>UNIX</code>的两个重要分支：<code>System V</code>和<code>BSD UNIX</code>，<code>Linux</code>属于<code>BSD</code>分支。</p>
<p><code>Linux</code>版本号的命名规则：<code>Linux</code>的内核版本由3部分组成。版本号的第二位数字，可以确定Linux内核版本的类型，第二位数字是偶数的为稳定版本。</p>
<p><code>Linux</code>里一切皆文件。</p>
<span id="more"></span>

<h3 id="档案与目录管理"><a href="#档案与目录管理" class="headerlink" title="档案与目录管理"></a>档案与目录管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>　　                   显示文件或目录</span><br><span class="line"></span><br><span class="line">    -l                      列出文件详细信息l(list)</span><br><span class="line"></span><br><span class="line">    -a                      列出当前目录下所有文件及目录，包括隐藏的a(all)</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span>                   创建目录</span><br><span class="line"></span><br><span class="line">    -p                      创建目录，若无父目录，则创建p(parent)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">dir</span>                  切换目录，如果不加<span class="built_in">dir</span>会切换到用户根目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> filename          创建空文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> content &gt; filename 创建带有内容的文件，如果文件存在，会发生覆盖</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> filename            查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> <span class="built_in">source</span> dest          拷贝</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">source</span> dest          移动或重命名</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span>                      删除文件</span><br><span class="line"></span><br><span class="line">    -i                     删除前进行确认</span><br><span class="line"></span><br><span class="line">    -r                     递归删除，可删除子目录及文件</span><br><span class="line"></span><br><span class="line">    -f                     强制删除</span><br><span class="line"></span><br><span class="line">find <span class="built_in">dir</span> -name exp      在文件系统中搜索某文件，content可以是正则表达式</span><br><span class="line"></span><br><span class="line">    | xargs grep content   查找内容为content的文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">wc</span>                      统计文本中行数、字数、字符数</span><br><span class="line"></span><br><span class="line">    -c                      统计文本中byte数量</span><br><span class="line"></span><br><span class="line">    -l                      统计文本中字符行数</span><br><span class="line"></span><br><span class="line">    -m                      统计文本中字符数</span><br><span class="line"></span><br><span class="line">    -w                      统计文本中单词个数</span><br><span class="line"></span><br><span class="line">grep exp filename       在文本文件中查找某个字符串</span><br><span class="line"></span><br><span class="line"><span class="built_in">rmdir</span> <span class="built_in">dir</span>               删除空目录</span><br><span class="line"></span><br><span class="line">tree <span class="built_in">dir</span>                树形结构显示目录，需要安装tree包</span><br><span class="line"></span><br><span class="line"><span class="built_in">pwd</span>                     显示当前目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> <span class="built_in">source</span> dest          创建链接文件</span><br><span class="line"></span><br><span class="line">more, less              分页显示文本文件内容，more在当前页面显示，less会跳转到另一个页面进行显示</span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span>, <span class="built_in">tail</span>              显示文件头、尾内容</span><br><span class="line"></span><br><span class="line">    -n count                显示指定行数</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> perm file         更改文件访问权限</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> username[:groupname] file 更改文件所有者</span><br><span class="line"></span><br><span class="line"><span class="built_in">chgrp</span> groupname file    更改文件所在组</span><br><span class="line"></span><br><span class="line"><span class="built_in">du</span>                      查看目录或文件大小</span><br><span class="line"></span><br><span class="line">    -h                      带有单位显示目录信息</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span>                      查看磁盘使用情况</span><br><span class="line"></span><br><span class="line">    -h                      带有单位显示磁盘信息</span><br></pre></td></tr></table></figure>

<h3 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="系统常用命令"></a>系统常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man order               查看某个命令的帮助文档</span><br><span class="line"></span><br><span class="line"><span class="built_in">stat</span>                    显示指定文件的详细信息，比<span class="built_in">ls</span>更详细</span><br><span class="line"></span><br><span class="line"><span class="built_in">who</span>                     显示在线登陆用户</span><br><span class="line"></span><br><span class="line"><span class="built_in">whoami</span>                  显示当前操作用户</span><br><span class="line"></span><br><span class="line">hostname                显示主机名</span><br><span class="line"></span><br><span class="line"><span class="built_in">uname</span>                   显示系统信息</span><br><span class="line"></span><br><span class="line">top                     动态显示当前耗费资源最多进程信息</span><br><span class="line"></span><br><span class="line">ps                      显示瞬间进程状态 ps -aux</span><br><span class="line"></span><br><span class="line">ifconfig                查看网络情况</span><br><span class="line"></span><br><span class="line">ping                    测试网络连通</span><br><span class="line"></span><br><span class="line">netstat                 显示网络状态信息</span><br><span class="line"></span><br><span class="line">clear                   清屏</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span>                   对命令重命名</span><br><span class="line"></span><br><span class="line"><span class="built_in">unalias</span>                 删除重命名命令</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -sig PID           杀死进程，可以先用ps 或 top命令查看进程的<span class="built_in">id</span>，然后再用<span class="built_in">kill</span>命令杀死进程。</span><br><span class="line"></span><br><span class="line">    -1                      HUP (hang up)</span><br><span class="line"></span><br><span class="line">    -2                      INT (interrupt)</span><br><span class="line"></span><br><span class="line">    -3                      QUIT (quit)</span><br><span class="line"></span><br><span class="line">    -6                      ABRT (abort)</span><br><span class="line"></span><br><span class="line">    -9                      KILL (non-catchable, non-ignorable <span class="built_in">kill</span>)</span><br><span class="line"></span><br><span class="line">    -14                     ALRM (alarm clock)</span><br><span class="line"></span><br><span class="line">    -15                     TERM (software termination signal)</span><br></pre></td></tr></table></figure>

<h3 id="登入与登出（开关机）"><a href="#登入与登出（开关机）" class="headerlink" title="登入与登出（开关机）"></a>登入与登出（开关机）</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">telnet ip               远程登录</span><br><span class="line"></span><br><span class="line">login                   本机登录</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>                    退出登录</span><br><span class="line"></span><br><span class="line">shutdown                关闭计算机</span><br><span class="line"></span><br><span class="line">    -r time                 在某时间关机重启</span><br><span class="line"></span><br><span class="line">    -h time                 在某时间关闭电源</span><br><span class="line"></span><br><span class="line">    now                     立刻关机</span><br><span class="line"></span><br><span class="line">reboot                  重启</span><br></pre></td></tr></table></figure>

<h3 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">compress filename       将文件压缩成.Z格式</span><br><span class="line"></span><br><span class="line">gzip filename           将文件压缩成.gz格式</span><br><span class="line"></span><br><span class="line">bzip2 filename          将文件压缩成.bz2格式</span><br><span class="line"></span><br><span class="line">以上三个命令 -d           将相应的文件解压缩</span><br><span class="line"></span><br><span class="line">tar dest source         打包压缩</span><br><span class="line"></span><br><span class="line"><span class="code">    -c                      归档文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -x                      压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -z                      gzip压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -j                      bzip2压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -v                      显示压缩或解压缩过程 v(view)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -f                      使用档名</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<p>tar -cvf /local/test.tar /local/test          只打包，不压缩</p>
<p>tar -zcvf /local/test.tar.gz /local/test      打包，并用gzip压缩</p>
<p>tar -jcvf /local/test.tar.bz2 /local/test     打包，并用bzip2压缩</p>
<p>tar -xvf /local/test.tar /local/test          只拆包</p>
<p>tar -zxvf /local/test.tar.gz /local/test      用gzip解压缩，并拆包</p>
<p>tar -jxvf /local/test.tar.bz2 /local/test     用bzip2解压缩，并拆包</p>
<h3 id="后台运行与恢复，时间相关"><a href="#后台运行与恢复，时间相关" class="headerlink" title="后台运行与恢复，时间相关"></a>后台运行与恢复，时间相关</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&amp; <span class="keyword">or</span> [Ctrl]+[z]         将命令置于后台运行</span><br><span class="line"></span><br><span class="line">fg                      将后台执行的命令置于前台</span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span>                    获取当前系统时间</span><br><span class="line"></span><br><span class="line">cal [<span class="built_in">month</span>] <span class="built_in">year</span>        获取某年（某月）日历</span><br></pre></td></tr></table></figure>

<h3 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/etc/passwd</span>             存储用户账号的文件</span><br><span class="line"></span><br><span class="line"><span class="string">/etc/group</span>              存储组账号的文件</span><br><span class="line"></span><br><span class="line">useradd username        增加用户，只创建用户名，不创建相应目录</span><br><span class="line"></span><br><span class="line">adduser username        增加用户，并创建相应目录</span><br><span class="line"></span><br><span class="line">userdel username        删除用户</span><br><span class="line"></span><br><span class="line">    -r                  删除用户目录</span><br><span class="line"></span><br><span class="line">groupadd groupname      增加组</span><br><span class="line"></span><br><span class="line">groupdel groupname      删除组</span><br><span class="line"></span><br><span class="line">usermod -g 组名 用户名    修改用户所在组，会覆盖当前组</span><br><span class="line"></span><br><span class="line">usermod -G 组名,组名<span class="string">...</span> 用户名 将用户加入多个组</span><br><span class="line"></span><br><span class="line">passwd username         给user设置密码</span><br><span class="line"></span><br><span class="line"><span class="string">/etc/profile</span>            系统环境变量</span><br><span class="line"></span><br><span class="line"><span class="string">.bashrc</span> or <span class="string">.zshrc</span>       用户环境变量</span><br></pre></td></tr></table></figure>

<p>以上即为日常生活工作中常用到的Linux命令，更加高深的运维命令还需大家自己进行更加深入的了解和学习。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（2）—— Array</title>
    <url>/2016/06/15/2016-06-15-interview-algorithm-array/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Array相关”</p>
</blockquote>
<span id="more"></span>

<h3 id="Remove-Element-easy"><a href="#Remove-Element-easy" class="headerlink" title="Remove Element - easy"></a>Remove Element - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>and a value, remove all occurrences of that value in place<span class="built_in"> and</span></span><br><span class="line"><span class="built_in"></span>return the<span class="built_in"> new </span>length.</span><br><span class="line"></span><br><span class="line">The order of elements can be changed,<span class="built_in"> and </span>the elements after the<span class="built_in"> new </span>length</span><br><span class="line">don&#x27;t matter.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given an<span class="built_in"> array </span>[0,4,4,0,0,2,4,4], value=4</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">return </span>4<span class="built_in"> and </span>front four elements of the<span class="built_in"> array </span>is [0,0,0,2]</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="type">int</span> removeElement(<span class="type">int</span>[] A, <span class="type">int</span> elem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == null || A.<span class="built_in">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == elem) &#123;</span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            A[i - <span class="built_in">step</span>] = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A.<span class="built_in">length</span> - <span class="built_in">step</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9yZW1vdmUtZWxlbWVudC8=">Remove Element<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Subarray-Sum-easy"><a href="#Subarray-Sum-easy" class="headerlink" title="Subarray Sum - easy"></a>Subarray Sum - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">an</span> <span class="keyword">integer</span> array, find <span class="keyword">a</span> subarray where <span class="keyword">the</span> <span class="built_in">sum</span> <span class="keyword">of</span> numbers is <span class="literal">zero</span>. Your</span><br><span class="line">code should <span class="literal">return</span> <span class="keyword">the</span> index <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">number</span> <span class="keyword">and</span> <span class="keyword">the</span> index <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="built_in">number</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [<span class="number">-3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>], <span class="literal">return</span> [<span class="number">0</span>, <span class="number">2</span>] <span class="keyword">or</span> [<span class="number">1</span>, <span class="number">3</span>].</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;<span class="keyword">Integer</span>&gt; subarraySum(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">    <span class="built_in">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;<span class="keyword">Integer</span>&gt; ans = new ArrayList&lt;<span class="keyword">Integer</span>&gt;();</span><br><span class="line">    HashMap&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; map = new HashMap&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">sum</span> += nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(<span class="built_in">sum</span>)) &#123;</span><br><span class="line">            ans.add(map.get(<span class="built_in">sum</span>) <span class="number">1</span>);</span><br><span class="line">            ans.add(i);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.put(<span class="built_in">sum</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zdWJhcnJheS1zdW0v">Subarray Sum<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Remove-Duplicates-from-Sorted-Array-easy"><a href="#Remove-Duplicates-from-Sorted-Array-easy" class="headerlink" title="Remove Duplicates from Sorted Array - easy"></a>Remove Duplicates from Sorted Array - easy</h3><p>题目</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Given a sorted <span class="keyword">array</span>, remove the duplicates <span class="keyword">in</span> place such that each element appear</span><br><span class="line">only once <span class="keyword">and</span> <span class="keyword">return</span> the <span class="keyword">new</span> length.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">not</span> allocate extra space <span class="keyword">for</span> another <span class="keyword">array</span>, you must <span class="keyword">do</span> this <span class="keyword">in</span> place <span class="keyword">with</span></span><br><span class="line"><span class="keyword">constant</span> memory.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given input <span class="keyword">array</span> A = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">Your <span class="keyword">function</span> <span class="title">should</span> <span class="keyword">return</span> <span class="type">length</span> = <span class="number">2</span>, <span class="keyword">and</span> A <span class="keyword">is</span> now [<span class="number">1</span>,<span class="number">2</span>].</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> removeDuplicates(<span class="built_in">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> k = <span class="number">1</span>;  <span class="comment">// k means the max appear times of the duplicates</span></span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">count</span> &lt; k) nums[start++] = nums[i];</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">count</span> = <span class="number">1</span>;</span><br><span class="line">            nums[start++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9yZW1vdmUtZHVwbGljYXRlcy1mcm9tLXNvcnRlZC1hcnJheS8=">Remove Duplicates from Sorted Array<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Merge-Sorted-Array-easy"><a href="#Merge-Sorted-Array-easy" class="headerlink" title="Merge Sorted Array - easy"></a>Merge Sorted Array - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given two sorted integer arrays A<span class="built_in"> and </span>B, merge B into A as one sorted array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">A = [1, 2, 3, empty, empty], B = [4, 5]</span><br><span class="line"></span><br><span class="line">After merge, A will be<span class="built_in"> filled </span>as [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">mergeSortedArray</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> m, <span class="type">int</span>[] B, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;=<span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; B[j]) &#123;</span><br><span class="line">            A[i + j - <span class="number">1</span>] = B[j--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            A[i + j - <span class="number">1</span>] = A[i--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        A[i + j - <span class="number">1</span>] = B[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9tZXJnZS1zb3J0ZWQtYXJyYXkv">Merge Sorted Array<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Product-of-Array-Exclude-Itself-easy"><a href="#Product-of-Array-Exclude-Itself-easy" class="headerlink" title="Product of Array Exclude Itself - easy"></a>Product of Array Exclude Itself - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an integers<span class="built_in"> array </span>A.</span><br><span class="line"></span><br><span class="line">Define B[i] = A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1], calculate B WITHOUT</span><br><span class="line">divide operation.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For A = [1, 2, 3],<span class="built_in"> return </span>[6, 3, 2].</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Long&gt; <span class="title">productExcludeItself</span>(<span class="params">ArrayList&lt;Integer&gt; A</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// write your code</span></span><br><span class="line">    <span class="built_in">int</span> length = A.size();</span><br><span class="line">    ArrayList&lt;Long&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">long</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result.<span class="keyword">add</span>(tmp);</span><br><span class="line">        tmp *= A.<span class="keyword">get</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        Long data = result.<span class="keyword">get</span>(i);</span><br><span class="line">        result.<span class="keyword">set</span>(i, data * tmp);</span><br><span class="line">        tmp *= A.<span class="keyword">get</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9wcm9kdWN0LW9mLWFycmF5LWV4Y2x1ZGUtaXRzZWxmLw==">Product of Array Exclude Itself <i class="fa fa-external-link-alt"></i></span></p>
<h3 id="First-Missing-Positive-medium"><a href="#First-Missing-Positive-medium" class="headerlink" title="First Missing Positive - medium"></a>First Missing Positive - medium</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">an</span> unsorted <span class="keyword">integer</span> array, find <span class="keyword">the</span> <span class="keyword">first</span> missing positive <span class="keyword">integer</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>] <span class="literal">return</span> <span class="number">3</span>,</span><br><span class="line"><span class="keyword">and</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>] <span class="literal">return</span> <span class="number">2.</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="type">int</span> firstMissingPositive(<span class="type">int</span>[] A) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">length</span> = A.<span class="built_in">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="built_in">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &gt;= <span class="number">0</span> &amp;&amp; A[i] &lt; <span class="built_in">length</span> &amp;&amp; A[A[i]] != A[i]) swap(A, i, A[i]);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; <span class="built_in">length</span> &amp;&amp; A[k] == k) k++;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span> == <span class="number">0</span> || k &lt; <span class="built_in">length</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> A[<span class="number">0</span>] == k? k + <span class="number">1</span>: k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="type">void</span> swap(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">    <span class="type">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9maXJzdC1taXNzaW5nLXBvc2l0aXZlLw==">First Missing Positive<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="3Sum-Closest-medium"><a href="#3Sum-Closest-medium" class="headerlink" title="3Sum Closest - medium"></a>3Sum Closest - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>S of n integers, find three integers in S such that the sum is</span><br><span class="line">closest to a given number, target. Return the sum of the three integers.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For example, given<span class="built_in"> array </span>S = [-1 2 1 -4],<span class="built_in"> and </span>target = 1. The sum that is closest</span><br><span class="line">to the target is 2. (-1 2 1 = 2).</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> threeSumClosest(<span class="built_in">int</span>[] numbers, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    // <span class="built_in">write</span> your code here</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (numbers == null || numbers.length &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">min</span> = <span class="keyword">Integer</span>.MAX_VALUE;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(numbers);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; numbers.length - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> j = i <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> k = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">sum</span> = numbers[i] numbers[j] numbers[k];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span> == <span class="keyword">target</span>) <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span> &lt; <span class="keyword">target</span>) <span class="keyword">while</span> (numbers[j] == numbers[++j] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">while</span> (numbers[k] == numbers[--k] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="built_in">int</span> diff = Math.<span class="built_in">abs</span>(<span class="built_in">sum</span> - <span class="keyword">target</span>);</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">                <span class="built_in">min</span> = diff;</span><br><span class="line">                result = <span class="built_in">sum</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (numbers[i] == numbers[++i] &amp;&amp; i &lt; numbers.length - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS8zc3VtLWNsb3Nlc3Qv">3Sum Closest<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="3Sum-medium"><a href="#3Sum-medium" class="headerlink" title="3Sum - medium"></a>3Sum - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>S of n integers, are there elements a, b, c in S such that</span><br><span class="line">a b c = 0? Find all unique triplets in the<span class="built_in"> array </span>which gives the sum of zero.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For example, given<span class="built_in"> array </span>S = &#123;-1 0 1 2 -1 -4&#125;, A solution set is:</span><br><span class="line"></span><br><span class="line">(-1, 0, 1)</span><br><span class="line">(-1, -1, 2)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">ArrayList</span>&lt;<span class="built_in">ArrayList</span>&lt;Integer&gt;&gt; <span class="title function_">threeSum</span>(<span class="type">int</span>[] numbers) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="built_in">ArrayList</span>&lt;<span class="built_in">ArrayList</span>&lt;Integer&gt;&gt; result = <span class="keyword">new </span><span class="class title_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="literal">null</span> || numbers.<span class="property">length</span> &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">    Arrays.<span class="property">sort</span>(numbers);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; numbers.<span class="property">length</span> - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> j = i <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k = numbers.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            <span class="type">int</span> sum = numbers[i] numbers[j] numbers[k];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">ArrayList</span>&lt;Integer&gt; tmp = <span class="keyword">new </span><span class="class title_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                tmp.<span class="property">add</span>(numbers[i]);</span><br><span class="line">                tmp.<span class="property">add</span>(numbers[j]);</span><br><span class="line">                tmp.<span class="property">add</span>(numbers[k]);</span><br><span class="line">                result.<span class="property">add</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) <span class="keyword">while</span> (numbers[j] == numbers[++j] &amp;&amp; j &lt; k);</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= <span class="number">0</span>) <span class="keyword">while</span> (numbers[k] == numbers[--k] &amp;&amp; j &lt; k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (numbers[i] == numbers[++i] &amp;&amp; i &lt; numbers.<span class="property">length</span> - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS8zc3VtLw==">3Sum<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Two-Sum-medium"><a href="#Two-Sum-medium" class="headerlink" title="Two Sum - medium"></a>Two Sum - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>of integers, find two numbers such that they<span class="built_in"> add </span>up to a specific</span><br><span class="line">target number.</span><br><span class="line"></span><br><span class="line">The function twoSum should<span class="built_in"> return </span>indices of the two numbers such that they<span class="built_in"> add</span></span><br><span class="line"><span class="built_in"></span>up to the target, where index1 must be less than index2. Please note that your</span><br><span class="line">returned answers (both index1<span class="built_in"> and </span>index2) are NOT zero-based.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">numbers=[2, 7, 11, 15], target=9</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">return </span>[1, 2]</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] <span class="title function_">twoSum</span>(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="literal">null</span> ||numbers.<span class="property">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">HashMap</span>&lt;Integer, Integer&gt; hashMap = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> [] result = <span class="keyword">new </span><span class="class title_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="built_in">key</span> = target - numbers[i];</span><br><span class="line">        <span class="keyword">if</span> (hashMap.<span class="property">containsKey</span>(<span class="built_in">key</span>)) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = hashMap.<span class="property">get</span>(<span class="built_in">key</span>);</span><br><span class="line">            result[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap.<span class="property">put</span>(numbers[i], i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS90d28tc3VtLw==">Two Sum<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Partition-Array-medium"><a href="#Partition-Array-medium" class="headerlink" title="Partition Array - medium"></a>Partition Array - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given an<span class="built_in"> array </span>nums of integers<span class="built_in"> and </span>an<span class="built_in"> int </span>k, partition the<span class="built_in"> array</span></span><br><span class="line"><span class="built_in"></span>(i.e<span class="built_in"> move </span>the elements in <span class="string">&quot;nums&quot;</span>) such that:</span><br><span class="line"></span><br><span class="line">All elements &lt; k are moved to the left</span><br><span class="line">All elements &gt;= k are moved to the right</span><br><span class="line">Return the partitioning index, i.e the first index i nums[i] &gt;= k.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If nums = [3,2,2,1]<span class="built_in"> and </span>k=2, a valid answer is 1.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partitionArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high &amp;&amp; nums[high] &gt;= k) high--;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high &amp;&amp; nums[low] &lt; k) low++;</span><br><span class="line">        <span class="keyword">if</span>(high &gt;= <span class="number">0</span> &amp;&amp; low &lt; high)&#123;</span><br><span class="line">            swap(nums, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> high + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9wYXJ0aXRpb24tYXJyYXkv">Partition Array<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基础</title>
    <url>/2016/06/28/2016-06-28-regex/</url>
    <content><![CDATA[<blockquote>
<p>“工具和灵感，都是利器。当来自不同的领域，不同类型的创造者的工具和灵感互相碰撞的时候，才会迸发出更多的可能性。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>正则表达式</code>，又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</p>
<p>许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在<code>Perl</code>中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由<code>UNIX</code>中的工具软件（例如<code>sed</code>和<code>grep</code>）普及开的。正则表达式通常缩写成“regex”，单数有 regexp、regex，复数有regexps、regexes、regexen。</p>
<p>在做文字处理或编写程序时，用到查找、替换等功能，使用正则表达式能够简单快捷的完成目标。简单而言，正则表达式通过一些特殊符号的帮助，使用户可以轻松快捷的完成查找、删除、替换等处理程序。例如<code>grep</code>, <code>expr</code>, <code>sed</code> , <code>awk</code>或 <code>vi</code> 中经常会使用到正则表达式，为了充分发挥<code>shell</code>编程的威力,需要精通正则表达式。正规表示法基本上是一种『表示法』， 只要工具程序支持这种表示法，那么该工具程序就可以用来作为正规表示法的字符串处理之用。</p>
<span id="more"></span>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。</p>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p><code>|</code>竖直分隔符表示选择，例如”boy|girl”可以匹配”boy”或者”girl”。</p>
<h4 id="数量限定"><a href="#数量限定" class="headerlink" title="数量限定"></a>数量限定</h4><p>数量限定除了<code>*</code>,还有<code>+</code>加号,<code>?</code>问号,<code>.</code>点号，如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：</p>
<p><code>+</code> 表示前面的字符必须出现至少一次(1次或多次)，例如，”goo+gle”,可以匹配”gooogle”,”goooogle”等；</p>
<p><code>?</code> 表示前面的字符最多出现一次(0次或1次)，例如，”colou?r”,可以匹配”color”或者”colour”;</p>
<p><code>*</code> 星号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，”0*42”可以匹配”42”、”042”、”0042”、”00042”等。</p>
<p><code>.</code> 匹配除“\n”之外的任何单个字符。例如，“0.42”可以匹配”0i42”、”0w42”、”0142”等。</p>
<h4 id="范围和优先级"><a href="#范围和优先级" class="headerlink" title="范围和优先级"></a>范围和优先级</h4><p><code>()</code>圆括号可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。例如，”gr(a|e)y”等价于”gray|grey”，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），”(grand)?father”匹配father和grandfather（这里体验了范围，?将圆括号内容作为一个整体匹配）。</p>
<h4 id="语法（部分）"><a href="#语法（部分）" class="headerlink" title="语法（部分）"></a>语法（部分）</h4><p>正则表达式有多种不同的风格，下面列举一些常用的作为<code>PCRE</code>子集的适用于<code>perl</code>和<code>python</code>编程语言及<code>grep</code>或<code>egrep</code>的正则表达式匹配规则</p>
<blockquote>
<p><code>PCRE</code>（Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式）是一个用<code>C语言</code>编写的正则表达式函数库，由菲利普.海泽(Philip Hazel)编写。<code>PCRE</code>是一个轻量级的函数库，比<code>Boost</code>之类的正则表达式库小得多。<code>PCRE</code>十分易用，同时功能也很强大，性能超过了<code>POSIX</code>正则表达式库和一些经典的正则表达式库。</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>\</code></td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\”匹配“\”而“(”则匹配“(”。</td>
</tr>
<tr>
<td><code>^</code></td>
<td>匹配输入字符串的开始位置。</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串的结束位置。</td>
</tr>
<tr>
<td><code>\&lt;</code></td>
<td>表示词首。 例如<code>\&lt;abc</code>表示以<code>abc</code>为首的词。</td>
</tr>
<tr>
<td><code>\&gt;</code></td>
<td>表示词尾。 例如<code>abc\&gt;</code>表示以<code>abc</code>结尾的词。</td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td><code>*</code></td>
<td>匹配前面的子表达式零次或多次。例如，zo*能匹配“z”、“zo”以及“zoo”。<code>*</code>等价于{0,}。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>当该字符紧跟在任何一个其他限制符（<code>*,+,?，&#123;n&#125;，&#123;n,&#125;，&#123;n,m&#125;</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。</td>
</tr>
<tr>
<td><code>(pattern)</code></td>
<td>匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“(”或“)”。</td>
</tr>
<tr>
<td><code>x｜y</code></td>
<td>匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。</td>
</tr>
<tr>
<td><code>[xyz]</code></td>
<td>字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。</td>
</tr>
<tr>
<td><code>[^xyz]</code></td>
<td>排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td>
</tr>
<tr>
<td><code>[^a-z]</code></td>
<td>排除型的字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
</tbody></table>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>优先级为从上到下从左到右，依次降低：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>\</code></td>
<td>转义符</td>
</tr>
<tr>
<td><code>(), (?:), (?=), []</code></td>
<td>括号和中括号</td>
</tr>
<tr>
<td><code>*、+、?、&#123;n&#125;、&#123;n,&#125;、&#123;n,m&#125;</code></td>
<td>限定符</td>
</tr>
<tr>
<td><code>^、$、\任何元字符</code></td>
<td>定位点和序列</td>
</tr>
<tr>
<td><code>｜</code></td>
<td>选择</td>
</tr>
</tbody></table>
<h4 id="正则表达式思维导图"><a href="#正则表达式思维导图" class="headerlink" title="正则表达式思维导图"></a>正则表达式思维导图</h4><p><img data-src="/uploads/in-post/linux_basic/RegularExpression.png" alt="regex"></p>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（4）—— Math &amp; Bit Manipulation</title>
    <url>/2016/07/04/2016-07-04-interview-algorithm-math-bit/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Math &amp; Bit Manipulation相关”</p>
</blockquote>
<span id="more"></span>

<h3 id="Flip-Bits-easy"><a href="#Flip-Bits-easy" class="headerlink" title="Flip Bits - easy"></a>Flip Bits - easy</h3><p>题目</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">Determine the number of bits required <span class="keyword">to</span> flip <span class="keyword">if</span> you want <span class="keyword">to</span> convert <span class="built_in">integer</span> n</span><br><span class="line"><span class="keyword">to</span> <span class="built_in">integer</span> m.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given</span><br><span class="line">n = <span class="number">31</span> (<span class="string">`1`</span><span class="number">111</span><span class="string">`1`</span>),</span><br><span class="line">m = <span class="number">14</span> (<span class="string">`0`</span><span class="number">111</span><span class="string">`0`</span>),</span><br><span class="line"><span class="keyword">return</span> <span class="number">2.</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> bitSwapRequired(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> c = a ^ b; c != <span class="number">0</span>; c &gt;&gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">count</span> += c &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9mbGlwLWJpdHMv">Flip Bits<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="O-1-Check-Power-of-2-easy"><a href="#O-1-Check-Power-of-2-easy" class="headerlink" title="O(1) Check Power of 2 - easy"></a>O(1) Check Power of 2 - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Using O(1) time to<span class="built_in"> check </span>whether an integer n is a power of 2.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For n=4,<span class="built_in"> return </span>true;</span><br><span class="line"></span><br><span class="line">For n=5,<span class="built_in"> return </span>false;</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title">checkPowerOf2</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (n<span class="number">-1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9vMS1jaGVjay1wb3dlci1vZi0yLw==">O(1) Check Power of 2<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Unique-Paths-easy"><a href="#Unique-Paths-easy" class="headerlink" title="Unique Paths - easy"></a>Unique Paths - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">A robot is located <span class="keyword">at</span> <span class="keyword">the</span> top-left corner <span class="keyword">of</span> <span class="keyword">a</span> m x n grid</span><br><span class="line">(marked <span class="string">&#x27;Start&#x27;</span> <span class="keyword">in</span> <span class="keyword">the</span> diagram below).</span><br><span class="line"></span><br><span class="line">The robot can only move either down <span class="keyword">or</span> <span class="literal">right</span> <span class="keyword">at</span> <span class="keyword">any</span> point <span class="keyword">in</span> <span class="built_in">time</span>. The robot is</span><br><span class="line">trying <span class="built_in">to</span> reach <span class="keyword">the</span> bottom-<span class="literal">right</span> corner <span class="keyword">of</span> <span class="keyword">the</span> grid(marked <span class="string">&#x27;Finish&#x27;</span> <span class="keyword">in</span> <span class="keyword">the</span> diagram</span><br><span class="line">below).</span><br><span class="line"></span><br><span class="line">How many possible unique paths are there?</span><br><span class="line"></span><br><span class="line">Example</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>1,1</th>
<th>1,2</th>
<th>1,3</th>
<th>1,4</th>
<th>1,5</th>
<th>1,6</th>
<th>1,7</th>
</tr>
</thead>
<tbody><tr>
<td>2,1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3,1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3,7</td>
</tr>
</tbody></table>
<p>代码</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="type">Java</span>:</span><br><span class="line"></span><br><span class="line">// space O(n)</span><br><span class="line">public <span class="type">int</span> uniquePaths(<span class="type">int</span> m, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">1</span> || n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] <span class="built_in">result</span> = new <span class="type">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">result</span>[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">result</span>[j] += <span class="built_in">result</span>[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">result</span>[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS91bmlxdWUtcGF0aHMv">Unique Paths<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Trailing-Zeros-easy"><a href="#Trailing-Zeros-easy" class="headerlink" title="Trailing Zeros - easy"></a>Trailing Zeros - easy</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Write <span class="keyword">an</span> algorithm which computes <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> trailing zeros <span class="keyword">in</span> n factorial.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="number">11</span>! = <span class="number">39916800</span>, so <span class="keyword">the</span> out should be <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">long</span> trailingZeros(<span class="built_in">long</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">count</span> += n / <span class="number">5</span>;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS90cmFpbGluZy16ZXJvcy8=">Trailing Zeros<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Update-Bits-medium"><a href="#Update-Bits-medium" class="headerlink" title="Update Bits - medium"></a>Update Bits - medium</h3><p>题目</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Given two <span class="number">32</span>-<span class="keyword">bit </span>numbers, N <span class="keyword">and </span>M, <span class="keyword">and </span>two <span class="keyword">bit </span>positions, i <span class="keyword">and </span><span class="keyword">j. </span>Write a method</span><br><span class="line">to set all <span class="keyword">bits </span><span class="keyword">between </span>i <span class="keyword">and </span><span class="keyword">j </span>in N equal to M (e g , M <span class="keyword">becomes </span>a <span class="keyword">substring </span>of N</span><br><span class="line">located <span class="built_in">at</span> i <span class="keyword">and </span>starting <span class="built_in">at</span> <span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">Clarification</span><br><span class="line">You can assume that the <span class="keyword">bits </span><span class="keyword">j </span>through i have enough space to fit all of M. That is,</span><br><span class="line">if M=<span class="number">10011</span>， you can assume that there are <span class="built_in">at</span> least <span class="number">5</span> <span class="keyword">bits </span><span class="keyword">between </span><span class="keyword">j </span><span class="keyword">and </span>i.</span><br><span class="line">You would not, for example, have <span class="keyword">j=3 </span><span class="keyword">and </span>i=<span class="number">2</span>, <span class="keyword">because </span>M could not fully fit <span class="keyword">between</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bit </span><span class="number">3</span> <span class="keyword">and </span><span class="keyword">bit </span><span class="number">2</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given N=(<span class="number">10000000000</span>)<span class="number">2</span>, M=(<span class="number">10101</span>)<span class="number">2</span>, i=<span class="number">2</span>, <span class="keyword">j=6</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">return N=(<span class="number">10001010100</span>)<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">updateBits</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = ~<span class="number">0</span>; <span class="comment">/* All 1’s */</span></span><br><span class="line">    <span class="comment">// 1’s through position j, then 0’s</span></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">31</span>)</span><br><span class="line">        j = max;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        j = (<span class="number">1</span> &lt;&lt; (j + <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> left = max - j;</span><br><span class="line">    <span class="comment">// 1’s after position i</span></span><br><span class="line">    <span class="type">int</span> right = ((<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 1’s, with 0s between i and j</span></span><br><span class="line">    <span class="type">int</span> mask = left | right;</span><br><span class="line">    <span class="comment">// Clear i through j, then put m in there</span></span><br><span class="line">    <span class="keyword">return</span> ((n &amp; mask) | (m &lt;&lt; i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS91cGRhdGUtYml0cy8=">Update Bits<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Unique-Binary-Search-Trees-medium"><a href="#Unique-Binary-Search-Trees-medium" class="headerlink" title="Unique Binary Search Trees - medium"></a>Unique Binary Search Trees - medium</h3><p>题目</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Given n, how many structurally unique BSTs (binary search trees) that store</span><br><span class="line">values 1...n?</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given n = 3, there are a total of<span class="number"> 5 </span>unique BST&#x27;s.</span><br><span class="line"></span><br><span class="line">1          <span class="number"> 3 </span>  <span class="number"> 3 </span>     <span class="number"> 2 </span>     1</span><br><span class="line"> \         /    /       / \      \</span><br><span class="line"> <span class="number"> 3 </span>    <span class="number"> 2 </span>   <span class="number"> 1 </span>     <span class="number"> 1 </span> <span class="number"> 3 </span>     2</span><br><span class="line"> /      /       \                  \</span><br><span class="line">2    <span class="number"> 1 </span>        <span class="number"> 2 </span>                 3</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            dp[i] += dp[j] * dp[i - j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS91bmlxdWUtYmluYXJ5LXNlYXJjaC10cmVlcy8=">Unique Binary Search Trees<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Fast-Power-medium"><a href="#Fast-Power-medium" class="headerlink" title="Fast Power - medium"></a>Fast Power - medium</h3><p>题目</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Calculate</span> the power(a, n) % b where a, b and n are <span class="literal">all</span> <span class="number">32</span>bit integers.</span><br><span class="line"></span><br><span class="line"><span class="attribute">Example</span></span><br><span class="line"><span class="attribute">For</span> power(<span class="number">2</span>, <span class="number">31</span>) % <span class="number">3</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">For</span> power(<span class="number">100</span>,<span class="number">1000</span>) % <span class="number">1000</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">fastPower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> ret = <span class="built_in">getPower</span>(a, b, n);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">long</span> <span class="title">getPower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % b;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> a % b;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ret = <span class="built_in">getPower</span>(a, b, n/<span class="number">2</span>);</span><br><span class="line">    ret *= ret;</span><br><span class="line">    ret %= b;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        ret = ret * (a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret % b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9mYXN0LXBvd2VyLw==">Fast Power<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Binary-Representation-hard"><a href="#Binary-Representation-hard" class="headerlink" title="Binary Representation - hard"></a>Binary Representation - hard</h3><p>题目</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Given <span class="keyword">a</span> (decimal - e.g. <span class="number">3.72</span>) <span class="built_in">number</span> that is passed <span class="keyword">in</span> <span class="keyword">as</span> <span class="keyword">a</span> <span class="keyword">string</span>, <span class="literal">return</span> <span class="keyword">the</span></span><br><span class="line">binary representation that is passed <span class="keyword">in</span> <span class="keyword">as</span> <span class="keyword">a</span> <span class="keyword">string</span>. If <span class="keyword">the</span> fractional part <span class="keyword">of</span></span><br><span class="line"><span class="keyword">the</span> <span class="built_in">number</span> can <span class="keyword">not</span> be represented accurately <span class="keyword">in</span> binary <span class="keyword">with</span> <span class="keyword">at</span> most <span class="number">32</span> <span class="keyword">characters</span>,</span><br><span class="line"><span class="literal">return</span> ERROR.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For n = <span class="string">&quot;3.72&quot;</span>, <span class="literal">return</span> <span class="string">&quot;ERROR&quot;</span>.</span><br><span class="line"></span><br><span class="line">For n = <span class="string">&quot;3.5&quot;</span>, <span class="literal">return</span> <span class="string">&quot;11.1&quot;</span>.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="title function_">binaryRepresentation</span>(<span class="built_in">String</span> n) &#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span> (n.<span class="property">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">parseInteger</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>[] params = n.<span class="property">split</span>(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="built_in">String</span> flt = <span class="title function_">parseFloat</span>(params[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (flt == <span class="string">&quot;ERROR&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> flt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flt.<span class="property">equals</span>(<span class="string">&quot;0&quot;</span>) || flt.<span class="property">equals</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">parseInteger</span>(params[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseInteger</span>(params[<span class="number">0</span>]) <span class="string">&quot;.&quot;</span> flt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> <span class="title function_">parseInteger</span>(<span class="built_in">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="type">int</span> n = Integer.<span class="property">parseInt</span>(<span class="built_in">str</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>.<span class="property">equals</span>(<span class="string">&quot;&quot;</span>) || <span class="built_in">str</span>.<span class="property">equals</span>(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span> <span class="built_in">binary</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">binary</span> = Integer.<span class="property">toString</span>(n % <span class="number">2</span>) <span class="built_in">binary</span>;</span><br><span class="line">        n = n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binary</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> <span class="title function_">parseFloat</span>(<span class="built_in">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="type">double</span> d = Double.<span class="property">parseDouble</span>(<span class="string">&quot;0.&quot;</span> <span class="built_in">str</span>);</span><br><span class="line">    StringBuilder <span class="built_in">binary</span> = <span class="keyword">new </span><span class="class title_">StringBuilder</span>();</span><br><span class="line">    HashSet&lt;Double&gt; <span class="built_in">set</span> = <span class="keyword">new </span><span class="class title_">HashSet</span>&lt;Double&gt;();</span><br><span class="line">    <span class="keyword">while</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">binary</span>.<span class="property">length</span>() &gt; <span class="number">32</span> || <span class="built_in">set</span>.<span class="property">contains</span>(d)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>.<span class="property">add</span>(d);</span><br><span class="line">        d = d * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">binary</span>.<span class="property">append</span>(<span class="number">1</span>);</span><br><span class="line">            d = d - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">binary</span>.<span class="property">append</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">binary</span>.<span class="property">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9iaW5hcnktcmVwcmVzZW50YXRpb24v">Binary Representation<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>grep模式匹配命令</title>
    <url>/2016/09/06/2016-09-06-grep/</url>
    <content><![CDATA[<blockquote>
<p>“grep是一种强大的文本搜索工具。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>grep</code>全称<code>Globally search a Regular Expression and Print</code>是一种强大的文本搜索工具。它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<p><code>grep</code>的工作方式是在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到屏幕，不影响原文件内容。<code>grep</code>可用于<code>shell</code>脚本，因为<code>grep</code>通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回<code>0</code>，如果搜索不成功，则返回<code>1</code>，如果搜索的文件不存在，则返回<code>2</code>。<code>grep</code>命令中允许指定的串语句是一个规则表达式，这是一种允许使用某些特殊键盘字符的指定字符串的方法，这种方法中的特殊键盘字符可以用于代表其他字符也可以进一步定义模式匹配工作方式。</p>
<span id="more"></span>

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>grep</code>命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。<code>grep</code>支持三种正则表达式引擎，分别用三个参数指定：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-E</code></td>
<td>POSIX扩展正则表达式，<code>ERE</code></td>
</tr>
<tr>
<td><code>-G</code></td>
<td>POSIX基本正则表达式，<code>BRE</code></td>
</tr>
<tr>
<td><code>-P</code></td>
<td>Perl正则表达式，<code>PCRE</code></td>
</tr>
</tbody></table>
<p>在没学过<code>perl</code>语言的大多数情况下你将只会使用到<code>ERE</code>和<code>BRE</code>。</p>
<p>先介绍一下<code>grep</code>命令的常用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-b</code></td>
<td>将二进制文件作为文本来进行匹配</td>
</tr>
<tr>
<td><code>-c</code></td>
<td>统计以模式匹配的数目</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>忽略大小写</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>显示匹配文本所在行的行号</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>反选，输出不匹配行的内容</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>递归匹配查找</td>
</tr>
<tr>
<td><code>-A n</code></td>
<td>n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行</td>
</tr>
<tr>
<td><code>-B n</code></td>
<td>n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行</td>
</tr>
<tr>
<td><code>--color=auto</code></td>
<td>将输出中的匹配项设置为自动颜色显示</td>
</tr>
</tbody></table>
<p>注：在大多数发行版中是默认设置了<code>grep</code>的颜色的，你可以通过参数指定或修改<code>GREP_COLOR</code>环境变量。</p>
<p><img data-src="/uploads/in-post/grep/grep_basic.png" alt="grep basic"></p>
<h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><h4 id="使用基本正则表达式，BRE"><a href="#使用基本正则表达式，BRE" class="headerlink" title="使用基本正则表达式，BRE"></a>使用基本正则表达式，BRE</h4><ul>
<li>位置</li>
</ul>
<p>查找<code>test</code>文件中以<code>wen</code>开头的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;wen&#x27;</span> <span class="built_in">test</span></span><br><span class="line">grep <span class="string">&#x27;^wen&#x27;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_head.png" alt="grep head"></p>
<ul>
<li>数量</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 将匹配以<span class="string">&#x27;h&#x27;</span>开头以<span class="string">&#x27;o&#x27;</span>结尾的所有字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello\nho\nhio&#x27;</span> | <span class="keyword">grep</span> <span class="string">&#x27;h.*o&#x27;</span></span><br><span class="line"># 将匹配以<span class="string">&#x27;h&#x27;</span>开头以<span class="string">&#x27;o&#x27;</span>结尾，中间包含一个任意字符的字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello\nho\nhio&#x27;</span> | <span class="keyword">grep</span> <span class="string">&#x27;h.o&#x27;</span></span><br><span class="line"># 将匹配以<span class="string">&#x27;h&#x27;</span>开头,以任意多个<span class="string">&#x27;o&#x27;</span>结尾的字符串</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello\nho\nhio&#x27;</span> | <span class="keyword">grep</span> <span class="string">&#x27;ho*&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_bre.png" alt="grep bre"></p>
<ul>
<li>选择</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># grep默认是区分大小写的，这里将匹配所有的小写字母</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[a-z]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的数字</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[0-9]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的数字</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[[:digit:]]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的小写字母</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[[:lower:]]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的大写字母</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[[:upper:]]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的字母和数字，包括0-9,a-z,A-Z</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[[:alnum:]]&#x27;</span></span><br><span class="line"><span class="meta"># 将匹配所有的字母</span></span><br><span class="line">echo &#x27;<span class="number">1234</span>\nabcd\nABCD&#x27; <span class="string">| grep &#x27;[[:alpha:]]&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_select.png" alt="grep select"></p>
<p>下面包含完整的特殊符号及说明：</p>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>[:alnum:]</code></td>
<td>代表英文大小写字节及数字，亦即 0-9, A-Z, a-z</td>
</tr>
<tr>
<td><code>[:alpha:]</code></td>
<td>代表任何英文大小写字节，亦即 A-Z, a-z</td>
</tr>
<tr>
<td><code>[:blank:]</code></td>
<td>代表空白键与 [Tab] 按键两者</td>
</tr>
<tr>
<td><code>[:cntrl:]</code></td>
<td>代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等</td>
</tr>
<tr>
<td><code>[:digit:]</code></td>
<td>代表数字而已，亦即 0-9</td>
</tr>
<tr>
<td><code>[:graph:]</code></td>
<td>除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键</td>
</tr>
<tr>
<td><code>[:lower:]</code></td>
<td>代表小写字节，亦即 a-z</td>
</tr>
<tr>
<td><code>[:print:]</code></td>
<td>代表任何可以被列印出来的字节</td>
</tr>
<tr>
<td><code>[:punct:]</code></td>
<td>代表标点符号 (punctuation symbol)，亦即：” ‘ ? ! ; : # $…</td>
</tr>
<tr>
<td><code>[:upper:]</code></td>
<td>代表大写字节，亦即 A-Z</td>
</tr>
<tr>
<td><code>[:space:]</code></td>
<td>任何会产生空白的字节，包括空白键, [Tab], CR 等等</td>
</tr>
<tr>
<td><code>[:xdigit:]</code></td>
<td>代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节</td>
</tr>
</tbody></table>
<p>注意：之所以要使用特殊符号，是因为<code>[a-z]</code>不是在所有情况下都管用，这还与主机当前的语系有关，即设置在<code>LANG</code>环境变量的值，<code>zh_CN.UTF-8</code>的<code>[a-z]</code>即为所有小写字母，其它语系可能是大小写交替的如，<code>a A b B...z Z</code>，<code>[a-z]</code>中就可能包含大写字母。所以在使用<code>[a-z]</code>时请确保当前语系的影响，使用<code>[:lower:]</code>则不会有这个问题。</p>
<ul>
<li>排除字符</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello|aloha&#x27;</span> | <span class="keyword">grep</span> <span class="string">&#x27;[^o]&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_exclude.png" alt="grep exclude"></p>
<p>注意:当<code>^</code>放到中括号内为排除字符，否则表示行首。</p>
<h4 id="使用扩展正则表达式，ERE"><a href="#使用扩展正则表达式，ERE" class="headerlink" title="使用扩展正则表达式，ERE"></a>使用扩展正则表达式，ERE</h4><p>要通过<code>grep</code>使用扩展正则表达式需要加上<code>-E</code>参数，或使用<code>egrep</code>。</p>
<ul>
<li>数量</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 只匹配<span class="string">&quot;zo&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;zero\nzo\nzoo&#x27;</span> | <span class="keyword">grep</span> -E <span class="string">&#x27;zo&#123;1&#125;&#x27;</span></span><br><span class="line"># 匹配以<span class="string">&quot;zo&quot;</span>开头的所有单词</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;zero\nzo\nzoo&#x27;</span> | <span class="keyword">grep</span> -E <span class="string">&#x27;zo&#123;1,&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_e.png" alt="grep e"></p>
<ul>
<li>选择</li>
</ul>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"># 匹配<span class="string">&quot;www.baidu.com&quot;</span>和<span class="string">&quot;www.google.com&quot;</span></span><br><span class="line">echo <span class="symbol">&#x27;www</span>.qq.com\nwww.baidu.com\nwww.google.com&#x27; | grep -<span class="type">E</span> <span class="symbol">&#x27;www</span>\.(baidu|google)\.com&#x27;</span><br><span class="line"># 或者匹配不包含<span class="string">&quot;baidu&quot;</span>的内容</span><br><span class="line">echo <span class="symbol">&#x27;www</span>.qq.com\nwww.baidu.com\nwww.google.com&#x27; | grep -<span class="type">Ev</span> <span class="symbol">&#x27;www</span>\.baidu\.com&#x27;</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/grep/grep_ev.png" alt="grep ev"></p>
<p>注意：因为<code>.</code>号有特殊含义，所以需要转义。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Grep</tag>
      </tags>
  </entry>
  <entry>
    <title>面试必会题目（3）—— Binary Search</title>
    <url>/2016/06/26/2016-06-26-interview-algorithm-binary-search/</url>
    <content><![CDATA[<blockquote>
<p>“面试技术岗位应该掌握的算法题目–Binary Search相关”</p>
</blockquote>
<span id="more"></span>

<h3 id="Sqrt-x-easy"><a href="#Sqrt-x-easy" class="headerlink" title="Sqrt(x) - easy"></a>Sqrt(x) - easy</h3><p>题目</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Implement int <span class="built_in">sqrt</span>(int x).</span><br><span class="line"></span><br><span class="line">Compute and return the square root of x.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">3</span>)</span></span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">4</span>)</span></span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">5</span>)</span></span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sqrt</span><span class="params">(<span class="number">10</span>)</span></span> = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">sqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> v = x;  </span><br><span class="line">    <span class="keyword">while</span>(v * v &gt; x)</span><br><span class="line">        v = (v + (x / v)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zcXJ0eC8=">Sqrt(x)<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Search-Insert-Position-easy"><a href="#Search-Insert-Position-easy" class="headerlink" title="Search Insert Position - easy"></a>Search Insert Position - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given a sorted<span class="built_in"> array </span>and a target value,<span class="built_in"> return </span>the index<span class="built_in"> if </span>the target is found.</span><br><span class="line">If not,<span class="built_in"> return </span>the index where it would be<span class="built_in"> if </span>it were inserted in order.</span><br><span class="line"></span><br><span class="line">You may assume NO duplicates in the array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">[1,3,5,6], 5 → 2</span><br><span class="line"></span><br><span class="line">[1,3,5,6], 2 → 1</span><br><span class="line"></span><br><span class="line">[1,3,5,6], 7 → 4</span><br><span class="line"></span><br><span class="line">[1,3,5,6], 0 → 0</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public int searchInsert(int[] A, int target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="literal">null</span> &amp;&amp; A.<span class="built_in">length</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    int low = <span class="number">0</span>, high = A.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">    int <span class="built_in">mid</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="built_in">mid</span> = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="built_in">mid</span>] == target) <span class="keyword">return</span> <span class="built_in">mid</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[<span class="built_in">mid</span>] &lt; target) low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> high = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> high - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zZWFyY2gtaW5zZXJ0LXBvc2l0aW9uLw==">Search Insert Position<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Search-a-2D-Matrix-easy"><a href="#Search-a-2D-Matrix-easy" class="headerlink" title="Search a 2D Matrix - easy"></a>Search a 2D Matrix - easy</h3><p>题目</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">Write an efficient algorithm that searches <span class="keyword">for</span> a value <span class="keyword">in</span> an m x n <span class="built_in">matrix</span>.</span><br><span class="line"></span><br><span class="line">This <span class="built_in">matrix</span> has the following <span class="built_in">properties</span>:</span><br><span class="line"></span><br><span class="line">Integers <span class="keyword">in</span> each <span class="built_in">row</span> are sorted from left to right.</span><br><span class="line">The <span class="built_in">first</span> <span class="built_in">integer</span> of each <span class="built_in">row</span> <span class="built_in">is</span> greater than the <span class="built_in">last</span> <span class="built_in">integer</span> of the previous <span class="built_in">row</span>.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Consider the following <span class="built_in">matrix</span>:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">    [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</span><br><span class="line">]</span><br><span class="line">Given target = <span class="number">3</span>, <span class="built_in">return</span> <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight stan"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public boolean searchMatrix(<span class="type">int</span>[][] <span class="type">matrix</span>, <span class="type">int</span> <span class="built_in">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="type">matrix</span> == null || <span class="type">matrix</span>.length &lt; <span class="number">1</span>) <span class="keyword">return</span> false;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">row</span> = <span class="type">matrix</span>.length;</span><br><span class="line">    <span class="type">int</span> column = <span class="type">matrix</span>[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">row</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">matrix</span>[i][column] == <span class="built_in">target</span>) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="type">matrix</span>[i][column] &lt; <span class="built_in">target</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> binarySearch(<span class="type">matrix</span>[i], <span class="built_in">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean binarySearch(<span class="type">int</span>[] arr, <span class="type">int</span> <span class="built_in">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == null || arr.length &lt; <span class="number">1</span>) <span class="keyword">return</span> false;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == <span class="built_in">target</span>) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; <span class="built_in">target</span>) low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zZWFyY2gtYS0yZC1tYXRyaXgv">Search a 2D Matrix<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="First-Position-of-Target-easy"><a href="#First-Position-of-Target-easy" class="headerlink" title="First Position of Target - easy"></a>First Position of Target - easy</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">For a given sorted<span class="built_in"> array </span>(ascending order)<span class="built_in"> and </span>a target number, find the first</span><br><span class="line">index of this number in O(log n) time complexity.</span><br><span class="line"></span><br><span class="line">If the target number does<span class="built_in"> not </span>exist in the array,<span class="built_in"> return </span>-1.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">If the<span class="built_in"> array </span>is [1, 2, 3, 3, 4, 5, 10], for given target 3,<span class="built_in"> return </span>2.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public int binarySearch(int[] nums, int target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> &amp;&amp; nums.<span class="built_in">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    int low = <span class="number">0</span>, <span class="built_in">mid</span> = <span class="number">0</span>, high = nums.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="built_in">mid</span> = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="built_in">mid</span>] &gt;= target) high = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[high - <span class="number">1</span>] == target)</span><br><span class="line">        <span class="keyword">return</span> high - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9maXJzdC1wb3NpdGlvbi1vZi10YXJnZXQv">First Position of Target<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Wood-Cut-medium"><a href="#Wood-Cut-medium" class="headerlink" title="Wood Cut - medium"></a>Wood Cut - medium</h3><p>题目</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Given n pieces <span class="keyword">of</span> wood <span class="keyword">with</span> <span class="built_in">length</span> L[i] (<span class="built_in">integer</span> array). Cut them <span class="keyword">into</span> small pieces</span><br><span class="line"><span class="keyword">to</span> guarantee you could have <span class="keyword">equal</span> <span class="keyword">or</span> more than k pieces <span class="keyword">with</span> <span class="keyword">the</span> same <span class="built_in">length</span>.</span><br><span class="line">What <span class="keyword">is</span> <span class="keyword">the</span> longest <span class="built_in">length</span> you can <span class="keyword">get</span> <span class="keyword">from</span> <span class="keyword">the</span> n pieces <span class="keyword">of</span> wood? Given L &amp; k,</span><br><span class="line"><span class="built_in">return</span> <span class="keyword">the</span> maximum <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">the</span> small pieces.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For L=[<span class="number">232</span>, <span class="number">124</span>, <span class="number">456</span>], k=<span class="number">7</span>, <span class="literal">return</span> <span class="number">114.</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> woodCut(<span class="built_in">int</span>[] L, <span class="built_in">int</span> k) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="built_in">max</span> = Math.<span class="built_in">max</span>(<span class="built_in">max</span>, L[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">1</span>, high = <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">while</span> (low <span class="number">1</span> &lt; high) &#123;</span><br><span class="line">        <span class="built_in">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">count</span>(L, mid) &gt;= k) low = mid;</span><br><span class="line">        <span class="keyword">else</span> high = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">count</span>(L, high) &gt;= k) <span class="keyword">return</span> high;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">count</span>(L, low) &gt;= k) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">count</span>(<span class="built_in">int</span>[] L, <span class="built_in">int</span> length) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="built_in">sum</span> += L[i] / length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS93b29kLWN1dC8=">Wood Cut<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Find-Minimum-in-Rotated-Sorted-Array-medium"><a href="#Find-Minimum-in-Rotated-Sorted-Array-medium" class="headerlink" title="Find Minimum in Rotated Sorted Array - medium"></a>Find Minimum in Rotated Sorted Array - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Suppose a sorted<span class="built_in"> array </span>is rotated at some pivot unknown to you beforehand.</span><br><span class="line"></span><br><span class="line">(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</span><br><span class="line"></span><br><span class="line">Find the minimum element.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [4, 5, 6, 7, 0, 1, 2]<span class="built_in"> return </span>0</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line">public <span class="built_in">int</span> findMin(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="keyword">null</span> || <span class="built_in">num</span>.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = <span class="built_in">num</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">num</span>[mid] &gt; <span class="built_in">num</span>[high]) low = mid <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span>[mid] &lt; <span class="built_in">num</span>[high]) high = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span>[high];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9maW5kLW1pbmltdW0taW4tcm90YXRlZC1zb3J0ZWQtYXJyYXkv">Find Minimum in Rotated Sorted Array<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Find-Peak-Element-medium"><a href="#Find-Peak-Element-medium" class="headerlink" title="Find Peak Element - medium"></a>Find Peak Element - medium</h3><p>题目</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">There <span class="keyword">is</span> an integer array which has the following features:</span><br><span class="line"></span><br><span class="line">The numbers in adjacent positions <span class="keyword">are</span> different.</span><br><span class="line">A<span class="comment">[0]</span> &lt; A<span class="comment">[1]</span> &amp;&amp; A<span class="comment">[A.length - 2]</span> &gt; A<span class="comment">[A.length - 1]</span>.</span><br><span class="line">We define a position P <span class="keyword">is</span> a peek if:</span><br><span class="line"></span><br><span class="line">A<span class="comment">[P]</span> &gt; A<span class="comment">[P-1]</span> &amp;&amp; A<span class="comment">[P]</span> &gt; A<span class="comment">[P+1]</span></span><br><span class="line">Find a peak element in this array. Return the index <span class="keyword">of</span> the peak.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given <span class="comment">[1, 2, 1, 3, 4, 5, 7, 6]</span></span><br><span class="line"></span><br><span class="line">Return index 1 (which <span class="keyword">is</span> number 2) or 6 (which <span class="keyword">is</span> number 7)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">findPeak</span><span class="params">(<span class="type">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span>(nums == null || nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">        <span class="type">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; nums[mid<span class="number">-1</span>]) &#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[start] &gt;= nums[end] ? start : end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9maW5kLXBlYWstZWxlbWVudC8=">Find Peak Element<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="First-Bad-Version-medium"><a href="#First-Bad-Version-medium" class="headerlink" title="First Bad Version - medium"></a>First Bad Version - medium</h3><p>题目</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">The code base version <span class="built_in">is</span> an <span class="type">integer</span> start <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> n. One day, someone committed</span><br><span class="line">a bad version <span class="keyword">in</span> the code <span class="keyword">case</span>, so it caused this version <span class="built_in">and</span> the following versions</span><br><span class="line">are all failed <span class="keyword">in</span> the unit tests. Find the first bad version.</span><br><span class="line"></span><br><span class="line">You can <span class="keyword">call</span> isBadVersion <span class="keyword">to</span> help you determine which version <span class="built_in">is</span> the first bad one.</span><br><span class="line">The details <span class="keyword">interface</span> can be found <span class="keyword">in</span> the code<span class="comment">&#x27;s annotation part.</span></span><br><span class="line"></span><br><span class="line">Notice</span><br><span class="line"></span><br><span class="line">Please read the annotation <span class="keyword">in</span> code area <span class="keyword">to</span> <span class="keyword">get</span> the correct way <span class="keyword">to</span> <span class="keyword">call</span></span><br><span class="line">isBadVersion <span class="keyword">in</span> different language. <span class="keyword">For</span> example, Java <span class="built_in">is</span> SVNRepo.isBadVersion(v)</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given n = <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">isBadVersion(<span class="number">3</span>) -&gt; <span class="literal">false</span></span><br><span class="line">isBadVersion(<span class="number">5</span>) -&gt; <span class="literal">true</span></span><br><span class="line">isBadVersion(<span class="number">4</span>) -&gt; <span class="literal">true</span></span><br><span class="line">Here we are <span class="number">100%</span> sure that the <span class="number">4</span>th version <span class="built_in">is</span> the first bad version.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">Ja<span class="symbol">va:</span></span><br><span class="line"></span><br><span class="line">public <span class="built_in">int</span> findFirstBadVersion(<span class="built_in">int</span> <span class="built_in">n</span>) &#123;</span><br><span class="line">    <span class="built_in">if</span> (<span class="built_in">n</span> &lt; <span class="number">1</span>) return <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, <span class="built_in">mid</span> = <span class="number">0</span>, high = <span class="built_in">n</span>;</span><br><span class="line">    while (low &lt; high) &#123;</span><br><span class="line">        <span class="built_in">mid</span> = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">if</span> (SVNRepo.isBadVersion(<span class="built_in">mid</span>)) high = <span class="built_in">mid</span>;</span><br><span class="line">        else low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9maXJzdC1iYWQtdmVyc2lvbi8=">First Bad Version<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Search-in-Rotated-Sorted-Array-medium"><a href="#Search-in-Rotated-Sorted-Array-medium" class="headerlink" title="Search in Rotated Sorted Array - medium"></a>Search in Rotated Sorted Array - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Suppose a sorted<span class="built_in"> array </span>is rotated at some pivot unknown to you beforehand.</span><br><span class="line"></span><br><span class="line">(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</span><br><span class="line"></span><br><span class="line">You are given a target value to search. If found in the<span class="built_in"> array </span>return its index,</span><br><span class="line">otherwise<span class="built_in"> return </span>-1.</span><br><span class="line"></span><br><span class="line">You may assume no duplicate exists in the array.</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">For [4, 5, 1, 2, 3]<span class="built_in"> and </span>target=1,<span class="built_in"> return </span>2.</span><br><span class="line"></span><br><span class="line">For [4, 5, 1, 2, 3]<span class="built_in"> and </span>target=0,<span class="built_in"> return </span>-1.</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> search(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A == null || A.length &lt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>, mid = <span class="number">0</span>, high = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] == <span class="keyword">target</span>) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &lt; A[high]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[high] &gt;= <span class="keyword">target</span> &amp;&amp; <span class="keyword">target</span> &gt;= A[mid]) low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[low] &lt;= <span class="keyword">target</span> &amp;&amp; <span class="keyword">target</span> &lt;= A[mid]) high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[low] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[high] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zZWFyY2gtaW4tcm90YXRlZC1zb3J0ZWQtYXJyYXkv">Search in Rotated Sorted Array<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Search-for-a-Range-medium"><a href="#Search-for-a-Range-medium" class="headerlink" title="Search for a Range - medium"></a>Search for a Range - medium</h3><p>题目</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Given a sorted<span class="built_in"> array </span>of n integers, find the starting<span class="built_in"> and </span>ending position of a</span><br><span class="line">given target value.</span><br><span class="line"></span><br><span class="line">If the target is<span class="built_in"> not </span>found in the array,<span class="built_in"> return </span>[-1, -1].</span><br><span class="line"></span><br><span class="line">Example</span><br><span class="line">Given [5, 7, 7, 8, 8, 10]<span class="built_in"> and </span>target value 8,<span class="built_in"></span></span><br><span class="line"><span class="built_in">return </span>[3, 4].</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">Java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>[] searchRange(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> new <span class="built_in">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> start, <span class="keyword">end</span>, mid;</span><br><span class="line">    <span class="built_in">int</span>[] bound = new <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    // search for left bound</span><br><span class="line">    start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start <span class="number">1</span> &lt; <span class="keyword">end</span>) &#123;</span><br><span class="line">        mid = start + (<span class="keyword">end</span> - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] &gt;= <span class="keyword">target</span>) &#123;</span><br><span class="line">            <span class="keyword">end</span> = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[mid] &lt; <span class="keyword">target</span>) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[start] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[<span class="keyword">end</span>] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = <span class="keyword">end</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = bound[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> bound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // search for right bound</span><br><span class="line">    start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (start <span class="number">1</span> &lt; <span class="keyword">end</span>) &#123;</span><br><span class="line">        mid = start + (<span class="keyword">end</span> - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[mid] &lt;= <span class="keyword">target</span>) &#123;</span><br><span class="line">            start = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">end</span> = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[<span class="keyword">end</span>] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">1</span>] = <span class="keyword">end</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[start] == <span class="keyword">target</span>) &#123;</span><br><span class="line">        bound[<span class="number">1</span>] = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bound[<span class="number">0</span>] = bound[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> bound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>习题地址<br><span class="exturl" data-url="aHR0cDovL3d3dy5saW50Y29kZS5jb20vZW4vcHJvYmxlbS9zZWFyY2gtZm9yLWEtcmFuZ2Uv">Search for a Range<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>sed流编辑器</title>
    <url>/2016/10/15/2016-10-15-sed/</url>
    <content><![CDATA[<blockquote>
<p>“sed是用于过滤和转换文本的流编辑器。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>sed</code>，全称为<code>stream editor</code>，是一个非交互式的编辑器。</p>
<p><code>sed</code>命令是利用<code>script</code>来处理文本文件。<code>sed</code>可依照<code>script</code>的指令，来处理、编辑文本文件。</p>
<p><code>sed</code>主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
<span id="more"></span>

<h3 id="sed基本知识点"><a href="#sed基本知识点" class="headerlink" title="sed基本知识点"></a>sed基本知识点</h3><h4 id="sed工作流程"><a href="#sed工作流程" class="headerlink" title="sed工作流程"></a>sed工作流程</h4><p><img data-src="/uploads/in-post/sed/sed.png" alt="sed"></p>
<p>前提：待操作文本是由至上而下的一行或N行组成。</p>
<ul>
<li><p>基本工作流程：</p>
<ul>
<li>当用<code>sed</code>命令对文本进行处理的时候，<code>sed</code>先读取对象的文本文件的第一行到模式空间中。</li>
<li>当有内容进入<code>模式空间</code>时，<code>sed</code>的编辑命令对模式空间中的内容进行<code>编辑操作</code>（修改，替换，删除，追加，显示等等）</li>
<li><code>模式空间</code>中的内容编辑处理完成之后，<code>sed</code>把此内容通过标准输出（默认为显示器）<code>打印</code>出来，并<code>删除</code>模式空间中的内容。</li>
<li>第一行处理结束。从新读取第二行的内容进行处理，直到最后一行。</li>
</ul>
</li>
</ul>
<p>注意：<code>持有空间</code>可以和<code>模式空间</code>的内容进行互相<code>追加、覆盖</code>等操作。</p>
<h4 id="sed命令执行位置"><a href="#sed命令执行位置" class="headerlink" title="sed命令执行位置"></a>sed命令执行位置</h4><p>几乎所有的<code>sed</code>命令都可以添加<code>[address[,address]]</code>来确定命令执行的位置，完整指令如下：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># !表示匹配成功后是否执行命令</span><br><span class="line">[address[,address]][!]&#123;cmd&#125;</span><br><span class="line"># 删除非第二行至尾行，即删除第一行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;2,$ ! d&quot;</span></span><br><span class="line"># 删除第二行至尾行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;2,$ d&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/address.png" alt="address"></p>
<p>命令执行位置可以使用相对位置：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 匹配a并输出a和其后连续两行，+<span class="number">2</span>表示其后连续两行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f&quot;</span> | sed -n <span class="string">&quot;/a/,+2 p&quot;</span></span><br><span class="line"># 匹配a并输出其后连续两行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f&quot;</span> | sed -n <span class="string">&quot;/a/,+2&#123;//n;p&#125;&quot;</span></span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>b<span class="subst">\n</span>c<span class="subst">\n</span>d<span class="subst">\n</span>e<span class="subst">\n</span>f&quot;</span> | sed -n <span class="string">&quot;/a/,+2&#123;/a/n;p&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/relative_address.png" alt="relative address"></p>
<h4 id="sed命令打包"><a href="#sed命令打包" class="headerlink" title="sed命令打包"></a>sed命令打包</h4><p><code>sed</code>命令可以用大括号进行分组作为嵌套命令，表示外层命令执行完成后，再执行内层命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对3行到第4行，执行命令/I am/d</span></span><br><span class="line"><span class="attribute">sed</span> &#x27;<span class="number">3</span>,<span class="number">4</span> &#123;/I am/d&#125;&#x27; test</span><br><span class="line"><span class="comment"># 对1行到第4行，匹配/I am/成功后，再匹配/dog/，成功后执行d命令</span></span><br><span class="line"><span class="attribute">sed</span> &#x27;<span class="number">3</span>,<span class="number">6</span> &#123;/I am/&#123;/dog/d&#125;&#125;&#x27; test</span><br><span class="line"><span class="comment"># 从第一行到最后一行，如果匹配到空格，则去除空格</span></span><br><span class="line"><span class="attribute">sed</span> &#x27;<span class="number">1</span>,<span class="variable">$&#123;s/ *//g&#125;</span>&#x27; test</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/group.png" alt="group"></p>
<h4 id="持有空间"><a href="#持有空间" class="headerlink" title="持有空间"></a>持有空间</h4><p>持有空间（Hold Space），可以存放模式空间中的内容，也可以取出内容追加或覆盖到模式空间中。</p>
<p>常用命令参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>g</code></td>
<td>将<code>hold space</code>中的内容拷贝到<code>pattern space</code>中，原来<code>pattern space</code>里的内容清除</td>
</tr>
<tr>
<td><code>G</code></td>
<td>将<code>hold space</code>中的内容<code>append</code>到<code>pattern space</code>后</td>
</tr>
<tr>
<td><code>h</code></td>
<td>将<code>pattern space</code>中的内容拷贝到<code>hold space</code>中，原来的<code>hold space</code>里的内容被清除</td>
</tr>
<tr>
<td><code>H</code></td>
<td>将<code>pattern space</code>中的内容<code>append</code>到<code>hold space</code>后</td>
</tr>
<tr>
<td><code>x</code></td>
<td>交换<code>pattern space</code>和<code>hold space</code>的内容</td>
</tr>
</tbody></table>
<p>示例如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 将模式空间内容追加到持有空间中</span></span><br><span class="line">echo <span class="string">&quot;one\ntwo\nthree&quot;</span> <span class="string">| sed &quot;</span>H;g<span class="string">&quot;</span></span><br><span class="line"><span class="meta"># 若只想看到结果，使用以下命令</span></span><br><span class="line">echo <span class="string">&quot;one\ntwo\nthree&quot;</span> <span class="string">| sed -n &quot;</span>H;p<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/hold1.png" alt="hold1"></p>
<p>具体过程如下：</p>
<p><img data-src="/uploads/in-post/sed/hold1_proc.jpg" alt="hold1 proc"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件进行反序</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;one\ntwo\nthree&quot;</span> | sed <span class="string">&#x27;1!G;h;$!d&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/hold2.png" alt="hold2"></p>
<p>其中的 ‘1!G;h;$!d’ 可拆解为三个命令：</p>
<ul>
<li>1!G —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li>
<li>h —— 每一行都执行h命令，将pattern space中的内容拷贝到hold space中</li>
<li>$!d —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li>
</ul>
<p>具体过程如下：</p>
<p><img data-src="/uploads/in-post/sed/hold2_proc.jpg" alt="hold2 proc"></p>
<h3 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h3><h4 id="常用参数介绍"><a href="#常用参数介绍" class="headerlink" title="常用参数介绍"></a>常用参数介绍</h4><p><code>sed</code>命令的语法为：<code>sed [参数]... [执行命令] [输入文件]...</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;1s/Hello/World/&quot;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/basic.png" alt="basic"></p>
<p>常用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-n</code></td>
<td>安静模式，只打印受影响的行，默认打印输入数据的全部内容</td>
</tr>
<tr>
<td><code>-e script</code></td>
<td>用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数</td>
</tr>
<tr>
<td><code>-f filename</code></td>
<td>指定执行filename文件中的命令</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>使用扩展正则表达式，默认为标准正则表达式</td>
</tr>
<tr>
<td><code>-i</code></td>
<td>将直接修改输入文件内容，而不是打印到标准输出设备</td>
</tr>
</tbody></table>
<h4 id="sed编辑器的执行命令"><a href="#sed编辑器的执行命令" class="headerlink" title="sed编辑器的执行命令"></a>sed编辑器的执行命令</h4><p>sed的执行命令格式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[n1]</span><span class="selector-attr">[,n2]</span>command</span><br><span class="line"><span class="selector-attr">[n1]</span><span class="selector-attr">[~step]</span>command</span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具体命令如下：</span></span><br><span class="line"><span class="attribute">sed</span> -n &#x27;<span class="number">2</span>,<span class="number">5</span>p&#x27; test # 打印<span class="number">2</span>到<span class="number">5</span>行</span><br><span class="line"><span class="attribute">sed</span> -n &#x27;<span class="number">1</span>~<span class="number">2</span>p&#x27; test # 打印奇数行</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/n.png" alt="n"></p>
<p>其中<code>n1</code>，<code>n2</code>表示输入内容的行号，它们之间为,逗号则表示从<code>n1</code>到<code>n2</code>行，如果为<code>～</code>波浪号则表示从<code>n1</code>开始以<code>step</code>为步进的所有行；<code>command</code>为执行动作，下面为一些常用动作指令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>s</code></td>
<td>行内替换</td>
</tr>
<tr>
<td><code>c</code></td>
<td>整行替换</td>
</tr>
<tr>
<td><code>a</code></td>
<td>插入到指定行的后面</td>
</tr>
<tr>
<td><code>i</code></td>
<td>插入到指定行的前面</td>
</tr>
<tr>
<td><code>p</code></td>
<td>打印指定行，通常与-n参数配合使用</td>
</tr>
<tr>
<td><code>d</code></td>
<td>删除指定行</td>
</tr>
<tr>
<td><code>g</code></td>
<td>一行上替换所有匹配</td>
</tr>
</tbody></table>
<h4 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h4><ul>
<li>打印指定行</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sed</span> -n &#x27;<span class="number">1</span>,<span class="number">6</span>p&#x27; test # 打印<span class="number">1</span>到<span class="number">6</span>行</span><br><span class="line"><span class="attribute">sed</span> -n &#x27;<span class="number">2</span>~<span class="number">2</span>p&#x27; test # 打印偶数行</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/n2.png" alt="n2"></p>
<ul>
<li>行内替换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将所有wen替换为hi</span></span><br><span class="line">sed -n <span class="string">&quot;s/wen/hi/gp&quot;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/replace.png" alt="replace"></p>
<ul>
<li>行间替换</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将第五行替换为wonderful</span></span><br><span class="line">sed <span class="string">&quot;5c\wonderful&quot;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/line.png" alt="line"></p>
<ul>
<li>行首插入字符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每行头部插入#+空格</span></span><br><span class="line">sed <span class="string">&#x27;s/^/# /g&#x27;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/head.png" alt="head"></p>
<ul>
<li>行尾插入字符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每行行末插入空格+!</span></span><br><span class="line">sed <span class="string">&#x27;s/$/ !/g&#x27;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/tail.png" alt="tail"></p>
<ul>
<li>行间插入字符</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 在第一行之前插入hello</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;1 i hello&quot;</span></span><br><span class="line"># 在第一行之后插入hello</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;1 a hello&quot;</span></span><br><span class="line"># 在匹配到的aaa之后插入hello</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;/aaa/a hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/aandi.png" alt="aandi"></p>
<ul>
<li>指定替换内容</li>
</ul>
<p>将数字<code>n</code>放在脚本头部表示匹配第<code>n</code>行：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 替换第<span class="number">3</span>行的所有a</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;3s/a/A/g&quot;</span></span><br><span class="line"># 替换第<span class="number">3</span>到<span class="number">6</span>行的所有a</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;3,6s/a/A/g&quot;</span></span><br><span class="line"># 替换奇数行的所有a</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;1~2s/a/A/g&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/number_head.png" alt="number head"></p>
<p>将数字<code>n</code>放在脚本尾部表示匹配每行的第<code>n</code>个字符：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 替换每一行的第<span class="number">2</span>个s</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;s/a/A/1&quot;</span></span><br><span class="line"># 替换每一行的第<span class="number">3</span>个s</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;s/a/A/3&quot;</span></span><br><span class="line"># 替换每一行的第<span class="number">2</span>个之后s</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa<span class="subst">\n</span>&quot;</span> | sed <span class="string">&quot;s/a/A/g2&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/number_tail.png" alt="number tail"></p>
<ul>
<li>多个匹配</li>
</ul>
<p>如果需要一次性匹配多个模式，可使用命令：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa&quot;</span> | sed <span class="string">&quot;1,3 s/a/A/g; 4,$ s/a/B/g&quot;</span></span><br><span class="line"># 上面的命令等价于：</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa&quot;</span> | sed -e <span class="string">&quot;1,3 s/a/A/g&quot;</span> -e <span class="string">&quot;4,$ s/a/B/g&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/multi.png" alt="multi"></p>
<p>注意： <code>4,$ s/A/B/g</code>两个命令之间是有空格的。</p>
<ul>
<li>使用匹配的变量</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 每个aaa都用中括号圈起来</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa&quot;</span> | sed <span class="string">&quot;s/aaa/[&amp;]/g&quot;</span></span><br><span class="line"># 复制每一个a</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aaa<span class="subst">\n</span>aaaa<span class="subst">\n</span>aaaaa<span class="subst">\n</span>aaaaaa&quot;</span> | sed <span class="string">&quot;s/a/&amp;&amp;/g&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/variable.png" alt="variable"></p>
<ul>
<li>圆括号匹配</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"># 匹配到aaa<span class="operator">+</span>任意字符串则将整个字符串划分为aa:a<span class="operator">+</span>任意字符串，\<span class="number">1</span>表示匹配第一个括号的内容，\<span class="number">2</span>同理</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> <span class="operator">|</span> sed <span class="string">&quot;s/<span class="subst">\(aa\)</span><span class="subst">\(a<span class="operator">.*</span>\)</span>/\1:\2/g&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/bracket.png" alt="bracket"></p>
<ul>
<li>删除行</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 删除匹配aa的行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;/aa/d&quot;</span></span><br><span class="line"># 删除第二行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;2d&quot;</span></span><br><span class="line"># 删除第二行到尾行</span><br><span class="line">echo <span class="string">&quot;a<span class="subst">\n</span>aa<span class="subst">\n</span>aab<span class="subst">\n</span>aaab<span class="subst">\n</span>aaabb<span class="subst">\n</span>aaabbb&quot;</span> | sed <span class="string">&quot;2,$ d&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/sed/delete.png" alt="delete"></p>
<p><code>sed</code>的命令还有很多丰富的使用方法，可以参见<span class="exturl" data-url="aHR0cDovL3d3dy5nbnUub3JnL3NvZnR3YXJlL3NlZC9tYW51YWwvc2VkLmh0bWw=">官方手册<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sed</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle创建超市管理系统（壹）-- 环境配置</title>
    <url>/2017/01/01/2017-01-01-idea-gradle-tssm-supermarket-manage-system-1/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。本项目基于Spring，Spring MVC和MyBatis进行开发，模板引擎为Thymeleaf。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ncmFkbGUub3JnLw==">Gradle<i class="fa fa-external-link-alt"></i></span>是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，抛弃了基于XML的各种繁琐配置。</p>
<p><span class="exturl" data-url="aHR0cDovL3NwcmluZy5pby8=">Spring MVC<i class="fa fa-external-link-alt"></i></span>属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web应用程序的全功能<code>MVC</code>模块。</p>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cubXliYXRpcy5vcmcv">MyBatis<i class="fa fa-external-link-alt"></i></span>本是apache的一个开源项目<code>iBatis</code>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为<code>MyBatis</code> 。2013年11月迁移到<code>Github</code>。</p>
<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.安装<code>mysql</code>，并完成相应数据库的建立</p>
<p>2.安装<code>IDEA</code>完整版或社区版</p>
<p>3.下载tomcat或其他服务器</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>打开<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLw==">IDEA<i class="fa fa-external-link-alt"></i></span>软件，选择Create New Project：</p>
<p><img data-src="/uploads/in-post/sms/start.png"></p>
<p>选择创建基于gradle的java web项目：</p>
<p><img data-src="/uploads/in-post/sms/selectGradle.png"></p>
<p>输入GroupId和ArtifactId：</p>
<p><img data-src="/uploads/in-post/sms/groupAndArtifact.png"></p>
<p>选择gradle的来源，可以用自己下载的gradle，也可以使用IDEA内建的gradle版本：</p>
<p><img data-src="/uploads/in-post/sms/gradleSource.png"></p>
<p>选择项目的目录：</p>
<p><img data-src="/uploads/in-post/sms/projectLocation.png"></p>
<p>点击完成，会生成一个最基本的java web目录，增加文件夹和相应文件，将其目录结构改为以下结构：</p>
<p><img data-src="/uploads/in-post/sms/projectDirectory.png"></p>
<p>其中resources目录中的config文件夹中的文件和WEB-INF文件夹下的web.xml，<br>以及build.gradle都是自己进行配置的。</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.edu.bupt.wen&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态文件访问权限配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;statics/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/statics/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mybatis.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-thymeleaf.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示</span></span><br><span class="line">jdbc.<span class="attribute">jarDirection</span>=/Users/wenzhiquan/.gradle/caches/modules-2/files-2.1/mysql\</span><br><span class="line">/mysql-connector-java/5.1.40/ef2a2ceab1735eaaae0b5d1cccf574fb7c6e1c52/\</span><br><span class="line">mysql-connector-java-5.1.40.jar</span><br><span class="line">jdbc.<span class="attribute">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/nowcoder?\</span><br><span class="line"><span class="attribute">useUnicode</span>=<span class="literal">true</span>&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">jdbc.<span class="attribute">username</span>=root</span><br><span class="line">jdbc.<span class="attribute">password</span>=root</span><br></pre></td></tr></table></figure>

<h5 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 引入外部数据源配置信息 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:config/mybatis/jdbc-mysql.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.driverClassName&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 配置Session工厂 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 加载mybatis-config.xml文件 &amp;ndash;&amp;gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--&lt;property name=&quot;configLocation&quot; value=&quot;classpath:config/mybatis/mybatis-config.xml&quot;&gt;&lt;/property&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.edu.bupt.wen.model&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;classpath:sqlMapper/*.xml&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 自动扫描所有的Mapper接口与文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.edu.bupt.wen.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实体类,简称 -设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.edu.bupt.wen.model.User&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实体接口映射资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;sqlMapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：在spring-mybatis.xml文件中配置session工厂时，如果配置了configLocation这一个property的话，需要指定mybatis配置文件的位置，如果配置了typeAliasesPackage和mapperLocations这两个property的话，就不再需要配置configLocation这个property了。</p>
<h5 id="spring-thymeleaf-xml"><a href="#spring-thymeleaf-xml" class="headerlink" title="spring-thymeleaf.xml"></a>spring-thymeleaf.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf View Resolver - implementation of Spring&#x27;s ViewResolver interface --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateEngine&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 解决中文乱码问题 template resolver中需要同时加上这个参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf Template Engine (Spring4-specific version) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolvers&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;templateResolver&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Thymeleaf Template Resolver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决中文乱码问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="string">&#x27;cn.edu.bupt.wen&#x27;</span></span><br><span class="line"><span class="keyword">version</span> <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;idea&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter &#123;</span><br><span class="line">            url &quot;http://jcenter.bintray.com/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter &#123;</span><br><span class="line">            url &quot;http://jcenter.bintray.com/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置gradle的依赖项</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.codehaus.groovy&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;groovy-all&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;2.4.7&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;javax.servlet&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;jstl&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.2&#x27;</span></span><br><span class="line">    // Slf4j</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.slf4j&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;slf4j-api&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.7.22&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.slf4j&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;slf4j-simple&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.7.22&#x27;</span></span><br><span class="line">    //fastJson</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;com.alibaba&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;fastjson&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.2.23&#x27;</span></span><br><span class="line">    //apache common lang</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.apache.commons&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;commons-lang3&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line">    //java servlet api</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;javax.servlet&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;javax.servlet-api&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.0.0-b01&#x27;</span></span><br><span class="line">    // thymeleaf</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.thymeleaf&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;thymeleaf&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;3.0.2.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.thymeleaf&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;thymeleaf-spring4&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;3.0.2.RELEASE&#x27;</span></span><br><span class="line">    // Aspectj</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.aspectj&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;aspectjrt&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.8.9&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.aspectj&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;aspectjweaver&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.8.9&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.aspectj&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;aspectjtools&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.8.9&#x27;</span></span><br><span class="line">    // Spring</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-core&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-web&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-webmvc&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-jdbc&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-aop&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-context&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-beans&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.springframework&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;spring-test&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    // MyBatis</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;mybatis&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;3.4.1&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;mybatis-spring&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;1.3.0&#x27;</span></span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;mysql&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;mysql-connector-java&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;5.1.40&#x27;</span></span><br><span class="line">    // junit</span><br><span class="line">    compile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;junit&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">&#x27;junit&#x27;</span>, <span class="type">name</span>: <span class="string">&#x27;junit&#x27;</span>, <span class="keyword">version</span>: <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下载gradle依赖包"><a href="#下载gradle依赖包" class="headerlink" title="下载gradle依赖包"></a>下载gradle依赖包</h4><p>至此，基本的配置就完成了，接下来就需要运行gradle下载相应的依赖包了，<br>操作如下：打开<code>IDEA &gt; View &gt; Tool Windows &gt; gradle</code>:</p>
<p><img data-src="/uploads/in-post/sms/runGradle.png"></p>
<p>点击图中的按钮，IDEA就会自动下载依赖包了。</p>
<p>下载完成后，目录下的<code>External Libraries</code>文件夹会生成相应的目录：</p>
<p><img data-src="/uploads/in-post/sms/gradleDownload.png"></p>
<p>下载完依赖包之后，整体的配置基本上就完成了。</p>
<h3 id="部署到Tomcat服务器"><a href="#部署到Tomcat服务器" class="headerlink" title="部署到Tomcat服务器"></a>部署到Tomcat服务器</h3><p>打开<code>IDEA &gt; Run &gt; Edit Configurations...</code></p>
<p><img data-src="/uploads/in-post/sms/tomcatConf.png"></p>
<p>点击tomcat server的local选项，点击右上角的<code>configure...</code>，<br>在弹出的对话框中选中下载的Tomcat根目录：</p>
<p><img data-src="/uploads/in-post/sms/tomcatHome.png"></p>
<p>然后将配置好的tomcat添加到运行库当中：</p>
<p><img data-src="/uploads/in-post/sms/addTomcat.png"></p>
<p>然后在Deployment选项卡中添加项目即可：</p>
<p><img data-src="/uploads/in-post/sms/tomcatDeployment.png"></p>
<h3 id="编写代码并运行"><a href="#编写代码并运行" class="headerlink" title="编写代码并运行"></a>编写代码并运行</h3><h4 id="编写controller代码"><a href="#编写controller代码" class="headerlink" title="编写controller代码"></a>编写controller代码</h4><p>在controller文件夹中创建<code>IndexController</code>文件，将代码修改为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.bupt.wen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMethod;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author wenzhiquan</span></span><br><span class="line"><span class="comment"> * Created on 16/4/12 下午12:25</span></span><br><span class="line"><span class="comment"> * File name: IndexController.java</span></span><br><span class="line"><span class="comment"> * Description: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(path = &#123;<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/index&quot;</span>&#125;, method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String index()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改index-html"><a href="#修改index-html" class="headerlink" title="修改index.html"></a>修改index.html</h4><p>将index.html文件修改为自己想要的样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="运行Tomcat"><a href="#运行Tomcat" class="headerlink" title="运行Tomcat"></a>运行Tomcat</h4><p><img data-src="/uploads/in-post/sms/runTomcat.png"></p>
<p>点击运行按钮，服务器启动后会自动启动浏览器进入主界面：</p>
<p><img data-src="/uploads/in-post/sms/index.png"></p>
<p>至此，<code>hello world</code>程序已经完成。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础学习</title>
    <url>/2016/06/20/2016-06-20-linux-basic/</url>
    <content><![CDATA[<blockquote>
<p>“Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。”</p>
</blockquote>
<h3 id="Linux系统简介"><a href="#Linux系统简介" class="headerlink" title="Linux系统简介"></a>Linux系统简介</h3><p>Linux是一个开源的免费操作系统，如下图所示，Linux就是<code>内核</code>与<code>系统调用</code>接口那两层。</p>
<p><img data-src="/uploads/in-post/linux_basic/os_level.png" alt="操作系统的角色"></p>
<p>而平常我们使用的应用程序一般都是运行在操作系统之上的，如qq，浏览器，文本编辑器等。</p>
<span id="more"></span>

<h4 id="Linux之前Unix的历史"><a href="#Linux之前Unix的历史" class="headerlink" title="Linux之前Unix的历史"></a>Linux之前Unix的历史</h4><p>早在Linux出现之前20年，就已经有一个相当稳定而成熟的操作系统<code>Unix</code>，那么<code>Unix</code>又是如何诞生的呢？</p>
<ul>
<li>1969年以前，Bell实验室、MIT、GE（通用电气公司）的<code>Multics</code>系统</li>
</ul>
<blockquote>
<p>当时的输入设备只有卡片阅读机，输出设备只有打印机，因此如果要测试某个程序，则需要将读卡纸插入卡片机，如果有错误，还需要重新来过。</p>
</blockquote>
<blockquote>
<p>在一个学校里，主机只有一台，如果有多人使用，就需要等待，20世纪60年代初，MIT开发了分时操作系统，让大型主机可以通过提供多个终端机（Terminal）以连入主机</p>
</blockquote>
<blockquote>
<p>1965年前后，Bell、MIT、GE共同发起了Multiplexed Information and Computing Service项目，以使大型主机可以同时提供300台以上的终端连接使用，但由于资金短缺，项目进度落后，造成了失败。</p>
</blockquote>
<ul>
<li>1969年，Ken Thompson的小型File Server System</li>
</ul>
<blockquote>
<p>仅仅用4个星期，他就以汇编语言写了一组内核程序， 同时包括一些内核工具程序，以及一个小的文件系统，这个系统就是Unix系统的原型。Thompson将Multics系统简化了不少，同实验室的朋友戏称这个系统为Unics。</p>
</blockquote>
<blockquote>
<p>这个文件系统有两个重要的概念：① 所有的程序或系统装置都是文件；② 不管构件编辑器还是附属文件，所写的程序只有一个目的，就是有效的完成目标。</p>
</blockquote>
<ul>
<li>1973年，Unix正式诞生，Ritchie等人以C语言写出第一个正式Unix内核</li>
</ul>
<blockquote>
<p>Thompson的操作系统由于其易用性，在贝尔实验室内部广为流传，但由于Unics是汇编语言写的，对于硬件有依赖性，所以他和Ritchie合作想将Unics用高级的程序语言来编写。当时现成的高级语言有B语言，但编译出来的内核性能不好。Ritchie和Thompson将B语言重新改写为C语言，再用C语言改写和编译Unics内核，发行出了Unix正式版本。而由于是C语言改写的内核，Unix很容易被移植到不同机器上。</p>
</blockquote>
<ul>
<li>1977年，重要的Unix分支——BSD诞生</li>
</ul>
<blockquote>
<p>1973年以后，Unix与学术界开始了合作开发，Berkeley大学的Bill Joy取得Unix内核源码后，将其改编，命名为Berkeley Software Distribution（即BSD），Bill Joy也是Sun公司的创办者</p>
</blockquote>
<ul>
<li>1979年，重要的System V架构与版权声明</li>
</ul>
<blockquote>
<p>早期的Unix只能与服务器（Server）或者大型工作站（Workstation）画上等号。而1979年AT&amp;T推出的System V第七版Unix，可以支持x86架构的个人计算机系统。但为了收回Unix版权，增加了”不可对学生提供源码”的严格限制。</p>
</blockquote>
<ul>
<li>1984年之一， x86架构的Minix操作系统诞生</li>
</ul>
<blockquote>
<p>Andrew Tanenbaum（谭宁邦）教授，完全不看Unix源码，自己动手写了Minix这个Unix Like的内核程序，专门用于教学。</p>
</blockquote>
<ul>
<li>1984年之二，GNU项目与FSF基金会成立</li>
</ul>
<blockquote>
<p>Richard Mathew Stallman在1984年发起GNU项目，目的是创建一个自由、开放的Unix操作系统（Free Unix）。他从开发Unix可运行的小程序开始，开发了GCC、Emacs、Bash Shell、GLIBC等软件，打开了GNU项目的知名度，并成立了自由软件基金会</p>
</blockquote>
<ul>
<li>1985 年，GNU的通用公共许可证</li>
</ul>
<blockquote>
<p>为了避免 GNU 开发的自由软件被其他人用作专利软件，因此创建了<code>通用公共许可证</code>（General Public License， GPL），并称呼他为CopyLeft。</p>
</blockquote>
<ul>
<li>1988年， 图形接口XFree86项目</li>
</ul>
<blockquote>
<p>由于GUI的需求日益增加，MIT和其他第三方发布了X Window System，并成立了XFree86这个组织。</p>
</blockquote>
<ul>
<li>1991年，芬兰大学生Linus Torvalds基于bash，gcc开发了Intel 386机器上的内核程序</li>
</ul>
<p>下面附上Unix系统的家族族谱</p>
<p><img data-src="/uploads/in-post/linux_basic/Unix_family.png" alt="Unix家族族谱"></p>
<h4 id="Linux的内核版本"><a href="#Linux的内核版本" class="headerlink" title="Linux的内核版本"></a>Linux的内核版本</h4><p>Linux的内核版本号类似于：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">4.3.1-42</span>.e15</span><br><span class="line">主版本.次版本.释出版本-修改版本</span><br></pre></td></tr></table></figure>

<p>由于Linux的内核开发者太多，Linux内核经常变动。所以托瓦茨将内核的开发趋势分为两股，并根据两个内核的开发分别给予不同的内核编号：</p>
<ul>
<li><code>主、次版本为奇数</code>：开发中版本（development）</li>
</ul>
<blockquote>
<p>如4.1.xx，这种内核版本主要用在测试与开发新功能，所以通常这种版本仅有内核开发工程师会使用</p>
</blockquote>
<ul>
<li><code>主、次版本为偶数</code>：稳定版本（stable）</li>
</ul>
<blockquote>
<p>如4.2.xx，等到内核功能开发成熟后会加到这类的版本中，主要用在一般家庭计算机及企业版本中。</p>
</blockquote>
<h4 id="Linux的特色"><a href="#Linux的特色" class="headerlink" title="Linux的特色"></a>Linux的特色</h4><ul>
<li><p>自由与开放的使用与学习环境</p>
</li>
<li><p>配置需求低廉</p>
</li>
<li><p>内核功能强大而稳定</p>
</li>
<li><p>独立作业</p>
</li>
</ul>
<h4 id="Linux的优缺点"><a href="#Linux的优缺点" class="headerlink" title="Linux的优缺点"></a>Linux的优缺点</h4><p><strong>优点</strong>：</p>
<ul>
<li><p>稳定的系统</p>
</li>
<li><p>免费或少许费用</p>
</li>
<li><p>安全性、漏洞的快速修补</p>
</li>
<li><p>多任务、多用户</p>
</li>
<li><p>用户与用户组的规划</p>
</li>
<li><p>相对比较不耗资源的系统</p>
</li>
<li><p>适合需要小内核程序的嵌入式系统</p>
</li>
<li><p>整合度佳且多样的图形用户界面</p>
</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li><p>没有特定的支持厂商</p>
</li>
<li><p>游戏的支持度不足</p>
</li>
<li><p>专业软件的支持度不足</p>
</li>
</ul>
<h3 id="基本概念及操作"><a href="#基本概念及操作" class="headerlink" title="基本概念及操作"></a>基本概念及操作</h3><h4 id="Linux桌面环境介绍"><a href="#Linux桌面环境介绍" class="headerlink" title="Linux桌面环境介绍"></a>Linux桌面环境介绍</h4><p>相对于现在的<code>Windows</code>系统，<code>Unix/Linux</code>本身是没有图形界面的，我们通常在<code>Unix/Linux</code>发行版上看到的图形界面实际都只是运行在Linux系统之上的软件。大家熟知的桌面环境有KDE，GNOME，XFCE，LXDE等，用户可以根据自己的需要安装喜欢的桌面环境，甚至定制桌面。</p>
<p><img data-src="/uploads/in-post/linux_basic/linux_GUI.png" alt="Unix/Linux的GUI架构"></p>
<h4 id="终端（Terminal）"><a href="#终端（Terminal）" class="headerlink" title="终端（Terminal）"></a>终端（Terminal）</h4><p>在使用<code>Linux</code>系统时，我们并不是直接与计算机系统进行交互，而是通过一个叫做<code>Shell</code>的中间程序来完成。<code>Shell</code>的中文含义是<code>壳</code>，可以理解为包裹在计算机内核外的软件，隐藏了操作系统底层的实现细节，他可以解析我们的命令，并将其转化为计算机可以看懂的字段，将命令交给计算机运行。在<code>Unix/Linux</code>中比较流行的常见的<code>Shell</code>有<code>bash</code>，<code>zsh</code>，<code>ksh</code>，<code>csh</code>等。为了提供一个可以接受用户输入并能够显示输出的窗口，Linux系统在图形界面下提供了一个叫做终端模拟器（Terminal）的程序。在MAC系统上推荐使用的Terminal为<code>iTerm</code>，Linux系统上推荐使用的Terminal为<code>Guake</code>。</p>
<h4 id="Terminal命令行"><a href="#Terminal命令行" class="headerlink" title="Terminal命令行"></a>Terminal命令行</h4><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><ul>
<li><p>[Tab] 使用<code>Tab</code>键可以对命令进行快速补全</p>
</li>
<li><p>[Ctrl+c] 使用<code>Ctrl+c</code>可以强行终止当前运行的程序</p>
</li>
<li><p>[Ctrl+a] 使用<code>Ctrl+a</code>可以将光标移至输入行的头部，相当于<code>Home</code>键</p>
</li>
<li><p>[Ctrl+e] 使用<code>Ctrl+e</code>可以将光标移至输入行的尾部，相当于<code>End</code>键</p>
</li>
<li><p>[Ctrl+k] 使用<code>Ctrl+k</code>可以删除从光标所在位置到行尾的所有字符</p>
</li>
</ul>
<h5 id="历史输入命令"><a href="#历史输入命令" class="headerlink" title="历史输入命令"></a>历史输入命令</h5><ul>
<li><p>⬆️  方向键的<code>上</code>键，可以快速查阅输入过的上一条命令</p>
</li>
<li><p>⬇️  方向键的<code>下</code>键，可以与<code>上</code>键在输入过的命令间进行切换</p>
</li>
<li><p>order + ⬆️  输入部分命令后按<code>上</code>键，可以调出上一个包含该order字符的命令</p>
</li>
</ul>
<h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><ul>
<li><p>*  匹配 0 或多个字符</p>
</li>
<li><p>?  匹配任意一个字符</p>
</li>
<li><p>[list]  匹配<code>list</code>中的任意单一字符，如[abc]，意为匹配a或b或c</p>
</li>
<li><p>[!list]  匹配除<code>list</code>中的任意单一字符以外的字符，如[!abc]，意为不匹配a或b或c</p>
</li>
<li><p>[c1-c2]  匹配<code>c1-c2</code>中的任意单一字符 如[0-9]，意为匹配数字0到9任意数字</p>
</li>
<li><p>{s1,s2,…}  匹配<code>s1</code>或<code>s2</code>(或更多)其一字符串</p>
</li>
<li><p>{c1..c2}  匹配<code>c1-c2</code>中全部字符 如{1..10}</p>
</li>
</ul>
<h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><p><code>Linux</code>是一个可以实现多用户登陆的操作系统，比如“admin”和“visitor”都可以同时登陆同一台主机，他们共享一些主机的资源，但他们也分别有自己的用户空间，用于存放各自的文件。但实际上他们的文件都是放在同一个物理磁盘上的甚至同一个逻辑分区或者目录里，但是由于<code>Linux </code>的<code>用户管理</code>和<code>权限机制</code>，不同用户不可以轻易地查看、修改彼此的文件。</p>
<h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><p>打开终端，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">who</span> am i</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/who_am_i.png" alt="who am i"></p>
<p>可以看到，输入的第一列表示当前伪终端的用户的用户名（要查看当前登录用户的用户名，去掉空格直接使用<code>whoami</code>即可），第二列的<code>pts/0</code>中<code>pts</code>表示伪终端，所谓伪是相对于<code>/dev/tty</code>设备而言的，<code>pts/0</code>后面那个数字就表示打开的伪终端序号，第三列则表示当前伪终端的启动时间。</p>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p><code>Linux</code>系统中，<code>root</code>账户拥有整个系统最高的权限，可以对所有账户进行操作。</p>
<blockquote>
<p><code>root</code>权限，系统权限的一种，与<code>SYSTEM</code>权限可以理解成一个概念，但高于<code>Administrator</code>权限，<code>root</code>是<code>Linux</code>和<code>Unix</code>系统中的超级管理员用户帐户，该帐户拥有整个系统至高无上的权力，所有对象他都可以操作，所以很多黑客在入侵系统的时候，都要把权限提升到<code>root</code>权限，获得<code>root</code>权限之后就意味着已经获得了手机的最高权限，这时候你可以对手机中的任何文件（包括系统文件）执行所有增、删、改、查的操作</p>
</blockquote>
<p>一般登录系统时都是以普通账户的身份登录的，创建用户需要用到<code>root</code>权限，使用<code>root</code>权限有两种方式，一种是用<code>root</code>用户登录进行操作，另一种是使用<code>sudo</code>命令。</p>
<p><strong>su，su - 与 sudo</strong></p>
<p><code>su &lt;user&gt;</code>可以切换到用户user，执行时需要输入目标用户的密码，<code>sudo &lt;cmd&gt;</code>可以以特权权限运行cmd命令，需要当前用户属于<code>sudo</code>组，且需要输入当前用户密码。<code>su - &lt;user&gt;</code>命令也是切换用户，同时环境变量也会跟着改变成目标用户的环境变量。</p>
<p>利用<code>sudo</code>命令创建一个名为<code>visitor</code>的用户：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo adduser visitor</span></span><br></pre></td></tr></table></figure>

<p>系统会创建用户，并生成相应的<code>home</code>目录，如果不想生成目录，请使用<code>useradd</code>命令。</p>
<p>使用命令<code>su -l visitor</code>可以切换到<code>visitor</code>用户并将目录切换到其根目录。</p>
<p><img data-src="/uploads/in-post/linux_basic/add_user.png" alt="add user"></p>
<p>退出当前用户使用命令<code>exit</code>或者使用快捷键<code>Ctrl+d</code>。</p>
<h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p>在<code>Linux</code>中每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源，就跟家的形式差不多，你的兄弟姐妹（不同的用户）属于同一个家（用户组），你们可以共同拥有这个家（共享资源），爸妈对待你们都一样（共享权限），你偶尔写写日记，其他人未经允许不能查看（私有资源和权限）。当然一个用户是可以属于多个用户组的，正如你既属于家庭，又属于学校或公司。</p>
<p><strong>查看自己所在用户组</strong></p>
<ul>
<li>使用<code>groups</code>命令</li>
</ul>
<p><img data-src="/uploads/in-post/linux_basic/groups_visitor.png" alt="groups"></p>
<p>其中冒号之前表示用户，后面表示该用户所属的用户组。这里可以看到<code>visitor</code>用户属于<code>visitor</code>用户组，每次新建用户如果不指定用户组的话，默认会自动创建一个与用户名相同的用户组（差不多就相当于家长的意思，或者说是老总）。默认情况下在sudo用户组里的可以使用sudo命令获得root权限。</p>
<ul>
<li>查看<code>/etc/group</code>文件</li>
</ul>
<p><img data-src="/uploads/in-post/linux_basic/etc_group.png" alt="groups"></p>
<p><code>/etc/group</code>的内容包括用户组:用户组口令:GID:该用户组所包含的用户，每个用户组一条记录。格式如下：</p>
<blockquote>
<p>group_name:password:GID:user_list</p>
</blockquote>
<p><code>password</code>字段为一个<code>x</code>，表示密码不可见。</p>
<p><strong>将其他用户加入sudo组</strong></p>
<p>默认情况下新创建的用户是不具有<code>root</code>权限的，也不在<code>sudo</code>用户组，可以让其加入<code>sudo</code>用户组从而获取<code>root</code>权限。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">su</span> - <span class="keyword">l</span> visitor</span><br><span class="line">sudo <span class="keyword">ls</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/not_in_sudo.png" alt="not in sudo list"></p>
<p>如上述提示，<code>visitor</code>用户不在<code>sudoers</code>文件中，如果想让<code>visitor</code>具有s<code>udo</code>权限，需要将其添加到<code>sudo</code>用户组</p>
<p>使用<code>usermod</code>命令可以为用户添加用户组，同样使用该命令你必需有<code>root</code>权限，你可以直接使用<code>root</code>用户为其它用户添加用户组，或者用其它已经在<code>sudo</code>用户组的用户使用<code>sudo</code>命令获取权限来执行该命令。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo usermod -G sudo visitor</span></span><br></pre></td></tr></table></figure>

<p>上述命令将<code>visitor</code>用户添加到了<code>sudo</code>组中，可以使用<code>sudo</code>命令获取<code>root</code>权限。</p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>想要删除用户，需要使用命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo userdel -rf visitor</span></span><br></pre></td></tr></table></figure>

<h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><h4 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h4><p>使用<code>ls -l</code>命令列出文件。</p>
<p><img data-src="/uploads/in-post/linux_basic/ls_l.png" alt="ls"></p>
<p>每个文件名之前都有一段参数，这些参数的含义如下图：</p>
<p><img data-src="/uploads/in-post/linux_basic/ls_desc.png" alt="ls desc"></p>
<ul>
<li>文件类型</li>
</ul>
<p>文件类型，分为<code>设备文件</code>（/dev目录下有各种设备文件）<code>socket</code>（网络套接字），<code>pipe</code>(管道)，<code>软链接文件</code>，<code>普通文件</code>和<code>目录</code>这几种。</p>
<ul>
<li>文件权限</li>
</ul>
<p>读权限，表示你可以使用<code>tail &lt;file name&gt;</code>之类的命令来读取某个文件的内容，用<code>r</code>表示。</p>
<p>写权限，表示你可以编辑和修改某个文件，用<code>w</code>表示。</p>
<p>执行权限，通常指可以运行的二进制程序文件或者脚本文件，用<code>x</code>表示。</p>
<p>文件类型和权限由<code>10</code>位构成，第一位表示文件的类型，后九位表示文件权限，2-4位表示拥有者权限，5-7位表示用户组权限，8-10位表示其他用户权限，<code>rwx</code>表示可读可写可执行，<code>---</code>表示不可读不可写不可执行，拥有那某个字母表示拥有该字母对应的权限。</p>
<p><img data-src="/uploads/in-post/linux_basic/ls_type.png" alt="ls type"></p>
<p>拥有者权限表示文件创建者对该文件拥有的权限，用户组权限表示本组用户对该文件所拥有的权限，其他用户权限则表示非创建者和用户组的所有其他用户对该文件拥有的权限。</p>
<ul>
<li>链接数</li>
</ul>
<p>链接到该文件所在的<code>inode</code>结点的文件名数目。</p>
<ul>
<li>文件大小</li>
</ul>
<p>以<code>inode</code>结点大小为单位来表示的文件大小，可以使用<code>ls -lh</code>来更直观的查看文件的大小。</p>
<p><img data-src="/uploads/in-post/linux_basic/ls_lh.png" alt="ls lh"></p>
<h4 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h4><p>用<code>visitor</code>用户创建一个文件。</p>
<p><img data-src="/uploads/in-post/linux_basic/chown_ls.png" alt="chown ls"></p>
<p>然后切换回<code>root</code>用户修改文件所有者。</p>
<p><img data-src="/uploads/in-post/linux_basic/chown.png" alt="chown"></p>
<p>发现文件的所有者变成了<code>root</code>用户。</p>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p>如果想让自己创建的文件不能被其他用户读、写、执行，需要修改文件的相应权限。共有两种方法进行修改：</p>
<ul>
<li>二进制数字表示</li>
</ul>
<p>如4.1.所述，文件权限由后9位表示，每3位为一组，表示不同类型用户拥有的权限，可以将<code>rwx</code>转化为对应的二进制数字：</p>
<p><img data-src="/uploads/in-post/linux_basic/binary_present.png" alt="binary present"></p>
<p>简单来说，<code>r</code>对应数字<code>4</code>，<code>w</code>对应数字<code>2</code>，<code>x</code>对应数字<code>1</code>。</p>
<p><code>rwx</code>对应数字为4+2+1 = 7，<code>rw-</code>对应数字为4+2+0 = 6，以此类推。</p>
<p>修改文件权限，需要使用<code>chmod</code>命令：</p>
<p><img data-src="/uploads/in-post/linux_basic/chmod.png" alt="chmod"></p>
<p>修改权限后，其他用户就不能读取该文件了：</p>
<p><img data-src="/uploads/in-post/linux_basic/chmod_can_not_read.png" alt="chmod can not read"></p>
<ul>
<li><code>+-</code>符号表示</li>
</ul>
<p>利用下面的命令，可以达到上述同样的效果</p>
<p><img data-src="/uploads/in-post/linux_basic/chmod_rwx.png" alt="chmod rwx"></p>
<p><code>g</code>，<code>o</code>，<code>u</code>分别表示<code>group</code>，<code>others</code>，<code>user</code>。</p>
<p><code>+</code>，<code>-</code>分别表示增加或者删除相应的权限。</p>
<h3 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h3><p><code>Unix</code>是以目录为主的，<code>Linux</code>也继承了这一优良特性。<code>Linux</code>是以树形目录结构的形式来构建整个系统的，可以理解为一个用户可操作系统的骨架。虽然本质上无论是目录结构还是操作系统内核都是存储在磁盘上的，但从逻辑上来说<code>Linux</code>的磁盘是挂载在目录上的，每一个目录不仅能使用本地磁盘分区的文件系统，也可以使用网络上的文件系统。</p>
<h4 id="FHS标准"><a href="#FHS标准" class="headerlink" title="FHS标准"></a>FHS标准</h4><p>在早期的<code>Unix</code>系统中，各个厂家各自定义了自己的<code>Unix</code>系统的文件系统构成，比较混乱，而<code>Linux</code>为了避免这个问题，对文件系统进行了标准化的活动，推出了<code>FHS</code>标准，2004年1月19日发行了最新版本<span class="exturl" data-url="aHR0cDovL3JlZnNwZWNzLmxpbnV4Zm91bmRhdGlvbi5vcmcvRkhTXzIuMy9maHMtMi4zLnBkZg==">FHS标准2.3<i class="fa fa-external-link-alt"></i></span>。</p>
<blockquote>
<p><code>FHS</code>（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数<code>Linux</code>版本采用这种文件组织形式，<code>FHS</code>定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。</p>
</blockquote>
<p><code>FHS</code>定义了两层规范，第一层是，<code>/</code>下面的各个目录应该要放什么文件数据，例如<code>/etc</code>应该要放置设置文件，<code>/bin</code>与<code>/sbin</code>则应该要放置可执行文件等等。</p>
<p>第二层则是针对<code>/usr</code>及<code>/var</code>这两个目录的子目录来定义。例如<code>/var/log</code>放置系统登录文件、<code>/usr/share</code>放置共享数据等等。</p>
<p><code>FHS</code>依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四种交互作用的形态:</p>
<p><img data-src="/uploads/in-post/linux_basic/FHS.png"></p>
<p><strong><code>根目录</code>（/）含义</strong>*：</p>
<p>根目录是整个系统最重要的目录，因为不但所有的目录都是由根目录衍生出来的，同时，根目录也与开机、还原、系统修复等操作有关。</p>
<p><code>FHS</code>建议：根目录所在的分区越小，系统性能就越好，根目录所在的文件系统也较不容易发生问题</p>
<p>以下是重要目录放置的文件内容：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>放置一些在<span style="COLOR: #ff0000"><strong>单用户维护模式下还能被操作的命令</strong></span>，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等命令</td>
</tr>
<tr>
<td>/boot</td>
<td>放置开机会使用到的文件，包括<span style="COLOR: #ff0000"><strong>Linux内核文件以及开机菜单与开机所需配置文件</strong></span>等</td>
</tr>
<tr>
<td>/dev</td>
<td>以文件形式存放<strong><span style="COLOR: #ff0000">任何设备与接口设备</span></strong>，比较重要的文件：/dev/null, /dev/zero, /dev/tty, /dev/lp*, /dev/hd*, /dev/sd*等</td>
</tr>
<tr>
<td>/etc</td>
<td>系统主要的配置文件<strong><span style="COLOR: #ff0000">几乎</span></strong>都放置在这个目录内。FHS建议：不要将可执行文件放到这个目录，比较重要的文件：/etc/inittab, /etc/init.d, /etc/modprobe.conf, /etc/X11, /etc/sysconfig等</td>
</tr>
<tr>
<td>/home</td>
<td>系统默认的用户主文件夹，～代表当前用户主文件夹</td>
</tr>
<tr>
<td>/lib</td>
<td>放置在开机时会用到的<strong><span style="COLOR: #ff0000">函数库</span></strong>，以及在/bin或/sbin下面的命令会调用的函数库，/lib/modules这个目录放置的驱动程序文件，尤其重要</td>
</tr>
<tr>
<td>/media</td>
<td>此目录下的文件都是可删除的设备，常见文件名：/media/cdrom</td>
</tr>
<tr>
<td>/mnt</td>
<td>用来暂时挂载某些额外设备</td>
</tr>
<tr>
<td>/opt</td>
<td>第三方软件放置的目录</td>
</tr>
<tr>
<td>/root</td>
<td>系统管理员的主文件夹，/root应该和根目录放在同一个分区中</td>
</tr>
<tr>
<td>/srv</td>
<td>存放网络服务所需取用的数据，如：www服务需要的网页数据就可以放置在/srv/www里面</td>
</tr>
<tr>
<td>/tmp</td>
<td>任何人都可以访问这个目录，这是用于暂时放置文件的地方，重要的数据<strong>都不可以</strong>放到这个目录里面，FHS建议：每次开机时都清空一下这个目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>放置了开机过程所需的命令，包括<strong><span style="COLOR: #ff0000">开机、修复、还原系统所需的命令</span></strong></tbody></table></td>
</tr>
</tbody></table>
<p>注意：</p>
<p>开机过程中，只有根目录会被挂载，其他分区则是在开机完成后才会持续进行挂载，所以在根目录下与开机相关的目录都<code>不能</code>与根目录放到<code>不同的分区</code>中。</p>
<p>从上表可以轻易得出，下列五个目录一定不可与根目录分开：</p>
<p>/etc—-配置文件</p>
<p>/bin—-重要执行文件</p>
<p>/dev—-所需要的设备文件</p>
<p>/lib—-执行文件所需要的函数库与内核所需的模块</p>
<p>/sbin—-重要的系统执行文件</p>
<h4 id="目录路径"><a href="#目录路径" class="headerlink" title="目录路径"></a>目录路径</h4><p><code>路径</code>是指某个目录或文件所在的位置，分为<code>绝对路径</code>和<code>相对路径</code>两种：</p>
<ul>
<li>绝对路径</li>
</ul>
<p>是以<code>根&quot;/&quot;</code>目录为起点的完整路径，以你所要到的目录为终点，表现形式如：<code>/usr/local</code>，表示根目录下的<code>usr</code>目录中的<code>local</code>目录。</p>
<ul>
<li>相对路径</li>
</ul>
<p>相对路径，是相对于当前目录的路径，相对路径是以当前目录<code>.</code>为起点，以所要到的目录为终点，表现形式如：<code>local/bin </code>。因为这个目录为 当前目录下的子目录，是可以省略这个<code>.</code>的；如果是当前目录的上一级目录，则需要使用<code>..</code>，比如你当前目录为<code>home</code>目录，根目录就应该表示为<code>../</code> ,表示当前目录（<code>home</code>目录）的上一级目录（<code>/</code>目录）。</p>
<p>使用<code>cd</code>命令可以切换目录，在<code>Linux</code>中，<code>.</code>表示当前目录，<code>..</code>表示上一级目录, <code>-</code>表示上一次所在目录，<code>～</code>通常表示当前用户的<code>home</code>目录。使用<code>pwd</code>命令可以获取当前所在路径（绝对路径）。</p>
<p>进入上一级目录：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">cd</span></span> ..</span><br></pre></td></tr></table></figure>

<p>进入本用户<code>home</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>使用<code>pwd</code>获取当前路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/cd.png" alt="cd"></p>
<p>提示：在进行目录切换的过程中请多使用<code>Tab</code>键自动补全，可避免输入错误，连续按两次<code>Tab</code>可以显示全部候选结果。</p>
<h3 id="Linux文件的基本操作"><a href="#Linux文件的基本操作" class="headerlink" title="Linux文件的基本操作"></a>Linux文件的基本操作</h3><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><ul>
<li>新建空白文件</li>
</ul>
<p>使用<code>touch</code>命令创建空白文件，可以创建一个不会覆盖已有同名文件的空白文件。</p>
<ul>
<li>新建有预定内容的文件</li>
</ul>
<p>使用<code>echo &quot;content&quot; &gt; filename</code>命令，可以创建一个拥有<code>content</code>内容的名为<code>filename</code>的文件。</p>
<ul>
<li>新建目录</li>
</ul>
<p>使用<code>mkdir</code>命令可以创建一个空白目录，使用<code>-p</code>参数可以同时创建父目录。</p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul>
<li>复制文件</li>
</ul>
<p>使用<code>cp</code>命令可以复制一个文件到指定目录。</p>
<ul>
<li>复制目录</li>
</ul>
<p>使用<code>cp -r</code>或<code>cp -R</code>命令，可以递归复制目录及其中的文件到指定目录。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>删除文件</li>
</ul>
<p>使用<code>rm</code>命令，可以删除一个文件。使用参数<code>-f</code>可以强制删除文件。</p>
<ul>
<li>删除目录</li>
</ul>
<p>使用<code>rm -r</code>命令，可以删除一个目录。</p>
<h4 id="移动文件与文件重命名"><a href="#移动文件与文件重命名" class="headerlink" title="移动文件与文件重命名"></a>移动文件与文件重命名</h4><ul>
<li>移动文件</li>
</ul>
<p>使用<code>mv</code>命令可以移动文件，使用方法为<code>mv 源文件 目的目录</code>。</p>
<ul>
<li>重命名文件</li>
</ul>
<p>使用<code>mv</code>命令还可以重命名文件，使用方法为<code>mv 旧文件名 新文件名</code>。</p>
<ul>
<li>批量重命名</li>
</ul>
<p>使用<code>rename</code>命令可以通过<code>perl</code>正则表达式进行批量重命名：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用通配符批量创建 5 个文件</span></span><br><span class="line">touch file&#123;1.<span class="string">.5</span>&#125;<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件</span></span><br><span class="line">rename &#x27;s/\<span class="string">.txt/</span>\<span class="string">.c/</span>&#x27; *<span class="string">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量将这 5 个文件，文件名改为大写</span></span><br><span class="line">rename &#x27;y/a-z/A-Z/&#x27; *<span class="string">.c</span></span><br></pre></td></tr></table></figure>

<p><code>rename</code>是先使用第二个参数的通配符匹配所有后缀为<code>.txt</code>的文件，然后使用第一个参数提供的正则表达式将匹配的这些文件的<code>.txt</code>后缀替换为<code>.c</code>。</p>
<h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ul>
<li>使用<code>cat</code>，<code>tac</code>和<code>nl</code>命令查看文件</li>
</ul>
<p>这三个命令都是用来打印文件内容到标准输出,其中<code>cat</code>为正序显示，<code>tac</code>倒序显示，<code>nl</code>添加行号并打印。</p>
<blockquote>
<p>标准输入输出：当我们执行一个<code>shell</code>命令行时通常会自动打开三个标准文件，即标准输入文件<code>stdin</code>，默认对应终端的键盘；标准输出文件<code>stdout</code>和标准错误输出文件<code>stderr</code>，这两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</p>
</blockquote>
<p>比如我们要查看<code>/local</code>文件夹下的<code>test.txt</code>文件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p>可以加上参数<code>-n</code>显示行号：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/cat.png" alt="cat"></p>
<p><code>nl</code>命令，添加行号并打印，是比<code>cat -n</code>更专业的行号打印命令。他有以下几个常用参数：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">-b <span class="symbol">:</span> 指定添加行号的方式，主要有两种：</span><br><span class="line">    -b <span class="symbol">a:</span>表示无论是否为空行，同样列出行号(<span class="string">&quot;cat -n&quot;</span>就是这种方式)</span><br><span class="line">    -b <span class="symbol">t:</span>只列出非空行的编号并列出（默认为这种方式）</span><br><span class="line">-<span class="built_in">n</span> <span class="symbol">:</span> 设置行号的样式，主要有三种：</span><br><span class="line">    -<span class="built_in">n</span> <span class="symbol">ln:</span>在行号字段最左端显示</span><br><span class="line">    -<span class="built_in">n</span> <span class="symbol">rn:</span>在行号字段最右边显示，且不加 <span class="number">0</span></span><br><span class="line">    -<span class="built_in">n</span> <span class="symbol">rz:</span>在行号字段最右边显示，且加 <span class="number">0</span></span><br><span class="line">-w <span class="symbol">:</span> 行号字段占用的位数(默认为<span class="number">6</span>位)</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/nl.png" alt="nl"></p>
<p>以上三个命令都是在当前窗口显示文本，一屏显示不完文本的内容，需要用鼠标拖动滚动条或者滑动滚轮才能继续往下翻页，如果能够用键盘直接进行翻页操作的话会更加方便，这就需要使用下面的几个命令。</p>
<ul>
<li>使用<code>more</code>和<code>less</code>命令分页查看文件</li>
</ul>
<p>这两个命令都能够实现用键盘向下翻页的操作，其中<code>more</code>命令翻页到最后一行时会自动退出命令，而<code>less</code>的功能更加强大，他是基于<code>more</code>和<code>vi</code>开发的，会新打开一个页面显示文本内容，只要不按<code>q</code>推出，可以随意翻页。</p>
<p>比如我们要使用<code>more</code>命令查看一个单页放不下的<code>test.txt</code>文件：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">more</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/more.png" alt="more"></p>
<p>打开后默认只显示一屏内容，终端底部显示当前阅读的进度(百分比)，翻到尾行时命令会自动退出。可以使用<code>Enter</code>键向下滚动一行，使用<code>Space</code>键向下滚动一屏，按下<code>h</code>显示帮助，<code>q</code>退出。</p>
<p>如果我们使用<code>less</code>命令查看单页放不下德 <code>test.txt</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">less</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/less.png" alt="less"></p>
<p>可以看到，翻到尾行时命令不会退出，而是显示<code>End</code>，表示已经到达了尾行。</p>
<ul>
<li>使用<code>head</code>和<code>tail</code>命令查看文件</li>
</ul>
<p>正如命令的名称，<code>head</code>命令只查看文件的头几行（默认为10行，不足10行则显示全部），<code>tail</code>命令只查看文件的尾几行。</p>
<p>两个命令的输入方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> test.txt</span><br><span class="line"><span class="built_in">head</span> -n 1 test.txt</span><br><span class="line"><span class="built_in">tail</span> test.txt</span><br><span class="line"><span class="built_in">tail</span> -n 1 test.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/head_tail.png" alt="head tail"></p>
<p>关于<code>tail</code>命令，还有一个很实用的参数<code>-f</code>，这个参数可以实现不停地读取某个文件的内容并显示。让我们可以动态查看日志，起到实时监视的作用。</p>
<h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><p>我们可以使用<code>file</code>命令查看文件的类型：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/file.png" alt="file"></p>
<p>这表示<code>test.txt</code>是一个由ASCII编码的文本文件。</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>要了解<code>环境变量</code>，首先要了解<code>Shell变量</code>，所谓<code>变量</code>就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，而这些符号将用于不同的运算处理中。通常变量与值是一对一的关系，可以通过表达式读取它的值赋值给其它变量，也可以直接指定数值赋值给任意变量。为了便于运算和处理，大部分的编程语言会区分变量的类型，用于分别记录数值、字符或者字符串等等数据类型。<code>Shell</code>中的变量也基本如此，有不同类型（但不用专门指定类型名），可以参与运算，有作用域限定。</p>
<blockquote>
<p>变量的作用域即变量的有效范围（比如一个函数中、一个源文件中或者全局范围），在该范围内只能有一个同名变量。一旦离开则该变量无效，如同不存在这个变量一般。</p>
</blockquote>
<ul>
<li>创建变量</li>
</ul>
<p>使用<code>declare</code>命令可以创建一个变量：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> tmp</span><br></pre></td></tr></table></figure>

<p>其实也可以不用<code>declare</code>预声明一个变量，直接用的时候创建即可。</p>
<p>使用<code>=</code>符号（不要加空格）赋值运算符可以为变量<code>tmp</code>赋值：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tmp</span><span class="operator">=</span>nihao</span><br></pre></td></tr></table></figure>

<p>读取变量的值，使用<code>echo</code>命令和<code>$</code>符号（一定要加<code>$</code>符号，不然输出的是变量名而不是他的值）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$tmp</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/declare.png" alt="declare"></p>
<p>注意:关于变量名，并不是任何形式的变量名都是可用的，变量名只能是英文字母,数字或者下划线，且不能以数字作为开头。</p>
<h4 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h4><p><code>环境变量</code>就是作用域比自定义变量要大，如<code>Shell</code>的环境变量作用于自身和它的子进程。在所有的<code>Unix</code>和类<code>Unix</code>系统中，每个进程都有其各自的环境变量设置，且默认情况下，当一个进程被创建时，处理创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。<code>Shell</code>程序也作为一个进程运行在操作系统之上，而我们在<code>Shell</code>中运行的大部分命令都将以<code>Shell</code>的子进程的方式运行。</p>
<p><img data-src="/uploads/in-post/linux_basic/shell_env.png" alt="shell env"></p>
<p>通常我们会涉及到的环境变量有三种：</p>
<ul>
<li><p>当前<code>Shell</code>进程私有用户自定义变量，如上面我们创建的<code>tmp</code>变量，只在当前<code>Shell</code>中有效。</p>
</li>
<li><p><code>Shell</code>本身内建的变量。</p>
</li>
<li><p>从自定义变量导出的环境变量。</p>
</li>
</ul>
<p>也有三个与上述三种环境变量相关的命令，<code>set</code>，<code>env</code>，<code>export</code>。这三个命令很相似，都可以用于打印相关环境变量,区别在于涉及的是不同范围的环境变量，详见下表：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>set</code></td>
<td>显示当前<code>Shell</code>所有环境变量，包括其内建环境变量（与<code>Shell</code>外观等相关），用户自定义变量及导出的环境变量</td>
</tr>
<tr>
<td><code>env</code></td>
<td>显示与当前用户相关的环境变量，还可以让命令在指定环境中运行</td>
</tr>
<tr>
<td><code>export</code></td>
<td>显示从<code>Shell</code>中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量</td>
</tr>
</tbody></table>
<p><img data-src="/uploads/in-post/linux_basic/set_env.png" alt="set env"></p>
<p>关于环境变量，可以简单的理解成在当前进程的子进程是否有效，有效则为环境变量，否则不是。</p>
<p>注意：为了与普通变量区分，通常我们习惯将环境变量名设为大写。</p>
<h4 id="命令的查找路径与顺序"><a href="#命令的查找路径与顺序" class="headerlink" title="命令的查找路径与顺序"></a>命令的查找路径与顺序</h4><p>我们在<code>Shell</code>中输入一个命令，他是怎么找到相应的命令并执行的呢？答案是通过环境变量<code>PATH</code>来进行搜索的。</p>
<p>查看<code>PATH</code>环境变量的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/path.png" alt="path"></p>
<p>上面这些目录中放的都是可执行文件，当我们在<code>Shell</code>中执行一个命令时，系统就会按照<code>PATH</code>中设定的路径按照顺序依次到目录中去查找，如果存在同名的命令，则执行先找到的那个。</p>
<h4 id="添加自定义路径到PATH环境变量"><a href="#添加自定义路径到PATH环境变量" class="headerlink" title="添加自定义路径到PATH环境变量"></a>添加自定义路径到<code>PATH</code>环境变量</h4><p><code>PATH</code>环境变量中是以<code>:</code>作为路径的分隔符，我们可以这样添加自定义路径：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PATH</span> = <span class="variable">$PATH</span><span class="symbol">:/home/wen/bin</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>PATH</code>路径一定要使用绝对路径</p>
<p>但是给<code>PATH</code>环境变量追加了一个路径，它也只是在当前<code>Shell</code>有效，一旦退出终端，再打开就会发现失效了。有没有方法让添加的环境变量全局有效？或者每次启动<code>Shell</code>时自动执行上面添加自定义路径到<code>PATH</code>的命令？</p>
<p>在每个用户的<code>home</code>目录中有一个<code>Shell</code>每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。<code>zsh</code>的配置文件是<code>.zshrc</code>，相应<code>Bash</code>的配置文件为<code>.bashrc</code>。它们在<code>etc</code>下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。</p>
<p>我们可以简单的使用下面命令直接添加内容到.zshrc中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>:/home/wen/bin&quot;</span> &gt;&gt; .zshrc</span><br></pre></td></tr></table></figure>

<p>上述命令中<code>&gt;&gt;</code>表示将标准输出以追加的方式重定向到一个文件中，注意前面用到的<code>&gt;</code>是以覆盖的方式重定向到一个文件中，使用的时候一定要注意分辨。在指定文件不存在的情况下都会创建新的文件。</p>
<p>或者使用<code>vi</code>或<code>vim</code>或其他文本编辑器打开<code>.zshrc</code>文件，找到<code>PATH</code>行，将内容添加进<code>PATH</code>的配置中。</p>
<h4 id="修改和删除已有变量"><a href="#修改和删除已有变量" class="headerlink" title="修改和删除已有变量"></a>修改和删除已有变量</h4><ul>
<li>变量修改</li>
</ul>
<p>变量的修改有以下几种方式：</p>
<table>
<thead>
<tr>
<th>变量设置方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$&#123;变量名#匹配字串&#125;</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>$&#123;变量名##匹配字串&#125;</code></td>
<td>从头向后开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>$&#123;变量名%匹配字串&#125;</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最短数据</td>
</tr>
<tr>
<td><code>$&#123;变量名%%匹配字串&#125;</code></td>
<td>从尾向前开始匹配，删除符合匹配字串的最长数据</td>
</tr>
<tr>
<td><code>$&#123;变量名/旧的字串/新的字串&#125;</code></td>
<td>将符合旧字串的第一个字串替换为新的字串</td>
</tr>
<tr>
<td><code>$&#123;变量名//旧的字串/新的字串&#125;</code></td>
<td>将符合旧字串的全部字串替换为新的字串</td>
</tr>
</tbody></table>
<p>比如要修改我们前面添加到<code>PATH</code>的环境变量。为了避免操作失误导致命令找不到，我们先将<code>PATH</code>赋值给一个新的自定义变量<code>path</code>：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>path=<span class="variable">$PATH</span></span><br><span class="line"><span class="variable">$ </span>echo <span class="variable">$path</span></span><br><span class="line"><span class="variable">$ </span>path=<span class="variable">$&#123;</span>path<span class="string">%/home/</span>wen/bin&#125;</span><br><span class="line"><span class="comment"># 或使用通配符,*表示任意多个任意字符</span></span><br><span class="line"><span class="variable">$ </span>path=<span class="variable">$&#123;</span>path%*<span class="regexp">/bin&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量删除</li>
</ul>
<p>可以使用<code>unset</code>命令删除一个环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> tmp</span><br></pre></td></tr></table></figure>

<h4 id="如何让环境变量立即生效"><a href="#如何让环境变量立即生效" class="headerlink" title="如何让环境变量立即生效"></a>如何让环境变量立即生效</h4><p>我们在<code>Shell</code>中修改了一个配置脚本文件之后（比如<code>zsh</code>的配置文件<code>home</code>目录下的<code>.zshrc</code>），需要退出终端重新打开甚至重启主机之后其才能生效，我们可以使用<code>source</code>命令来让其立即生效，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>

<p><code>source</code>命令还有一个别名就是<code>.</code>，但后面的文件必须指定完整的绝对或相对路径名：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">. </span>./.zshrc</span><br></pre></td></tr></table></figure>

<p>第一个<code>.</code>表示<code>source</code>命令，第二个<code>.</code>表示当前目录。</p>
<h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><p>与搜索相关的命令常用的有如下几个<code>whereis</code>，<code>locate</code>，<code>which</code>，<code>find</code>。</p>
<h4 id="whereis简单快速"><a href="#whereis简单快速" class="headerlink" title="whereis简单快速"></a><code>whereis</code>简单快速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/whereis.png" alt="whereis"></p>
<p><code>whereis</code>只能搜索<code>二进制文件</code>(-b)，<code>man帮助文件</code>(-m)和<code>源代码文件</code>(-s)。和<code>find</code>相比，<code>whereis</code>查找的速度非常快，这是因为<code>Linux</code>系统会将 系统内的所有文件都记录在一个数据库文件中，当使用<code>whereis</code>和下面即将介绍的<code>locate</code>时，会从数据库中查找数据，而不是像<code>find</code>命令那样，通过遍历硬盘来查找，效率自然会很高。但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用<code>whereis</code>和<code>locate</code>查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>
<h4 id="locate快而全"><a href="#locate快而全" class="headerlink" title="locate快而全"></a><code>locate</code>快而全</h4><p><code>locate</code>让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。<code>locate</code>通过<code>/var/lib/mlocate/mlocate.db</code>数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行<code>updatedb</code>命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次<code>updatedb</code>命令。</p>
<p>它可以用来查找指定目录下的不同文件类型，如查找<code>/usr</code>下所有以<code>src</code>开头的文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">locate <span class="regexp">/usr/</span>src</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/locate.png" alt="locate"></p>
<p>注意：它不只是在<code>usr</code>目录下查找，还会自动递归子目录进行查找。</p>
<p>查找<code>/usr/share/</code>下所有<code>jpg</code>文件：</p>
<p><img data-src="/uploads/in-post/linux_basic/locate_jpg.png" alt="locate jpg"></p>
<p>注意：<code>*</code>号前面要添加反斜杠(<code>\</code>)转义，否则会无法找到。</p>
<p>如果想只统计数目可以加上<code>-c</code>参数，<code>-i</code>参数可以忽略大小写进行查找，<code>whereis</code>的<code>-b</code>,<code>-m</code>，<code>-s</code>同样可以使用。</p>
<h4 id="which小而精"><a href="#which小而精" class="headerlink" title="which小而精"></a><code>which</code>小而精</h4><p><code>which</code>本身是<code>Shell</code>内建的一个命令，我们通常使用<code>which</code>来确定是否安装了某个指定的软件，因为它只从<code>PATH</code>环境变量中执行的路径中去搜索命令。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">which</span> <span class="keyword">man</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/which.png" alt="which"></p>
<h4 id="find精而细"><a href="#find精而细" class="headerlink" title="find精而细"></a><code>find</code>精而细</h4><p><code>Linux</code>下<code>find</code>命令在目录结构中搜索文件，并执行指定的操作。<code>Linux</code>下<code>find</code>命令提供了相当多的查找条件，功能很强大。由于<code>find</code>具有强大的功能，所以它的选项也很多。即使系统中含有网络文件系统(NFS)，<code>find</code>命令在该文件系统中同样有效，只要你具有相应的权限。</p>
<p>在指定目录下搜索指定文件名的文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> / -name <span class="string">&#x27;test.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find.png" alt="find"></p>
<p><code>find</code>命令的路径是作为第一个参数的， 基本命令格式为<code>find [path] [option] [action]</code>。</p>
<p>基本命令选项：</p>
<ul>
<li><code>-name</code>   按照文件名查找文件。</li>
<li><code>-perm</code>   按照文件权限来查找文件。</li>
<li><code>-prune</code>  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。</li>
<li><code>-user</code>   按照文件属主来查找文件。</li>
<li><code>-group</code>  按照文件所属的组来查找文件。</li>
<li><code>-nogroup</code>    查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。</li>
<li><code>-nouser</code>     查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。</li>
<li><code>-newer file1 ! file2</code>    查找更改时间比文件file1新但比文件file2旧的文件。</li>
<li><code>-type</code>   查找某一类型的文件，诸如：<ul>
<li><code>b</code> - 块设备文件。</li>
<li><code>d</code> - 目录。</li>
<li><code>c</code> - 字符设备文件。</li>
<li><code>p</code> - 管道文件。</li>
<li><code>l</code> - 符号链接文件。</li>
<li><code>f</code> - 普通文件。</li>
</ul>
</li>
</ul>
<p>与时间相关的命令参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>-amin n</code></td>
<td>查找系统中最后N分钟访问的文件</td>
</tr>
<tr>
<td><code>-atime n</code></td>
<td>查找系统中最后n*24小时访问的文件</td>
</tr>
<tr>
<td><code>-cmin n</code></td>
<td>查找系统中最后N分钟被改变文件状态的文件</td>
</tr>
<tr>
<td><code>-ctime n</code></td>
<td>查找系统中最后n*24小时被改变文件状态的文件</td>
</tr>
<tr>
<td><code>-mmin n</code></td>
<td>查找系统中最后N分钟被改变文件数据的文件</td>
</tr>
<tr>
<td><code>-mtime n</code></td>
<td>查找系统中最后n*24小时被改变文件数据的文件</td>
</tr>
</tbody></table>
<p>下面以<code>-mtime</code>参数举例：</p>
<ul>
<li><code>-mtime n</code>: n为数字，表示为在n天之前的”一天之内“修改过的文件</li>
<li><code>-mtime +n</code>: 列出在n天之前（不包含n天本身）被修改过的文件</li>
<li><code>-mtime -n</code>: 列出在n天之前（包含n天本身）被修改过的文件</li>
</ul>
<p><img data-src="/uploads/in-post/linux_basic/find_time.png" alt="find time"></p>
<p>实例：</p>
<ul>
<li>查找指定时间内修改过的文件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> -mtime -2</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find_mtime.png" alt="find mtime"></p>
<p>查找<code>2 * 24</code>小时之内被修改过的文件。</p>
<ul>
<li>根据关键字查找</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -name <span class="string">&quot;test.txt&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find_name.png" alt="find name"></p>
<p>在当前目录查找文件名为<code>test.txt</code>的文件。</p>
<ul>
<li>按照目录或文件的权限查找文件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -perm 765</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find_perm.png" alt="find perm"></p>
<p>查找当前目录下权限为<code>765</code>的文件。</p>
<ul>
<li>按照类型查找</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -<span class="built_in">type</span> f -<span class="built_in">name</span> <span class="string">&quot;*.xml&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find_type.png" alt="find type"></p>
<p>查找当前目录下以<code>xml</code>结尾的普通文件。</p>
<ul>
<li>按照文件内容查找</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> . -name <span class="string">&quot;*.txt&quot;</span> | xargs <span class="keyword">grep</span> <span class="string">&quot;test*&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/find_grep.png" alt="find grep"></p>
<p>查找当前目录下含有<code>test</code>开头的所有<code>txt</code>文件。</p>
<h3 id="文件打包和解压缩"><a href="#文件打包和解压缩" class="headerlink" title="文件打包和解压缩"></a>文件打包和解压缩</h3><p>在<code>Linux</code>上常用的是<code>tar</code>工具，常用的压缩命令还有<code>compress</code>，<code>gzip</code>和<code>bzip2</code>等。</p>
<p>常用的命令如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">compress filename       将文件压缩成.Z格式</span><br><span class="line"></span><br><span class="line">gzip filename           将文件压缩成.gz格式</span><br><span class="line"></span><br><span class="line">bzip2 filename          将文件压缩成.bz2格式</span><br><span class="line"></span><br><span class="line">以上三个命令 -d           将相应的文件解压缩</span><br><span class="line"></span><br><span class="line">tar dest source         打包压缩</span><br><span class="line"></span><br><span class="line"><span class="code">    -c                      归档文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -x                      压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -z                      gzip压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -j                      bzip2压缩文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -v                      显示压缩或解压缩过程 v(view)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    -f                      使用档名</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>tar -cvf /local/test.tar /local/test          只打包，不压缩</p>
<p>tar -zcvf /local/test.tar.gz /local/test      打包，并用gzip压缩</p>
<p>tar -jcvf /local/test.tar.bz2 /local/test     打包，并用bzip2压缩</p>
<p>tar -xvf /local/test.tar /local/test          只拆包</p>
<p>tar -zxvf /local/test.tar.gz /local/test      用gzip解压缩，并拆包</p>
<p>tar -jxvf /local/test.tar.bz2 /local/test     用bzip2解压缩，并拆包</p>
<h3 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h3><h4 id="查看磁盘和目录的容量"><a href="#查看磁盘和目录的容量" class="headerlink" title="查看磁盘和目录的容量"></a>查看磁盘和目录的容量</h4><ul>
<li>使用<code>df</code>命令查看磁盘的容量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/df.png" alt="df"></p>
<p>一般使用情况下，我们更多只是关心<code>/dev/sda1</code>的内容。</p>
<p>物理主机上的<code>/dev/sda1</code>是对应着主机硬盘的分区，后面的数字表示分区号，数字前面的字母<code>a</code>表示第几块硬盘（也可能是可移动磁盘），你如果主机上有多块硬盘则可能还会出现<code>/dev/sdb</code>，<code>/dev/sdc</code>这些磁盘设备都会在<code>/dev</code>目录下以文件的存在形式。</p>
<p>我们还可以看到<code>1k-块</code>(1k-blocks)这个陌生的名词，它表示以磁盘块大小的方式显示容量，后面为相应的以块大小表示的已用和可用容量。</p>
<p>可以用参数<code>-h</code>转化为更为直观的方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/df_h.png" alt="df h"></p>
<ul>
<li>使用<code>du</code>命令查看目录的容量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认同样以 blocks 的大小展示</span></span><br><span class="line"><span class="built_in">du</span></span><br><span class="line"><span class="comment"># 加上`-h`参数，以更易读的方式展示</span></span><br><span class="line"><span class="built_in">du</span> -h</span><br></pre></td></tr></table></figure>

<p><code>-d</code>参数指定查看目录的深度</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只查看1级目录的信息</span></span><br><span class="line"><span class="attribute">du</span> -h -d <span class="number">0</span> ~</span><br><span class="line"><span class="comment"># 查看2级</span></span><br><span class="line"><span class="attribute">du</span> -h -d <span class="number">1</span> ~</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/du.png" alt="du"></p>
<h3 id="命令执行顺序的控制"><a href="#命令执行顺序的控制" class="headerlink" title="命令执行顺序的控制"></a>命令执行顺序的控制</h3><h4 id="顺序执行多条命令"><a href="#顺序执行多条命令" class="headerlink" title="顺序执行多条命令"></a>顺序执行多条命令</h4><p>通常情况下，我们每次只能在终端输入一条命令，按下回车执行，执行完成后，我们再输入第二条命令，然后再按回车执行……</p>
<p>但是我们可能会遇到如下使用场景：我们需要使用<code>apt-get</code>安装一个软件，然后安装完成后立即运行安装的软件（或命令工具），又恰巧你的主机没有更新软件列表,那么你可能会有如下一系列操作：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line"><span class="comment"># 等待——————————然后输入下面的命令</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install software</span><br><span class="line"><span class="comment"># 等待——————————然后输入下面的命令</span></span><br><span class="line">software</span><br></pre></td></tr></table></figure>

<p>这样的输入方式比较浪费我们的时间，我们可能想要一次性输入完命令，并让系统自动运行。</p>
<p>简单的顺序执行可以使用<code>;</code>来完成：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update;sudo apt-<span class="built_in">get</span> install software;software</span><br><span class="line"><span class="comment"># 让它自己运行</span></span><br></pre></td></tr></table></figure>

<h4 id="有选择的执行命令"><a href="#有选择的执行命令" class="headerlink" title="有选择的执行命令"></a>有选择的执行命令</h4><p>如果自动顺序执行命令时，前面的命令执行不成功，而后面的命令又依赖于上一条命令的结果，那么就会造成花了时间，最终却得到一个错误的结果，而且有时候无法判断结果是否正确。此时我们需要能够有选择性的执行命令，比如上一条命令执行成功才继续下一条：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">which cowsay &amp;&amp; cowsay <span class="operator">-f</span> head<span class="operator">-in</span> ohch~</span><br></pre></td></tr></table></figure>

<p>如果没有安装<code>cowsay</code>，执行一次上述命令，会发现什么也没发生，如果安装了<code>cowsay</code>，会出现以下效果：</p>
<p><img data-src="/uploads/in-post/linux_basic/cowsay.png" alt="cowsay"></p>
<p>上面的<code>&amp;&amp;</code>就是用来实现选择性执行的，它表示如果前面的命令执行结果返回<code>0</code>则执行后面的，否则不执行，你可以从<code>$?</code>环境变量获取上一次命令的返回结果：</p>
<p><img data-src="/uploads/in-post/linux_basic/cowsay_echo.png" alt="cowsay echo"></p>
<p><code>&amp;&amp;</code>表示逻辑与，<code>||</code>表示逻辑或，<code>shell</code>可以用两个符号实现命令执行顺序的简单控制。<code>||</code>在这里就是与<code>&amp;&amp;</code>相反的控制效果，即当上一条命令执行结果为<code>≠0($?≠0)</code>时则执行它后面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> cowsay || <span class="built_in">echo</span> <span class="string">&quot;cowsay not found&quot;</span></span><br></pre></td></tr></table></figure>

<p>同时我们可以将<code>&amp;&amp;</code>命令和<code>||</code>命令综合起来进行使用，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> cowsay &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;not exist&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面命令运行的流程如下：</p>
<p><img data-src="/uploads/in-post/linux_basic/order_control.png" alt="order control"></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p><code>管道</code>是一种通信机制，通常用于<code>进程</code>间的通信（也可通过socket进行网络通信），它表现出来的形式就是将前面每一个进程的输出(stdout)直接作为下一个进程的输入(stdin)。</p>
<p><code>管道</code>又分为<code>匿名管道</code>和<code>具名管道</code>。<code>具名管道</code>简单的说就是有名字的管道，通常只会在源程序中用到具名管道。我们在使用一些过滤程序时经常会用到的就是<code>匿名管道</code>，在命令行中由<code>|</code>分隔符表示。</p>
<h4 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h4><p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al /etc</span><br></pre></td></tr></table></figure>

<p>上述命令结果很多，屏幕不能完全显示，可以使用管道命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al /etc | less</span><br></pre></td></tr></table></figure>

<p>会将前一个命令<code>ls</code>的输出传递给下一个命令<code>less</code>，然后可以进行<code>less</code>命令的操作。</p>
<h4 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h4><p><code>cut</code>命令可以将文件进行处理后输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出每行前五个字符（包含第五个）</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -c -5</span><br><span class="line"><span class="comment"># 输出每行前五个之后的字符（包含第五个）</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -c 5-</span><br><span class="line"><span class="comment"># 输出每行第五个字符</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -c 5</span><br><span class="line"><span class="comment"># 输出每行2到5之间的字符（包含第五个）</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -c 2-5</span><br><span class="line"><span class="comment"># 将分隔符变为:分割出不同的field，并输出第1个和第2个field</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -d <span class="string">&#x27;:&#x27;</span> -f 1,2</span><br><span class="line"><span class="comment"># 将分隔符变为:分割出不同的field，并输出第1个到第4个field</span></span><br><span class="line"><span class="built_in">cut</span> /etc/passwd -d <span class="string">&#x27;:&#x27;</span> -f 1-4</span><br></pre></td></tr></table></figure>

<h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p><code>grep</code>命令是很强大的，也是相当常用的一个命令，它结合正则表达式可以实现很复杂却很高效的匹配和查找。</p>
<p><code>grep</code>命令的一般形式为：<code>grep</code> <code>[命令选项]</code> <code>用于匹配的表达式</code> <code>[文件]</code></p>
<p>例如，搜索当前目录下所有包含<code>test</code>的所有文件，并显示出现在文本中的行号：</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">grep -rnI <span class="string">&quot;test&quot;</span> .</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/grep.png" alt="grep"></p>
<p><code>-r</code>参数表示递归搜索子目录中的文件,<code>-n</code>表示打印匹配项行号，<code>-I</code>表示忽略二进制文件。</p>
<p>也可以在匹配字段中使用正则表达式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看环境变量中以<span class="string">&quot;bin&quot;</span>结尾的字符串</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> | grep <span class="string">&quot;.*bin$&quot;</span></span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/grep_export.png" alt="grep export"></p>
<h4 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h4><p><code>wc</code>命令用于统计并输出一个文件中行、单词和字节的数目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> /etc/passwd</span><br><span class="line"><span class="comment"># 行数</span></span><br><span class="line"><span class="built_in">wc</span> -l /etc/passwd</span><br><span class="line"><span class="comment"># 单词数</span></span><br><span class="line"><span class="built_in">wc</span> -w /etc/passwd</span><br><span class="line"><span class="comment"># 字节数</span></span><br><span class="line"><span class="built_in">wc</span> -c /etc/passwd</span><br><span class="line"><span class="comment"># 字符数</span></span><br><span class="line"><span class="built_in">wc</span> -m /etc/passwd</span><br><span class="line"><span class="comment"># 最长行字节数</span></span><br><span class="line"><span class="built_in">wc</span> -L /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/wc.png" alt="wc"></p>
<p>注意：对于西文字符来说，一个字符就是一个字节，但对于中文字符一个汉字是大于2个字节的，具体数目是由字符编码决定的。</p>
<p>结合管道来操作一下，下面统计<code>/etc</code>下面所有目录数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -dl /etc/*/ | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/wc_ls.png" alt="wc ls"></p>
<h4 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a>sort命令</h4><p>功能是将输入按照一定方式排序，然后再输出,它支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。</p>
<p>默认为字典排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passswd | <span class="built_in">sort</span></span><br></pre></td></tr></table></figure>

<p>反转排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<p>按特定字段排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t<span class="string">&#x27;:&#x27;</span> -k 3</span><br></pre></td></tr></table></figure>

<p>上面的<code>-t</code>参数用于指定字段的分隔符，这里是以<code>:</code>作为分隔符；<code>-k</code>字段号用于指定对哪一个字段进行排序。这里<code>/etc/passwd</code>文件的第三个字段为数字，默认情况下是一字典序排序的，如果要按照数字排序就要加上<code>-n</code>参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t<span class="string">&#x27;:&#x27;</span> -k 3 -n</span></span><br></pre></td></tr></table></figure>

<h4 id="uniq命令"><a href="#uniq命令" class="headerlink" title="uniq命令"></a>uniq命令</h4><p><code>uniq</code>命令可以用于过滤或者输出重复行。</p>
<ul>
<li>过滤重复行</li>
</ul>
<p>我们可以使用<code>history</code>命令查看最近执行过的命令，不过你可能只想查看使用了那个命令而不需要知道具体干了什么，那么你可能就会要想去掉命令后面的参数然后去掉重复的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> | <span class="built_in">cut</span> -c 8- | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 | <span class="built_in">uniq</span></span><br></pre></td></tr></table></figure>

<p>由于<code>uniq</code>命令只能去连续重复的行，不是全文去重，所以要达到全文去重效果，我们需要先排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> | <span class="built_in">cut</span> -c 8- | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 | <span class="built_in">sort</span> | <span class="built_in">uniq</span></span><br><span class="line"><span class="comment"># 或者$ history | cut -c 8- | cut -d &#x27; &#x27; -f 1 | sort -u</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输出重复行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出重复过的行（重复的只输出一个）及重复次数</span></span><br><span class="line"><span class="built_in">history</span> | <span class="built_in">cut</span> -c 8- | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -dc</span><br><span class="line"><span class="comment"># 输出所有重复的行</span></span><br><span class="line"><span class="built_in">history</span> | <span class="built_in">cut</span> -c 8- | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -D</span><br></pre></td></tr></table></figure>

<h3 id="常用文本处理命令"><a href="#常用文本处理命令" class="headerlink" title="常用文本处理命令"></a>常用文本处理命令</h3><h4 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h4><p><code>tr</code>命令可以用来删除一段文本信息中的某些文字。或者将其进行转换。</p>
<p>使用方式：<code>tr</code> <code>[option]</code>…<code>SET1</code> <code>[SET2]</code></p>
<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配</td>
</tr>
<tr>
<td>-s</td>
<td>去除set1指定的在输入文本中连续并重复的字符</td>
</tr>
</tbody></table>
<p>操作举例：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 删除 <span class="string">&quot;hello world&quot;</span> 中所有的<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span> | <span class="keyword">tr</span> -d <span class="string">&#x27;olh&#x27;</span></span><br><span class="line"># 将<span class="string">&quot;hello&quot;</span> 中的<span class="keyword">ll</span>,去重为一个<span class="keyword">l</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span> | <span class="keyword">tr</span> -s <span class="string">&#x27;l&#x27;</span></span><br><span class="line"># 将输入文本，全部转换为大写或小写输出</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span> | <span class="keyword">tr</span> <span class="string">&#x27;[a-z]&#x27;</span> <span class="string">&#x27;[A-Z]&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/tr.png" alt="tr"></p>
<h4 id="col命令"><a href="#col命令" class="headerlink" title="col命令"></a>col命令</h4><p><code>col</code>命令可以将<code>Tab</code>换成对等数量的<code>空格建</code>，或反转这个操作。</p>
<p>使用方式：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">col</span><span class="meta"> [option]</span></span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-x</td>
<td>将Tab转换为空格</td>
</tr>
<tr>
<td>-h</td>
<td>将空格转换为Tab（默认选项）</td>
</tr>
</tbody></table>
<p>操作举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 /etc/protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 Tab 转义成可见字符的符号</span></span><br><span class="line"><span class="built_in">cat</span> -A /etc/protocols | <span class="built_in">tail</span> -n 5</span><br><span class="line"><span class="comment"># 使用 col -x 将 /etc/protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了</span></span><br><span class="line"><span class="built_in">cat</span> /etc/protocols | col -x | <span class="built_in">tail</span> -n 5</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/col.png" alt="col"></p>
<h4 id="join命令"><a href="#join命令" class="headerlink" title="join命令"></a>join命令</h4><p><code>join</code>命令用于将两个文件中包含相同内容的那一行合并在一起。</p>
<p>使用方式：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">join</span> [<span class="keyword">option</span>]... file1 file2</span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-t</td>
<td>指定分隔符，默认为空格</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写的差异</td>
</tr>
<tr>
<td>-1</td>
<td>指明第一个文件要用哪个字段来对比，，默认对比第一个字段</td>
</tr>
<tr>
<td>-2</td>
<td>指明第二个文件要用哪个字段来对比，，默认对比第一个字段</td>
</tr>
</tbody></table>
<p>操作举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建两个文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;haha 1:hello haha&#x27;</span> &gt; file1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;haha 1:world hehe&#x27;</span> &gt; file2</span><br><span class="line"><span class="built_in">join</span> file1 file2</span><br><span class="line"><span class="comment"># 将file1与file2两个文件合并，指定以&#x27;:&#x27;作为分隔符</span></span><br><span class="line">sudo <span class="built_in">join</span> -t<span class="string">&#x27;:&#x27;</span> file1 file2</span><br><span class="line"><span class="comment"># 将file1与file2两个文件合并，指定以&#x27;:&#x27;作为分隔符, 分别比对第1和第1个字段</span></span><br><span class="line">sudo <span class="built_in">join</span> -t<span class="string">&#x27;:&#x27;</span> -1 1 file1 -2 1 file2</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/join.png" alt="join"></p>
<h4 id="paste命令"><a href="#paste命令" class="headerlink" title="paste命令"></a>paste命令</h4><p><code>paste</code>命令与<code>join</code>命令类似，它是在不对比数据的情况下，简单地将多个文件合并一起，以<code>Tab</code>隔开。</p>
<p>使用方式：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">paste [<span class="keyword">option</span>] <span class="keyword">file</span>...</span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>指定合并的分隔符，默认为Tab</td>
</tr>
<tr>
<td>-s</td>
<td>不合并到一行，每个文件为一行</td>
</tr>
</tbody></table>
<p>操作举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello &gt; file1</span><br><span class="line"><span class="built_in">echo</span> world &gt; file2</span><br><span class="line"><span class="built_in">echo</span> wenzhiquan &gt; file3</span><br><span class="line"><span class="built_in">paste</span> -d <span class="string">&#x27;:&#x27;</span> file1 file2 file3</span><br><span class="line"><span class="built_in">paste</span> -s file1 file2 file3</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/linux_basic/paste.png" alt="paste"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统重装后必备</title>
    <url>/2016/08/05/2016-08-05-mac-installed-todo/</url>
    <content><![CDATA[<blockquote>
<p>“Mac系统常用软件，可以提升工作效率”</p>
</blockquote>
<h3 id="程序员必备"><a href="#程序员必备" class="headerlink" title="程序员必备"></a>程序员必备</h3><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p>这个是最需要安装的软件，利用<code>homebrew</code>可以快速的安装和管理其他软件包，类似于<code>Fedora</code>系统中的<code>dnf</code>命令。</p>
<p>安装方法如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>直接在命令行中输入上述命令即可快速安装<code>homebrew</code>了。</p>
<span id="more"></span>

<h4 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h4><p>Mac自带的终端感觉不是特别方便，可以安装<code>iTerm2</code>，并调整出<code>HotKey Window</code>，就可以快速的开关命令行啦。</p>
<p>直接在<span class="exturl" data-url="aHR0cDovL3d3dy5pdGVybTIuY29tLw==">官网<i class="fa fa-external-link-alt"></i></span>下载安装包安装即可。常用配置方法如下：</p>
<p><img data-src="/uploads/in-post/Mac/iterm_hotkey.png" alt="iterm hotkey"></p>
<p>开启<code>HotKey</code>，将打开的窗口选择为<code>Hotkey Window</code>。</p>
<p><img data-src="/uploads/in-post/Mac/iterm_setdefault.png" alt="iterm setdefault"></p>
<p>将<code>Hotkey Window</code>设置为默认打开窗口。</p>
<p><img data-src="/uploads/in-post/Mac/iterm_window.png" alt="iterm window"></p>
<p>勾选<code>Hide after opening</code>，这样打开<code>iTerm2</code>的时候默认窗口就会自动隐藏，不用每次都自己隐藏了。上面的红框调整的是窗口的透明度和模糊程度，根据自己的爱好调整即可。</p>
<h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>命令行必备文本编辑器，<code>brew install vim</code>安装。</p>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>相信有过多人协作开发经验的人对<code>git</code>一定不陌生，直接<code>brew install git</code>即可。</p>
<h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><p><code>bash</code>的功能感觉不够强大，个人觉得还是<code>zsh</code>更加好用一些。</p>
<p>打开命令行，输入命令：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以给刚刚安装的<code>zsh</code>安装主题，安装的前提是安装了<code>git</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>静候安装完成，然后编辑配置文件：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span>  <span class="string">//</span> 切换到自己的根目录</span><br><span class="line">vim <span class="string">.zshrc</span></span><br></pre></td></tr></table></figure>

<p>将<code>ZSH_THEME</code>后面的变量改为自己喜欢的主题名称，地址在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9UaGVtZXM=">zsh主题<i class="fa fa-external-link-alt"></i></span>。</p>
<h4 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h4><p>一个非常方便的可以查找<code>API</code>的软件，直接在<span class="exturl" data-url="aHR0cHM6Ly9rYXBlbGkuY29tL2Rhc2g=">官网<i class="fa fa-external-link-alt"></i></span>下载安装即可，需要购买。</p>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>想要写托管到<code>github</code>的博客并且想马上看到效果，需要安装这款软件，具体安装方法请见我的博客：<a href="https://wenzhiquan.github.io/2018/05/04/2018-05-04-move-to-hexo-blog/">迁移至Hexo博客</a>。</p>
<h3 id="加快效率的软件"><a href="#加快效率的软件" class="headerlink" title="加快效率的软件"></a>加快效率的软件</h3><table>
<thead>
<tr>
<th>软件名称</th>
<th>推荐理由</th>
</tr>
</thead>
<tbody><tr>
<td><code>alfred</code></td>
<td>可以视为加强版Spotlight，可以安装各种workflow，极大提升查找效率</td>
</tr>
<tr>
<td><code>moom</code></td>
<td>预置了几种窗口位置，是对mac自带的最大化的加强</td>
</tr>
<tr>
<td><code>atom</code></td>
<td>很好用的文本编辑器，界面美观，插件很多</td>
</tr>
<tr>
<td><code>xmind</code></td>
<td>跨平台的思维导图软件，导师力荐的软件</td>
</tr>
<tr>
<td><code>远程桌面连接</code></td>
<td>想用Mac控制Windows操作系统必需的软件</td>
</tr>
<tr>
<td><code>Cyberduck</code></td>
<td>大家都在用的ftp客户端，操作简单</td>
</tr>
<tr>
<td><code>CleanMyMac</code></td>
<td>Mac版的电脑管家</td>
</tr>
<tr>
<td><code>lantern</code></td>
<td>科学上网的利器</td>
</tr>
<tr>
<td><code>keka</code></td>
<td>小巧精致的解压缩软件，可以解压各种格式的压缩包</td>
</tr>
<tr>
<td><code>chrome</code></td>
<td>这个就不用多说了</td>
</tr>
<tr>
<td><code>Karabiner</code></td>
<td>感觉自己的快捷键不够用了吗？使用这款软件吧</td>
</tr>
<tr>
<td><code>parallel desktop</code></td>
<td>Mac上的最强虚拟机软件</td>
</tr>
</tbody></table>
<h3 id="Mac截图小技巧"><a href="#Mac截图小技巧" class="headerlink" title="Mac截图小技巧"></a>Mac截图小技巧</h3><ul>
<li><p>基础快捷键（<code>+</code>表示同时操作、<code>-</code>表示分步操作）</p>
<ul>
<li><code>Cmd+Shift+3</code>：全屏截图；截取整个屏幕，保存截图至桌面。</li>
<li><code>Cmd+Shift+4</code>：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面。</li>
<li><code>Cmd+Shift+4 - 单击空格键 - 鼠标单击指定窗口</code>：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面。</li>
</ul>
</li>
<li><p>进阶快捷键</p>
<ul>
<li><code>Cmd+Shift+4 - 按住空格键拖动鼠标</code>：区域截图；选取区域范围后，按住空格键并拖到鼠标可移动选取范围，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Shift - 上下/左右移动鼠标</code>：区域截图；选取区域范围后，按住 Shift 并上下/左右移动鼠标即可固定选取范围宽度/高度改变高度/宽度，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Shift和Option</code>: 区域截图；选取区域范围后，按住 Shift 和 Option 键在上一快捷键功能的基础上自由切换高度宽度，释放按键后保存截图至桌面文件夹。</li>
<li><code>Cmd+Shift+4 - 按住Option</code>: 区域截图；选取区域范围后，按住 Option 键可按比例缩放选取范围，释放按键后保存截图至桌面文件夹。</li>
</ul>
</li>
</ul>
<p>PS：以上介绍的快捷键配合按住<code>Control</code>键即可将截图文件保存在剪切板，以供调用。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型和垃圾回收</title>
    <url>/2018/03/28/2018-03-28-java-memory-garbage-collection/</url>
    <content><![CDATA[<blockquote>
<p>“Java 与 C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。”</p>
</blockquote>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>按照 java 虚拟机规范，抽象的 Java 虚拟机如下图所示：</p>
<p><img data-src="/uploads/in-post/java_memory/vm_structure.png"></p>
<span id="more"></span>

<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>每条线程都有一个独立的程序计数器，用于记录当前线程所执行的<code>字节码</code>的<code>行号</code>。如果执行的是 java 方法，计数器记录的是虚拟机字节码指令的地址，如果是本地方法，则计数器值为空。</p>
<h4 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h4><p>Java 虚拟机栈也是线程私有的，和线程的生命周期相同。</p>
<p>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。</p>
<p>每一个栈帧在虚拟机中入栈到出栈的过程，对应了一个方法从调用到执行完成的过程。当进入一个方法时，这个方法需要在帧中分配多大的局部变量表是完全确定的，在方法运行期间局部变量表的大小不会改变。</p>
<p>其中<code>局部变量表</code>是我们最为关注的部分，他存放了编译期可知的 8 种<code>基本类型数据</code>、<code>对象引用</code>和<code>returnAddress</code>类型。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈和虚拟机栈作用类似，不过是为虚拟机要使用的本地方法提供服务。</p>
<h4 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h4><p>Java 堆是 Java 虚拟机管理的内存中最大的一部分。他是被所有线程共享的一块内存区域，在虚拟机启动时创建。Java 堆的目的是存放<code>对象实例</code>，基本上所有的<code>对象</code>和<code>数组</code>都需要在堆上进行分配。</p>
<p>Java 堆也是垃圾收集器管理的主要区域。</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区也是被各个线程共享的内存区域，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>和<code>即时编译器编译后的代码</code>等数据。</p>
<p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种<code>字面量</code>和<code>符号引用</code>。</p>
<p>而运行时常量池相对于 Class 文件常量池的特征是具备动态性，只有没预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，比如 String 的 intern()方法。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>虚拟机遇到一条<code>new</code>指令时，首先将去检查这个指令的参数是否能在常量池中<code>定位到一个类的符号引用</code>，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。若没有，需要先执行相应的类加载过程。</p>
<p>在类加载检查通过后，虚拟机会为新生对象<code>分配内存</code>，分配方式一般有两种：指针碰撞和空闲列表。当 Java 堆中的内存规整时，直接把指针挪动对象大小的距离即可，即指针碰撞；如果 Java 堆中的内存不规整，需要维护一个记录哪些内存可用的列表，分配时从列表中给对象分配空间，即空闲列表。</p>
<p>内存分配完成后，虚拟机需要将分配的<code>内存空间初始化为零值</code>。</p>
<p>然后，虚拟机要对<code>对象进行必要的设置</code>。将在对象头中设置对象是哪个类的实例、如何找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。</p>
<p>最后，会执行对象的<code>&lt;init&gt;</code>方法，把对象按照程序员的意愿进行初始化。</p>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在 HotSpot 虚拟机中，对象在内存中存储的布局可以分为 3 块区域：<code>对象头</code>、<code>实例数据</code>和<code>对齐填充</code>。</p>
<p>对象头包括两部分信息：</p>
<ul>
<li><p>第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志线程持有的锁、偏向线程 ID、偏向时间戳等。</p>
</li>
<li><p>另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
</li>
</ul>
<p>实例数据部分是对象真正存储的有效信息，HotSpot 分配策略中，相同宽度的字段总是被分配到一起，满足这个条件的前提下，在父类中定义的变量会出现在子类之前。</p>
<p>对齐填充是非必须的，仅仅起到占位符的作用，由于 HotSpot 虚拟机的自动内存管理系统要求对象的起始地址必须是 8 字节的整数倍，所以当对象实例数据部分没有对齐时，需要通过对齐填充来补全。</p>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>主流的访问方式有两种：<code>句柄</code>和<code>直接指针</code>两种。</p>
<p>句柄：Java 堆中会划分出一块内存来作为句柄池，reference 中存储的是对象的句柄地址，句柄中包含了对象实例数据和类型数据各自的具体信息。优点是当对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要改变。</p>
<p>直接指针：Java 堆对象的布局中放置了访问类型数据的相关信息，reference 中存储的是对象地址。优点是速度更快，节省了一次指针定位的开销。</p>
<p>HotSpot 使用直接指针的方式进行对象访问</p>
<h3 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h3><p>第一节我们提到，程序计数器、虚拟机栈、本地方法栈三个区域随线程生，随线程灭，每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的。而 Java 堆和方法区不同，我们只有在程序运行期间才能确定会创建那些对象，这部分的内存分配和回收都是动态的，垃圾回收时主要关注的是这部分的内存。</p>
<h4 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h4><p>垃圾收集器进行垃圾回收前，首先需要判断那些对象还是存活的。</p>
<h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><p>给对象添加一个引用计数器，每当有引用时计数器加 1，引用失效时计数器减 1，计数器为 0 的对象就是“垃圾对象”。</p>
<p>优点：实现简单，判定效率高。</p>
<p>缺点：很难解决对象之间的循环引用问题。</p>
<h5 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h5><p>通过一系列被称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Root 没有任何引用链相连时，证明此对象是“垃圾对象”。</p>
<p>Java 语言中，可作为 GC Roots 的对象有：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中 JNI 引用的对象</li>
</ul>
<p>###＃ 对象的自我拯救</p>
<p>对象可以通过覆盖 finalize()方法，在其中和引用链上的任何一个对象建立关联，逃过一次垃圾回收，但因为每个对象的 finalize()方法只会被系统自动调用一次，所以对象最多通过这种方式逃过一次垃圾回收。不过这种方式并不被推荐使用。</p>
<h4 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h4><p>方法区的垃圾回收主要有：<code>废弃常量</code>和<code>无用的类</code></p>
<p>当一个常量池中的常量（字面量和符号引用）没有被在任何地方被引用，且发生了内存回收的话，这个常量就会被清理出常量池。</p>
<p>无用的类：</p>
<ul>
<li>该类的所有实例都已经被回收</li>
<li>加载该类的 ClassLoader 已经被回收</li>
<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问</li>
</ul>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><p>G1 之前的垃圾回收算法，将堆划分为如下结构：</p>
<p><img data-src="/uploads/in-post/java_memory/memory_generation.png"></p>
<ul>
<li>新生代：eden space + 2 个 survivor</li>
<li>老年代：old space</li>
<li>永久代：1.8 之前的 perm space</li>
<li>元空间：1.8 之后的 metaspace</li>
</ul>
<h5 id="标记清除（Mark-Sweep）算法"><a href="#标记清除（Mark-Sweep）算法" class="headerlink" title="标记清除（Mark-Sweep）算法"></a>标记清除（Mark-Sweep）算法</h5><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>
<p>不足：效率较低，标记清除后会产生大量不连续的内存碎片</p>
<h5 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h5><p>将内存划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活的对象复制到另一块上面，然后把已经使用过的内存空间全部清理掉。</p>
<p>优点：实现简单，运行高效缺点：讲内存缩小为原来的一半，过于浪费空间</p>
<p>IBM 研究表明，新生代中的对象 98%都是“朝生夕死”的，所以不需要按照 1:1 来划分内存空间，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor 空间。HotSpot 虚拟机默认 Eden 和 Survivor 的大小比例是<code>8:1</code>，所以只有 10%的空间会被“浪费”，可以通过-XX:SurvivorRatio 参数调整这个比例。</p>
<p>复制算法在对象存活率较高时，需要进行较多的复制操作，而且需要额外的空间进行分配担保，所以老年代一般不能直接选用这种算法。</p>
<h5 id="标记整理（Mark-Compact）算法"><a href="#标记整理（Mark-Compact）算法" class="headerlink" title="标记整理（Mark-Compact）算法"></a>标记整理（Mark-Compact）算法</h5><p>首先对存活的对象进行标记，然后将所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p>
<h4 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h4><p>收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。HotSpot 包含的垃圾收集器如图所示：</p>
<p><img data-src="/uploads/in-post/java_memory/hot_spot_gb.png" alt="HotSpot虚拟机的垃圾收集器"></p>
<p>到目前为止，没有最好的收集器，我们应该针对具体的使用场景选择最合适的垃圾收集器。</p>
<h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><p>这个收集器是一个单线程收集器，使用复制算法，他会在进行垃圾收集时，暂停所有其他的线程，直到收集结束。其运行过程如下：</p>
<p><img data-src="/uploads/in-post/java_memory/serial.png"></p>
<p>由于其简单而高效（与其他收集器的单线程相比，没有线程交互的开销），他依然是虚拟机运行在 Client 模式下的默认新生代收集器。</p>
<h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><p>ParNew 收集器是 Serial 收集器的多线程版本，使用复制算法，工作过程如下：</p>
<p><img data-src="/uploads/in-post/java_memory/par_new.png"></p>
<p>他是运行在 Server 模式下的虚拟机中首选的新生代收集器，其中一个很重要的原因是只有 Serial 收集器和 ParNew 收集器可以和 CMS 收集器配合工作。</p>
<p>ParNew 默认开启的收集线程数与 CPU 数量相同，在 CPU 很多的环境下，可以使用-XX:ParallelGCThreads 参数来限制垃圾回收的线程数。</p>
<h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><p>此收集器也是使用复制算法的收集器，但他的关注点是达到可控制的吞吐量，所以也被称为”吞吐量优先“收集器。</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">吞吐量 </span>=<span class="string"> 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</span></span><br></pre></td></tr></table></figure>

<p>此收集器比较适用于需要与用户交互的程序和后台运算较多的程序。</p>
<p>它提供了两个参数用于精确控制吞吐量：</p>
<ul>
<li>最大垃圾收集停顿时间： -XX:MaxGCPauseMillis，参数值是一个大于 0 的毫秒数</li>
<li>设置吞吐量大小： -XX:GCTimeRatio，参数值一个[0, 100)的整数，也就是垃圾收集时间占总时间的比率，1 / (1 + N)，默认值是 99</li>
</ul>
<p>此收集器还有一个参数-XX:+UseAdaptiveSizePolicy，开启后虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最合适的停顿时间或最大的吞吐量，被称为<code>GC自适应的调节策略</code>。</p>
<h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><p>此收集器是 Serial 收集器的老年代版本，使用单线程和”标记整理“算法，主要用于 Client 模式的虚拟机。</p>
<p>如果在 Server 模式下，还有两大用处：</p>
<ul>
<li>在 JDK 1.5 之前与 Parallel Scavenge 收集器搭配使用</li>
<li>作为 CMS 收集器的后备预案</li>
</ul>
<h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h5><p>此收集器是 Parallel Scavenge 的老年代版本，使用多线程和”标记整理“算法。</p>
<p>在注重吞吐量 CPU 资源敏感的场合，可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器，工作过程如下：</p>
<p><img data-src="/uploads/in-post/java_memory/par_old.png"></p>
<h5 id="CMS（Concurrent-Mark-Sweep）收集器"><a href="#CMS（Concurrent-Mark-Sweep）收集器" class="headerlink" title="CMS（Concurrent Mark Sweep）收集器"></a>CMS（Concurrent Mark Sweep）收集器</h5><p>此收集器是一种以获取<code>最短回收停顿时间</code>为目标的收集器，使用”标记清除“算法。</p>
<p>过程分为四步：</p>
<ul>
<li>初始标记（CMS initial mark）</li>
<li>并发标记（CMS concurrent mark）</li>
<li>重新标记（CMS remark）</li>
<li>并发清除（CMS concurrent sweep）</li>
</ul>
<p>其中，初始标记和重新标记还是需要”Stop The World“。</p>
<p>初始标记仅仅标记可以和 GC Roots 关联到的对象</p>
<p>并发标记进行 GC Roots Tracing</p>
<p>重新标记用于修正并发标记期间因为用户程序继续运行导致标记产生变动的对象的标记记录</p>
<p><img data-src="/uploads/in-post/java_memory/CMS.png"></p>
<p>整个回收过程中，耗时最长的是并发标记和并发清除过程，但这两个过程都是可以和用户线程一起工作的，所以从总体上说，CMS 收集器的内存回收过程和用户线程是并发执行的。</p>
<p>优点： 并发手机、低停顿</p>
<p>缺点：</p>
<ul>
<li>对 CPU 资源非常敏感，并发阶段会导致总吞吐量降低</li>
<li>无法处理浮动垃圾，需要预留一部分空间提供给并发收集时的程序运作，如果 CMS 运行期间预留的内存无法满足程序需要，会触发一次”Concurrent Mode Failure“失败，临时启用 Serial Old 收集器。</li>
<li>会产生大量的内存碎片，提供-XX:+UseCMSCompactAtFullCollection 参数（默认开启），用于要进行 FullGC 时开启内存碎片的合并整理过程，还提供了一个-XX:CMSFullGCsBeforeCompaction，用于设置执行多少次不压缩的 FullGC 后，再进行一次带压缩的（默认值为 0）</li>
</ul>
<h5 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h5><p>此收集器是一款面向服务端应用的垃圾收集器，其特点有：</p>
<ul>
<li><code>并行与并发</code>，使用多核减少 STW 停顿时间，GC 动作通过并发方式让 Java 程序继续执行</li>
<li><code>分代收集</code></li>
<li><code>空间整合</code>，整体是基于”标记整理“算法实现的，局部是基于”复制“算法实现的，不会产生内存空间碎片</li>
<li><code>可预测的停顿</code>，可以指定在长度为 M 毫秒的时间片断内，垃圾收集时间不超过 N 毫秒</li>
</ul>
<p>G1 收集器将整个 Java 堆划分为多个大小相等的独立区域（Region），并跟踪各个 Region 里面的垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的时间，优先回收价值最大的 Region。每个 Region 是逻辑上连续的一段内存。结构如下：</p>
<p><img data-src="/uploads/in-post/java_memory/G1.png"></p>
<p>其中当新建对象大小超过 Region 大小一半时，会直接在一个或多个新的连续 Region 中分配此对象，并标记为 Humongous 对象。</p>
<h6 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h6><p>Region 的大小为 1M——32M 的 2 的 N 次幂，默认数量为 2048 个，如果 G1HeapRegionSize 为默认值，则会在堆初始化时计算 Region 的实际大小。</p>
<p>在 G1 收集器中，垃圾回收只回收一部分 Region，所以回收时需要知道 Region 之间的对象引用，在使用复制算法移动对象时，需要更新引用为对象的新地址。这种分代收集中，年轻代垃圾收集时，需要老年代到年轻代的引用记录，通常称为 Remembered Set。当虚拟机发现程序在对 Reference 类型的数据进行写操作时，会场生一个 Write Barrier 暂时中断写操作，检查 Reference 引用的对象是否处于不同的 Region 之间，如果是，则通过 CardTable 讲相关引用信息记录到被引用对象所属 Region 的 Remembered Set 中。</p>
<h6 id="GC-模式"><a href="#GC-模式" class="headerlink" title="GC 模式"></a>GC 模式</h6><p>G1 中一共有三种垃圾回收的模式：Young GC、Mixed GC 和 Full GC。</p>
<p><strong>Young GC</strong></p>
<p>对象优先在 Eden Region 中进行分配，当所有 Eden Region 被耗尽时，会触发一次 Young GC，存活的对象会被复制到 Survivor Region 中，空闲的 Region 被放入空闲列表中</p>
<p><strong>Mixed GC</strong></p>
<p>当越来越多的对象进入 Old Region 时，虚拟机会触发一次 Mixed GC，回收整个 Young Region 和<code>部分</code>Old Region，触发时机通过-XX:InitiatingHeapOccupancyPercent=N，则当老年代大小占整个堆的 N%时，会触发一次 Mixed GC，过程类似于 CMS</p>
<p><strong>Full GC</strong></p>
<p>如果对象内存分配速度过快，Mixed GC 来不及回收导致老年代被填满，会触发一次 Full GC，使用 Serial Old 方式进行垃圾回收</p>
<h6 id="G1-工作过程"><a href="#G1-工作过程" class="headerlink" title="G1 工作过程"></a>G1 工作过程</h6><p>G1 的工作过程如下：</p>
<ul>
<li>初始标记（Initial Marking）</li>
<li>并发标记（Concurrent Marking）</li>
<li>最终标记（Final Marking）</li>
<li>筛选回收（Live Data Counting and Evacuation）</li>
</ul>
<p><img data-src="/uploads/in-post/java_memory/G1_flow.png"></p>
<p>初始标记阶段仅仅只是标记一下 GC Roots 能够直接关联的对象，并且修改 TAMS（Next Top at Mark Start）的值，让下一阶段的用户程序并发运行的时候，能在正确可用的 Region 中创建新对象，这个阶段需要暂停线程。并发标记阶段从 GC Roots 进行可达性分析，找出存活的对象，与用户线程并发执行。最终标记阶段则是修正在并发标记阶段因为用户程序的并发执行而导致标记产生变动的那一部分记录，这部分记录被保存在 Remembered Set Logs 中，最终标记阶段再把 Logs 中的记录合并到 Remembered Set 中，这个阶段是并行执行的，需要暂停用户线程。最后在筛选阶段首先对各个 Region 的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间制定回收计划。</p>
<h4 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h4><ul>
<li>对象优先在 Eden 分配</li>
</ul>
<p>大多数情况下，对象在新生代的 Eden 区中分配，当 Eden 区空间不足时，虚拟机会发起一次 Minor GC</p>
<ul>
<li>大对象直接进入老年代</li>
</ul>
<p>所谓大对象，最典型的就是长字符串和数组。</p>
<ul>
<li>长期存活的对象进入老年代</li>
</ul>
<p>对象晋升到老年代的年龄阈值，可以通过-XX:MaxTenuringThreshold 设置，默认为 15 岁</p>
<ul>
<li>动态对象年龄判断</li>
</ul>
<p>如果在 Survivor 空间中相同年龄的所有对象大小的总和超过 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</p>
<p>参考</p>
<p>1、周志明，深入理解 Java 虚拟机：JVM 高级特性与最佳实践，机械工业出版社</p>
<p>2、占小狼，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wZjFmNWFkZmZkYzE=">G1 垃圾收集器介绍<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内存模型</tag>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 简介</title>
    <url>/2018/04/15/2018-04-15-spring-introduction/</url>
    <content><![CDATA[<blockquote>
<p>“本章将从宏观的层面上介绍 Spring。”</p>
</blockquote>
<h3 id="简化-Java-开发"><a href="#简化-Java-开发" class="headerlink" title="简化 Java 开发"></a>简化 Java 开发</h3><p>Spring 采取 4 种关键策略简化 Java 开发：</p>
<ul>
<li>基于 POJO 的轻量级和最小侵入性编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板式代码</li>
</ul>
<span id="more"></span>

<h4 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h4><p>Spring 不强迫实现 Spring 规范的接口或继承 Spring 规范的类，最坏的场景是使用了 Sprin 的注解，但他依旧是 POJO。</p>
<p>Spring 赋予 POJO 魔力的方式是通过 DI 来装配他们。</p>
<h4 id="依赖注（Dependenc-Injection）"><a href="#依赖注（Dependenc-Injection）" class="headerlink" title="依赖注（Dependenc Injection）"></a>依赖注（Dependenc Injection）</h4><p>依赖注入又可以称为控制反转（IOC，Inversion of Control），通过使用 DI，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象时进行设定，对象无需自行创建或管理他们的依赖关系。</p>
<p>依赖注入有四种方式：</p>
<ol>
<li>构造器注入</li>
<li>setter 注入</li>
<li>静态工厂的方法注入</li>
<li>实例工厂的方法注入</li>
</ol>
<p>DI 带来的最大收益是 <strong>松耦合</strong>，创建应用组件之间的行为通常称为 <code>装配</code>（wiring），Spring 支持使用 XM 文件和 Java 文件来进行装配</p>
<p>Spring 通过应用上下文（Applicaiton Context）装载 bea 的定义并把它们组装起来。Spring 应用上下文全权负责对象的创建和组装。</p>
<h4 id="应用切面"><a href="#应用切面" class="headerlink" title="应用切面"></a>应用切面</h4><p>面向切面编程（Aspect-Oriented Programming) 允许你把遍布应用各处的功能分离出来形成可重用的组件，可以使服务模块化，并以声明的方式将他们应用到他们需要影响的组件中去。</p>
<p>定义方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;beanname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcutId&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *.functionName(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcutId&quot;</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethodName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcutId&quot;</span> <span class="attr">method</span>=<span class="string">&quot;afterMethodName&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用模板消除样板式代码"><a href="#使用模板消除样板式代码" class="headerlink" title="使用模板消除样板式代码"></a>使用模板消除样板式代码</h4><p>Spring 的 JdbcTemplate 使得执行数据库操作时，避免传统的 JDBC 样板代码成为了可能。</p>
<h3 id="容纳你的-Bean"><a href="#容纳你的-Bean" class="headerlink" title="容纳你的 Bean"></a>容纳你的 Bean</h3><p>在基于 Spring 的应用中，应用对象生存在 Spring 容器中，Spring 容器负责创建对象，装配对象，配置对象管理他们的整个生命周期。</p>
<p>容器是 Spring 的核心，Spring 容器使用 DI 管理构成应用的组件，他会创建相互协作的组件之间的关联。</p>
<h4 id="使用应用上下文"><a href="#使用应用上下文" class="headerlink" title="使用应用上下文"></a>使用应用上下文</h4><p>Spring 自带多种类型的应用上下文，常用的有以下几种：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一个或多个基于 Java 的配置类中加载 Spring 应用上下文</li>
<li>AnnotationConfigWebApplicationContext：从一个或多个基于 Java 的配置类中加载 Spring Web 应用上下文</li>
<li>ClassPathXmlApplicationContext：从类路径下的一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义文件作为类资源</li>
<li>FileSystemXmlApplicationContext：从文件系统下的一个或多个 XMl 配置文件中加载上下文定义</li>
<li>XmlWebApplicationContex：从 Web 应用的一个或多个 XML 配置文件中加载上下文定义</li>
</ul>
<h4 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h4><p>Spring 容器中的 Bean 生命周期比较复杂，如下图：</p>
<p><img data-src="/uploads/in-post/spring-introduciton/bean_lifecycle.png"></p>
<h5 id="实例化-Bean"><a href="#实例化-Bean" class="headerlink" title="实例化 Bean"></a>实例化 Bean</h5><p>当客户向容器请求一个尚未初始化的 Bean 时，或初始化 Bean 时需要注入另一个尚未初始化的依赖时，容器就会调用 createBean 方法进行实例化，实例化对象呗包装在 BeanWrapper 对象中，BeanWrapper 提供了设置对象属性的接口，这个步骤没有进行依赖注入。</p>
<h5 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h5><p>Spring 根据 BeanDefinition 中的信息，将值和 Bean 的引用通过 BeanWrapper 提供的设置属性的接口注入到 Bean 对应的属性中。</p>
<h5 id="调用-setBeanName-方法"><a href="#调用-setBeanName-方法" class="headerlink" title="调用 setBeanName() 方法"></a>调用 setBeanName() 方法</h5><p>如果 Bean 实现了 BeanNameAware 接口，Spring 将 Bean 的 ID 传递给 setBeanName(String beanId) 方法</p>
<h5 id="调用-setBeanFactory-方法"><a href="#调用-setBeanFactory-方法" class="headerlink" title="调用 setBeanFactory() 方法"></a>调用 setBeanFactory() 方法</h5><p>如果 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 setBeanFactory() 方法，传入 BeanFactory 容器。</p>
<h5 id="调用-setApplicationContext-方法"><a href="#调用-setApplicationContext-方法" class="headerlink" title="调用 setApplicationContext() 方法"></a>调用 setApplicationContext() 方法</h5><p>如果 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 setApplicationContext() 方法，传入 Bean 所在的应用上下文的引用。</p>
<h5 id="调用-BeanPostProcessor-接口的-postProcessBeforeInitialization-方法"><a href="#调用-BeanPostProcessor-接口的-postProcessBeforeInitialization-方法" class="headerlink" title="调用 BeanPostProcessor 接口的 postProcessBeforeInitialization() 方法"></a>调用 BeanPostProcessor 接口的 postProcessBeforeInitialization() 方法</h5><p>如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 postProcessBeforeInitialization() 方法，当前正在初始化的对象会被传递进来，我们就可以对这个 Bean 做任何处理，此函数会先于 InitializationBean 执行，因此称为前置处理，<code>所有 Aware 接口的注入</code> 就是在这一步完成的。</p>
<h5 id="调用-InitializingBean-接口的-afterPropertiesSet-方法"><a href="#调用-InitializingBean-接口的-afterPropertiesSet-方法" class="headerlink" title="调用 InitializingBean 接口的 afterPropertiesSet() 方法"></a>调用 InitializingBean 接口的 afterPropertiesSet() 方法</h5><p>当前置处理完成后进入本阶段，本阶段可以在 Bean 正式构建前增加我们自定义的逻辑，但是由于并没有把 Bean 对象传递进来，因此本阶段无法处理对象本身，只能增加一些额外的逻辑。</p>
<p>若要使用他，需要让 Bean 实现该接口，并把要增加的逻辑写入该函数当中，Spring 火灾前置处理完成后检测当前 Bean 是否实现了该接口，并执行该函数。</p>
<p>类似地，Spring 为 Bean 的配置提供了 init-method 属性，该属性指定了在本阶段需要执行的函数名，Spring 会在初始化阶段执行设置的函数。init-method 本质上也是使用了 InitializingBean 接口。</p>
<h5 id="调用-BeanPostProcessor-接口的-postProcessAfterInitialization-方法"><a href="#调用-BeanPostProcessor-接口的-postProcessAfterInitialization-方法" class="headerlink" title="调用 BeanPostProcessor 接口的 postProcessAfterInitialization() 方法"></a>调用 BeanPostProcessor 接口的 postProcessAfterInitialization() 方法</h5><p>如果 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 postProcessAfterInitialization() 方法，当前正在初始化的 Bean 对象会被传递进来，我们可以对这个对象做任何处理，这个函数回来 InitializingBean 完成后执行，因此成为后置处理。</p>
<h5 id="准备就绪"><a href="#准备就绪" class="headerlink" title="准备就绪"></a>准备就绪</h5><p>此时，Bean 已经准备就绪，可以被应用程序使用了，他们将一直驻留在应用上下文中，直到被该应用上下文销毁。</p>
<h5 id="调用-DisposableBean-接口的-destroy-方法"><a href="#调用-DisposableBean-接口的-destroy-方法" class="headerlink" title="调用 DisposableBean 接口的 destroy() 方法"></a>调用 DisposableBean 接口的 destroy() 方法</h5><p>如果 Bean 实现了 DisposableBean 接，Spring 将调它的 destroy()方法，可以在 Bean 销毁前执行指定的逻辑，类似的，通过给 destroy-method 属性指定函数，可以在 Bean 小回迁执行这个函数</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--简介</title>
    <url>/2018/02/25/2018-02-25-design-pattern-intro/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>所谓<code>模式</code>，就是在特定环境下人们对某类重复出现的问题提出的一套有效的解决方案。</p>
<p>而设计模式(<code>Design Pattern</code>)，则是针对软件设计过程中，可能遇到的重复问题的合理解决方案。</p>
<p>设计模式提出的根本目的就是解决现实生活中的问题，每种设计模式都有对应的现实问题及其解决方案，找到对应的问题便能够快速的利用设计模式进行解决。</p>
<p>设计模式一般包含模式名称、解决的问题，解决方案和应对效果等部分。</p>
<p>使用设计模式的目的是为了提高代码的可重用性；按照一定的规则编写代码，能够让自己的代码更加容易被其他编程人员所理解；同时，在一定的规则内编写代码，可以在一定程度上提升代码的可靠性。</p>
<span id="more"></span>

<h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>根据设计模式的参考书<code>Design Patterns - Elements of Reusable Object-Oriented Software</code>中所提到的，总共有 23 种设计模式。</p>
<p>常用设计模式一览：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>模式名称</th>
<th>使用频率</th>
</tr>
</thead>
<tbody><tr>
<td>创建型模式</td>
<td><a href="/2018/06/15/2018-06-15-design-pattern-factory-method/">工厂方法模式 Factory Method Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2018/06/25/2018-06-25-design-pattern-abstract-factory/">抽象工厂模式 Abstract Factory Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2016/03/28/2016-03-28-singleton-eight-type/">单例模式 Singleton Pattern</a></td>
<td>★★★★☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td><a href="/2018/06/16/2018-06-16-design-pattern-factory-method/">简单工厂模式 Simple Factory Pattern</a></td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td>原型模式 Prototype Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>创建型模式</td>
<td>建造者模式 Builder Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>–</td>
<td>–</td>
<td>–</td>
</tr>
<tr>
<td>结构型模式</td>
<td>外观模式 Façade Pattern</td>
<td>★★★★★</td>
</tr>
<tr>
<td>结构型模式</td>
<td>代理模式 Proxy Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>适配器模式 Adapter Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>组合模式 Composite Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>桥接模式 Bridge Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>装饰模式 Decorator Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>结构型模式</td>
<td>享元模式 Flyweight Pattern</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>–</td>
<td>–</td>
<td>–</td>
</tr>
<tr>
<td>行为型模式</td>
<td>迭代器模式 Iterator Pattern</td>
<td>★★★★★</td>
</tr>
<tr>
<td>行为型模式</td>
<td><a href="/2018/06/26/2018-06-26-design-pattern-observer/">观察者模式 Observer Pattern</a></td>
<td>★★★★★</td>
</tr>
<tr>
<td>行为型模式</td>
<td><a href="/2018/06/27/2018-06-27-design-pattern-strategy/">策略模式 Strategy Pattern</a></td>
<td>★★★★☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>命令模式 Command Pattern</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>模板方法模式 Template Method Patter</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>状态模式 State Pattern</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>中介者模式 Mediator Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>备忘录模式 Memento Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>职责链模式 Chain of Responsibility Pattern</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>访问者模式 Visitor Pattern</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>行为型模式</td>
<td>解释器模式 Interpreter Pattern</td>
<td>★☆☆☆☆</td>
</tr>
</tbody></table>
<h3 id="面向对象设计的几大原则"><a href="#面向对象设计的几大原则" class="headerlink" title="面向对象设计的几大原则"></a>面向对象设计的几大原则</h3><h4 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h4><p>简单来说就是一个类只负责一个功能，这样一个类的职责就不会出现大量耦合，重用性也会更高。</p>
<h4 id="开闭原则（Open-Closed-Principle）"><a href="#开闭原则（Open-Closed-Principle）" class="headerlink" title="开闭原则（Open-Closed Principle）"></a>开闭原则（Open-Closed Principle）</h4><p>一个软件应当对扩展开放，而对修改关闭。即软件应当尽量在不修改原代码的基础上进行扩展。想要达到这个效果，需要使用接口和抽象类。</p>
<h4 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h4><p>任何可以使用基类的地方，其子类一定也能够被使用。按照里氏原则，子类必须实现父类的所有方法，当我们设计父类时，尽量把父类设计为抽象类或接口，这样运行时子类替换父类实例，可以很轻松的扩展系统功能。</p>
<h4 id="依赖倒置原则（Dependency-Inversion-Principle）"><a href="#依赖倒置原则（Dependency-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle）"></a>依赖倒置原则（Dependency Inversion Principle）</h4><p>抽象不应该依赖于细节，而细节应该依赖于抽象。即我们应该面向接口编程，而不是针对实现编程。一个具体类应当只实现接口或抽象类中声明过的方法，而不应给出多余的方法。</p>
<h4 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h4><p>使用多个隔离的接口，而不是使用单一的接口，即当一个接口太大时，我们应当将其分割为隔离的多个接口，可以减小类之间的耦合。</p>
<h4 id="合成复用原则（Composition-Aggregate-Reuse-Principle）"><a href="#合成复用原则（Composition-Aggregate-Reuse-Principle）" class="headerlink" title="合成复用原则（Composition/Aggregate Reuse Principle）"></a>合成复用原则（Composition/Aggregate Reuse Principle）</h4><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h4 id="迪米特法则（Law-of-Demeter）"><a href="#迪米特法则（Law-of-Demeter）" class="headerlink" title="迪米特法则（Law of Demeter）"></a>迪米特法则（Law of Demeter）</h4><p>一个软件的实体应当尽可能少的和其他实体发生相互作用，而成为一个独立的模块。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA和gradle创建超市管理系统（贰）-- 登录注册功能</title>
    <url>/2017/02/05/2017-02-05-idea-gradle-tssm-supermarket-manage-system-2/</url>
    <content><![CDATA[<blockquote>
<p>“IDEA是jetbrains公司开发的Java开发IDE，功能齐全。使用IDEA搭建SSM开发环境简单有效。本项目基于Spring，Spring MVC和MyBatis进行开发，模板引擎为Thymeleaf。”</p>
</blockquote>
<h3 id="主要功能概述"><a href="#主要功能概述" class="headerlink" title="主要功能概述"></a>主要功能概述</h3><p>因为是为超市定制的管理系统，所以只会有内部人员进行使用，这就意味着新用户是需要拥有权限的人来进行添加，故需要实现的功能主要包括以下两点：</p>
<ul>
<li>用户添加</li>
<li>用户登录</li>
</ul>
<p>这两点功能中又包含了一些更细小的功能，将在后续章节进行详细的介绍。</p>
<span id="more"></span>

<h3 id="后台前端模板"><a href="#后台前端模板" class="headerlink" title="后台前端模板"></a>后台前端模板</h3><p>由于本人不擅长前端页面的编写，故采用了开源的后台系统模板进行改造，后台系统模板的名称为<span class="exturl" data-url="aHR0cHM6Ly9jb2xvcmxpYi5jb20vcG9seWdvbi9nZW50ZWxlbGxhL2luZGV4Lmh0bWw=">Gentallela<i class="fa fa-external-link-alt"></i></span>，下载地址是在作者的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1aWtpbnNoL2dlbnRlbGVsbGE=">Github<i class="fa fa-external-link-alt"></i></span>，感兴趣的同学可以前往下载。</p>
<h3 id="用户添加功能"><a href="#用户添加功能" class="headerlink" title="用户添加功能"></a>用户添加功能</h3><p>用户添加功能分为以下几个步骤进行完成：</p>
<ul>
<li>添加数据库</li>
<li>编写对应的model</li>
<li>编写对应的mapper</li>
<li>编写对应的service</li>
<li>编写对应的controller</li>
<li>编写对应的js请求和前端页面</li>
</ul>
<h4 id="添加数据库"><a href="#添加数据库" class="headerlink" title="添加数据库"></a>添加数据库</h4><p>首先需要建立一个user表，用于存储用户信息。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `<span class="keyword">password</span>` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `salt` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;盐&#x27;</span>,</span><br><span class="line">  `authority` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户身份&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;账户状态&#x27;</span>,</span><br><span class="line">  `created_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `updated_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>其中<code>salt</code>的作用是和<code>password</code>一起作用生成一个不可破解的密码，加密方式用的是<code>MD5</code>加密。</p>
<h4 id="编写User类"><a href="#编写User类" class="headerlink" title="编写User类"></a>编写User类</h4><p>User类中的属性和数据库的字段是一一对应的。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> email;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salt;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> Date updatedTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要生成所有属性的get和set方法。</span></span><br></pre></td></tr></table></figure>

<h4 id="编写UserMapper接口和UserMapper-xml文件"><a href="#编写UserMapper接口和UserMapper-xml文件" class="headerlink" title="编写UserMapper接口和UserMapper.xml文件"></a>编写UserMapper接口和UserMapper.xml文件</h4><p>UserMapper接口为UserService提供可以调用的数据库操作接口。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    // 由于接口方法默认且必须是public的，所以无需添加此关键字</span><br><span class="line">    <span class="keyword">User</span> <span class="title">selectByName</span>(<span class="keyword">String</span> name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">User</span> <span class="title">selectByEmail</span>(<span class="keyword">String</span> name);</span><br><span class="line"></span><br><span class="line">    int addUser(<span class="keyword">User</span> <span class="title">user</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而UserMapper.xml用于实现具体的数据库调用方法。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org/DTD Mapper 3.0&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- namespace必须和UserMapper接口相对应 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.edu.bupt.wen.mapper.UserMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 自定义返回结果集 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 由于Mybatis无法自动将DateTime类型和java.util.Date类型进行自动映射，故需要手动配置 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;salt&quot;</span> <span class="attr">column</span>=<span class="string">&quot;salt&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DATE&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;updatedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;updated_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DATE&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertFields&quot;</span>&gt;</span>username, password, email, salt, status, created_time, updated_time<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectFields&quot;</span>&gt;</span>id, <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertFields&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 方法的id必须和UserMapper接口中定义的方法名相同 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- parameterType必须和传入的参数类型相同，若要传多个参数需要在Mapper接口中加@Param注解 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        SELECT</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectFields&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        FROM</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        WHERE username = #</span><span class="template-variable">&#123;username&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmail&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        SELECT</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectFields&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        FROM</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        WHERE email = #</span><span class="template-variable">&#123;email&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        INSERT INTO</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertFields&quot;</span>/&gt;</span>)</span></span><br><span class="line"><span class="language-xml">        VALUES</span></span><br><span class="line"><span class="language-xml">        (#</span><span class="template-variable">&#123;username&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;password&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;email&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;salt&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;status&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;createdTime&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;updatedTime&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="编写UserService"><a href="#编写UserService" class="headerlink" title="编写UserService"></a>编写UserService</h4><p>UserService调用UserMapper的方法，并为UserController提供返回值。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">    // 利用slf4j生成<span class="keyword">log</span>信息</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(UserService.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span> getUserByName(String username) &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByName(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add a new user</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param username</span></span><br><span class="line"><span class="comment">     * @param email</span></span><br><span class="line"><span class="comment">     * @return map</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> Map&lt;String, <span class="keyword">Object</span>&gt; addUser(String username, String email) &#123;</span><br><span class="line">        logger.<span class="keyword">info</span>(&quot;UserService addUser&quot;);</span><br><span class="line">        Map&lt;String, <span class="keyword">Object</span>&gt; map = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;username can not be empty&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userMapper.selectByName(username) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;username existed&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(email)) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;email can not be empty&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userMapper.selectByEmail(email) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;email existed&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        // 随机生成一个四位数的盐</span><br><span class="line">        <span class="type">int</span> salt = (<span class="type">int</span>)Math.random() * <span class="number">8999</span> + <span class="number">1000</span>;</span><br><span class="line">        StringBuilder sb = <span class="built_in">new</span> StringBuilder();</span><br><span class="line">        sb.append(MD5Util.md5(username + &quot;123&quot;)).append(String.valueOf(salt));</span><br><span class="line">        String <span class="keyword">password</span> = MD5Util.md5(sb.toString());</span><br><span class="line">        <span class="type">int</span> status = <span class="keyword">Constant</span>.Status.NEED_CHANGE_PWD.getIndex();</span><br><span class="line">        <span class="type">Date</span> <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername(username);</span><br><span class="line">        <span class="keyword">user</span>.setPassword(<span class="keyword">password</span>);</span><br><span class="line">        <span class="keyword">user</span>.setEmail(email);</span><br><span class="line">        <span class="keyword">user</span>.setSalt(salt);</span><br><span class="line">        <span class="keyword">user</span>.setStatus(status);</span><br><span class="line">        <span class="keyword">user</span>.setCreatedTime(<span class="type">date</span>);</span><br><span class="line">        <span class="keyword">user</span>.setUpdatedTime(<span class="type">date</span>);</span><br><span class="line"></span><br><span class="line">        userMapper.addUser(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中使用的MD5Util为自己编写的MD5加密算法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">md5</span><span class="params">(String pw)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拿到一个MD5转换器（如果想要SHA1参数换成”SHA1”）</span></span><br><span class="line">            MessageDigest messageDigest =MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            <span class="comment">// 输入的字符串转换成字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] inputByteArray = pw.getBytes();</span><br><span class="line">            <span class="comment">// inputByteArray是输入字符串转换得到的字节数组</span></span><br><span class="line">            messageDigest.update(inputByteArray);</span><br><span class="line">            <span class="comment">// 转换并返回结果，也是字节数组，包含16个元素</span></span><br><span class="line">            <span class="keyword">byte</span>[] resultByteArray = messageDigest.digest();</span><br><span class="line">            <span class="comment">// 字符数组转换成字符串返回</span></span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">byteArrayToHex</span><span class="params">(resultByteArray)</span></span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">byteArrayToHex</span><span class="params">(<span class="keyword">byte</span>[] byteArray)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先初始化一个字符数组，用来存放每个16进制字符</span></span><br><span class="line">        <span class="keyword">char</span>[] hexDigits = &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span> &#125;;</span><br><span class="line">        <span class="comment">// new一个字符数组，这个就是用来组成结果字符串的（解释一下：一个byte是八位二进制，也就是2位十六进制字符（2的8次方等于16的2次方））</span></span><br><span class="line">        <span class="keyword">char</span>[] resultCharArray =<span class="keyword">new</span> <span class="keyword">char</span>[byteArray.length * <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 遍历字节数组，通过位运算（位运算效率高），转换成字符放到字符数组中去</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : byteArray) &#123;</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">            resultCharArray[index++] = hexDigits[b&amp; <span class="number">0xf</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字符数组组合成字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(resultCharArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Constant为自己编写的常量枚举魔法数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> <span class="keyword">Constant</span> &#123;</span><br><span class="line">  <span class="built_in">public</span> enum Status &#123;</span><br><span class="line">    AVAILABLE(&quot;available&quot;, <span class="number">0</span>),</span><br><span class="line">    UNAVAILABLE(&quot;unavailable&quot;, <span class="number">1</span>),</span><br><span class="line">    NEED_CHANGE_PWD(&quot;need change password&quot;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String <span class="type">name</span>;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> <span class="keyword">index</span>;</span><br><span class="line"></span><br><span class="line">    Status(String <span class="type">name</span>, <span class="type">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">        this.<span class="keyword">index</span> = <span class="keyword">index</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> getIndex() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static String getNameByIndex(<span class="type">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Status c : Status.<span class="keyword">values</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getIndex() == <span class="keyword">index</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写UserController"><a href="#编写UserController" class="headerlink" title="编写UserController"></a>编写UserController</h4><p>UserController用于处理用户请求并返回数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> final <span class="title class_">Logger</span> logger = <span class="title class_">LoggerFactory</span>.<span class="title function_">getLogger</span>(<span class="title class_">UserController</span>.<span class="property">class</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title class_">UserService</span> userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(path = &#123;<span class="string">&quot;/addUser&quot;</span>&#125;, method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">GET</span>&#125;)</span><br><span class="line">  <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">addUser</span>(<span class="params">Model model</span>) &#123;</span><br><span class="line">    <span class="comment">// model用于向view层返回数据</span></span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;addUser&quot;</span>);</span><br><span class="line">    <span class="comment">// 返回值为模板所在目录及其名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/addUser&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(path = &#123;<span class="string">&quot;/addUser&quot;</span>&#125;, method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">POST</span>&#125;)</span><br><span class="line">  <span class="meta">@ResponseBody</span> <span class="comment">// 加上此字段后表明返回的数据直接发送给浏览器而不经过模板引擎渲染</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">addUser</span>(<span class="params"><span class="meta">@RequestParam</span>(<span class="string">&quot;username&quot;</span>) <span class="built_in">String</span> username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam</span>(<span class="string">&quot;email&quot;</span>) <span class="built_in">String</span> email,</span></span><br><span class="line"><span class="params">                        HttpServletResponse response</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; map = userService.<span class="title function_">addUser</span>(username, email);</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">containsKey</span>(<span class="string">&quot;msg&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">JsonUtil</span>.<span class="title function_">getJSONString</span>(<span class="number">1</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JsonUtil</span>.<span class="title function_">getJSONString</span>(<span class="number">0</span>, map);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">        logger.<span class="title function_">error</span>(<span class="string">&quot;add user failed!&quot;</span>);</span><br><span class="line">        <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;add user failed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JsonUtil</span>.<span class="title function_">getJSONString</span>(<span class="number">1</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JsonUtil为自己编写的将数据转换为json字符串的工具类。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtil</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> final <span class="title class_">Logger</span> logger = <span class="title class_">LoggerFactory</span>.<span class="title function_">getLogger</span>(<span class="title class_">JsonUtil</span>.<span class="property">class</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with certain code</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> <span class="variable">wenzhiquan</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">code</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getJSONString</span>(<span class="params">int code</span>) &#123;</span><br><span class="line">      <span class="title class_">JSON</span><span class="built_in">Object</span> json = <span class="keyword">new</span> <span class="title class_">JSON</span><span class="built_in">Object</span>();</span><br><span class="line">      json.<span class="title function_">put</span>(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">      <span class="keyword">return</span> json.<span class="title function_">toJSONString</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with code and message</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> <span class="variable">wenzhiquan</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">code</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">msg</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getJSONString</span>(<span class="params">int code, <span class="built_in">String</span> msg</span>) &#123;</span><br><span class="line">      <span class="title class_">JSON</span><span class="built_in">Object</span> json = <span class="keyword">new</span> <span class="title class_">JSON</span><span class="built_in">Object</span>();</span><br><span class="line">      json.<span class="title function_">put</span>(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">      json.<span class="title function_">put</span>(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">      <span class="keyword">return</span> json.<span class="title function_">toJSONString</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a json string with code and map</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> <span class="variable">wenzhiquan</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">code</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">map</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> json String</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">String</span> <span class="title function_">getJSONString</span>(<span class="params">int code, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map</span>) &#123;</span><br><span class="line">      <span class="title class_">JSON</span><span class="built_in">Object</span> json = <span class="keyword">new</span> <span class="title class_">JSON</span><span class="built_in">Object</span>();</span><br><span class="line">      json.<span class="title function_">put</span>(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">      <span class="keyword">for</span> (<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; <span class="attr">entry</span>: map.<span class="title function_">entrySet</span>()) &#123;</span><br><span class="line">          json.<span class="title function_">put</span>(entry.<span class="title function_">getKey</span>(), entry.<span class="title function_">getValue</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> json.<span class="title function_">toJSONString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写对应的js请求和前端页面"><a href="#编写对应的js请求和前端页面" class="headerlink" title="编写对应的js请求和前端页面"></a>编写对应的js请求和前端页面</h4><p>前端页面分为base，nav和sidebar，和页面内容addUser四大部分。</p>
<p>nav:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/base::common_header(_)&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- top navigation --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;top_nav&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top_nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav_menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav toggle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;menu_toggle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user-profile dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                       <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.jpg&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/img/default.png&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;user.username&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot; fa fa-angle-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu dropdown-usermenu pull-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span> Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge bg-red pull-right&quot;</span>&gt;</span>50%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-sign-out pull-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Log Out<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- /top navigation --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>siderbar:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/base::common_header(_)&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 left_col&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left_col scroll-view&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar nav_title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 0;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">class</span>=<span class="string">&quot;site_title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-barcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>SMS<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- menu profile quick info --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;profile&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;profile_pic&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/statics/img/img.jpg&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/img/default.png&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">class</span>=<span class="string">&quot;img-circle profile_img&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;profile_info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Welcome,<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:if</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;user.username&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- /menu profile quick info --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- sidebar menu --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar-menu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main_menu_side hidden-print main_menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>General<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav side-menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Home <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-chevron-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav child_menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Authority <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-chevron-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav child_menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;form.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">addUser</span>&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>Add New User<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- /sidebar menu --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- menu footer buttons --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-footer hidden-small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Settings&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-cog&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">title</span>=<span class="string">&quot;FullScreen&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-fullscreen&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Lock&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-eye-close&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Logout&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-off&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- /menu footer buttons --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>base:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">&quot;common_header(links)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- Meta, title, CSS, favicons, etc. --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;title&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- Common styles and scripts --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/css/bootstrap.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/font-awesome/css/font-awesome.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/css/custom.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/css/main.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:replace</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;links&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">th:fragment</span>=<span class="string">&quot;common_body(content, scripts)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-md&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/sidebar::sidebar&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/nav::top_nav&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- page content --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right_col&quot;</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">th:include</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;content&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- /page content --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- footer content --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ©2017 All Rights Reserved</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span>Powered By <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://wenzhiquan.github.io&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                                      <span class="attr">target</span>=<span class="string">&quot;blank&quot;</span>&gt;</span>Wen Zhiquan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- /footer content --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- jQuery --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vendors/jquery/dist/jquery.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/jquery/dist/jquery.min.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vendors/bootstrap/dist/js/bootstrap.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/js/bootstrap.min.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- Custom Theme Scripts --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../build/js/custom.min.js&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/custom.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:replace</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;scripts&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>addUser:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/base::common_header(~&#123;::link&#125;</span><span class="language-xml"><span class="tag"><span class="string">)&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- iCheck --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../vendors/iCheck/skins/flat/green.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/iCheck/skins/flat/green.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- bootstrap-wysiwyg --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../vendors/google-code-prettify/bin/prettify.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/google-code-prettify/bin/prettify.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- Select2 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../vendors/select2/dist/css/select2.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/select2/dist/css/select2.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- Switchery --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../vendors/switchery/dist/switchery.min.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/switchery/dist/switchery.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- starrr --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../vendors/starrr/dist/starrr.css&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/starrr/dist/starrr.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/base::common_body(~&#123;::content&#125;</span><span class="language-xml"><span class="tag"><span class="string">, ~</span></span></span><span class="template-variable">&#123;::script&#125;</span><span class="language-xml"><span class="tag"><span class="string">)&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title_left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Add new user<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12 col-sm-12 col-xs-12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;x_panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;x_content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;add-user-form&quot;</span> <span class="attr">data-parsley-validate</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                              <span class="attr">class</span>=<span class="string">&quot;form-horizontal form-label-left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">class</span>=<span class="string">&quot;required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-sm-6 col-xs-12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control col-md-7 col-xs-12&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                           <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter the username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                           <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">class</span>=<span class="string">&quot;required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-sm-6 col-xs-12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter the email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                           <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control col-md-7 col-xs-12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ln_solid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-sm-6 col-xs-12 col-md-offset-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">id</span>=<span class="string">&quot;clear-btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit-btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;script&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- validator --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vendors/validator/validator.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/validator/validator.min.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/authority/addUser.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/layer/layer.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>addUser.js:</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wenzhiquan on 16/7/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>),</span><br><span class="line">        email = $(<span class="string">&quot;#email&quot;</span>),</span><br><span class="line">        clearBtn = $(<span class="string">&quot;#clear-btn&quot;</span>),</span><br><span class="line">        submitBtn = $(<span class="string">&quot;#submit-btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the validator function</span></span><br><span class="line">    validator.message.<span class="built_in">date</span> = <span class="string">&#x27;not a real date&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate a field on &quot;blur&quot; event, a &#x27;select&#x27; on &#x27;change&#x27; event &amp; a &#x27;.reuired&#x27; classed multifield on &#x27;keyup&#x27;:</span></span><br><span class="line">    $(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">        .on(<span class="string">&#x27;blur&#x27;</span>, <span class="string">&#x27;input[required], input.optional, select.required&#x27;</span>, validator.checkField)</span><br><span class="line">        .on(<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;select.required&#x27;</span>, validator.checkField);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;.multi.required&#x27;</span>).on(<span class="string">&#x27;keyup blur&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        validator.checkField.apply($(this).siblings().last()[<span class="number">0</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    submitBtn.click(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> submit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluate the form using generic validating</span></span><br><span class="line">        <span class="keyword">if</span> (!validator.checkAll($(<span class="string">&#x27;form&#x27;</span>))) &#123;</span><br><span class="line">            submit = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(submit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (submit) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;addUser&#x27;</span>,<span class="comment">// 跳转到 action</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    <span class="attr">username</span>: username.val(),</span><br><span class="line">                    <span class="attr">email</span>: email.val(),</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.code == <span class="number">0</span>) &#123;</span><br><span class="line">                        layer.msg(<span class="string">&#x27;Success!&#x27;</span>, &#123;</span><br><span class="line">                            <span class="attr">icon</span>: <span class="number">1</span>,</span><br><span class="line">                            <span class="attr">time</span>: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.msg(<span class="string">&#x27;Failed!&#x27;</span>, &#123;</span><br><span class="line">                            <span class="attr">icon</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">time</span>: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    layer.msg(<span class="string">&#x27;Error!&#x27;</span>, &#123;</span><br><span class="line">                        <span class="attr">time</span>: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    clearBtn.click(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        username.val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        email.val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img data-src="/uploads/in-post/sms/addUser.png" alt="addUser"></p>
<h3 id="用户登录功能"><a href="#用户登录功能" class="headerlink" title="用户登录功能"></a>用户登录功能</h3><p>因为已经添加过User表并完成了model和mapper的编写，用户登录功能分为以下几个步骤进行完成：</p>
<ul>
<li>添加Token数据库表及对应model和mapper</li>
<li>编写对应的service</li>
<li>编写对应的controller</li>
<li>编写对应的js请求和前端页面</li>
<li>编写登录拦截器</li>
</ul>
<h4 id="添加Token数据库表及Token-model和TokenMapper"><a href="#添加Token数据库表及Token-model和TokenMapper" class="headerlink" title="添加Token数据库表及Token model和TokenMapper"></a>添加Token数据库表及Token model和TokenMapper</h4><p>由于需要保持用户的登录状态，并且不能把用户信息保存在浏览器中，故需要在服务器端增加一个token字段，作为识别用户的唯一信息，可以保证用户登录时不用再次输入用户名密码。</p>
<p>首先，需要在数据库中增加Token表，用于存储token信息：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `token` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;token id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;user id&#x27;</span>,</span><br><span class="line">  `token` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;token content&#x27;</span>,</span><br><span class="line">  `expired_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;token expired time&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>表中的<code>status</code>字段用于指示该<code>token</code>是否可用。</p>
<p>接着，类似于<code>User</code>类，需要生成一个<code>Token</code>的实体类：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Token</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="keyword">private</span> Date expiredTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要生成所有属性的get和set方法。</span></span><br></pre></td></tr></table></figure>

<p>类似的，需要编写<code>TokenMapper</code>文件和相应的<code>xml</code>文件：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Repository</span></span><br><span class="line">public interface TokenMapper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">Token</span> <span class="selector-tag">selectByToken</span>(String token);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">addToken</span>(Token token);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">updateStatus</span>(<span class="variable">@Param</span>(<span class="string">&quot;status&quot;</span>)int status, <span class="variable">@Param</span>(<span class="string">&quot;token&quot;</span>)String token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org/DTD Mapper 3.0&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.edu.bupt.wen.mapper.TokenMapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 自定义返回结果集 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;tokenMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Token&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;token&quot;</span> <span class="attr">column</span>=<span class="string">&quot;token&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;expiredTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;expired_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DATE&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span>token<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertFields&quot;</span>&gt;</span>user_id, token, expired_time, status<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectFields&quot;</span>&gt;</span>id, <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByToken&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;tokenMap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        SELECT</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        FROM</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        WHERE token = #</span><span class="template-variable">&#123;token&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addToken&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Token&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        INSERT INTO</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">        VALUES</span></span><br><span class="line"><span class="language-xml">        (#</span><span class="template-variable">&#123;userId&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;token&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;expiredTime&#125;</span><span class="language-xml">, #</span><span class="template-variable">&#123;status&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStatus&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        UPDATE</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        SET status = #</span><span class="template-variable">&#123;status&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        WHERE token = #</span><span class="template-variable">&#123;token&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>至此，<code>Token</code>相关内容基本完成。</p>
<h4 id="编写UserService类"><a href="#编写UserService类" class="headerlink" title="编写UserService类"></a>编写UserService类</h4><p>登录和登出是一对必不可少的操作。故为UserService类增加login和logout方法，除此之外，需要保存用户登录状态，故需要增加生成token字段的方法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * settle the login request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param username</span></span><br><span class="line"><span class="comment">     * @param password</span></span><br><span class="line"><span class="comment">     * @return map</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> Map&lt;String, <span class="keyword">Object</span>&gt; <span class="keyword">login</span>(String username, String <span class="keyword">password</span>) &#123;</span><br><span class="line">        logger.<span class="keyword">info</span>(&quot;UserService login&quot;);</span><br><span class="line">        Map&lt;String, <span class="keyword">Object</span>&gt; map = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        logger.<span class="keyword">info</span>(username);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;username can not be empty&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(<span class="keyword">password</span>)) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;password can not be empty&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = userMapper.selectByName(username);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">user</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;username does not exist&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.<span class="keyword">info</span>(<span class="keyword">user</span>.getUsername());</span><br><span class="line">        StringBuffer stringBuffer = <span class="built_in">new</span> StringBuffer();</span><br><span class="line">        stringBuffer.append(MD5Util.md5(<span class="keyword">password</span>)).append(<span class="keyword">user</span>.getSalt());</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">user</span>.getPassword().equals(MD5Util.md5(stringBuffer.toString()))) &#123;</span><br><span class="line">            map.put(&quot;msg&quot;, &quot;wrong password&quot;);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = generateToken(<span class="keyword">user</span>.getId());</span><br><span class="line">        map.put(&quot;token&quot;, token);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate login token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param userId</span></span><br><span class="line"><span class="comment">     * @return token</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> String generateToken(<span class="type">int</span> userId) &#123;</span><br><span class="line">        Token token = <span class="built_in">new</span> Token();</span><br><span class="line">        token.setUserId(userId);</span><br><span class="line">        <span class="type">Date</span> <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="type">date</span>.setTime(<span class="type">date</span>.getTime() + <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line">        token.setExpiredTime(<span class="type">date</span>);</span><br><span class="line">        token.setToken(<span class="type">UUID</span>.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;));</span><br><span class="line">        token.setStatus(<span class="number">0</span>);</span><br><span class="line">        tokenMapper.addToken(token);</span><br><span class="line">        <span class="keyword">return</span> token.getToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logout and set token status to 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param token</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @author wenzhiquan</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> logout(String token) &#123;</span><br><span class="line">        tokenMapper.updateStatus(<span class="number">1</span>, token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写UserController类"><a href="#编写UserController类" class="headerlink" title="编写UserController类"></a>编写UserController类</h4><p>同样的，需要在<code>UserController</code>类中增加登录登出相关代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">&quot;/login&quot;</span>&#125;, method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">GET</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">login</span>(<span class="params">Model model</span>) &#123;</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">&quot;/login&quot;</span>&#125;, method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">POST</span>&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@RequestParam</span>(<span class="string">&quot;username&quot;</span>) <span class="built_in">String</span> username,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam</span>(<span class="string">&quot;password&quot;</span>) <span class="built_in">String</span> password,</span></span><br><span class="line"><span class="params">                    HttpServletResponse response</span>) &#123;</span><br><span class="line">    logger.<span class="title function_">info</span>(username);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; map = userService.<span class="title function_">login</span>(username, password);</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">containsKey</span>(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">            <span class="title class_">Cookie</span> cookie = <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;token&quot;</span>, map.<span class="title function_">get</span>(<span class="string">&quot;token&quot;</span>).<span class="title function_">toString</span>());</span><br><span class="line">            cookie.<span class="title function_">setPath</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            response.<span class="title function_">addCookie</span>(cookie);</span><br><span class="line">            map.<span class="title function_">put</span>(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;login successful!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JsonUtil</span>.<span class="title function_">getJSONString</span>(<span class="number">0</span>, map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">        logger.<span class="title function_">error</span>(<span class="string">&quot;login failed!&quot;</span>);</span><br><span class="line">        <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;login failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JsonUtil</span>.<span class="title function_">getJSONString</span>(<span class="number">1</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">&quot;/logout&quot;</span>&#125;, method = &#123;<span class="title class_">RequestMethod</span>.<span class="property">GET</span>, <span class="title class_">RequestMethod</span>.<span class="property">POST</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">logout</span>(<span class="params"><span class="meta">@CookieValue</span>(<span class="string">&quot;token&quot;</span>) <span class="built_in">String</span> token</span>) &#123;</span><br><span class="line">    userService.<span class="title function_">logout</span>(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在获取了用户的<code>token</code>之后，需要将<code>token</code>存储到浏览器的<code>Cookie</code>中，以便下次访问时将<code>token</code>发送给服务器，用于查询用户信息。</p>
<h4 id="编写对应的js请求和前端页面-1"><a href="#编写对应的js请求和前端页面-1" class="headerlink" title="编写对应的js请求和前端页面"></a>编写对应的js请求和前端页面</h4><p>登录界面独立于其他界面存在，便于拦截请求后的页面跳转。</p>
<p>login.html:</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">&quot;~</span></span></span><span class="template-variable">&#123;common/base::common_header(~&#123;::link&#125;</span><span class="language-xml"><span class="tag"><span class="string">)&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/animate.css/animate.min.css&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;hiddenanchor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;signin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animate form login_form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;login_content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                               <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                               <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">id</span>=<span class="string">&quot;error-password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">id</span>=<span class="string">&quot;error-username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login-btn&quot;</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;reset_pass&quot;</span>&gt;</span>Lost your password?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;separator&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-barcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> SMS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            ©2017 All Rights Reserved</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span>Powered By <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://wenzhiquan.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;blank&quot;</span>&gt;</span>Wen Zhiquan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- jQuery --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vendors/jquery/dist/jquery.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/jquery/dist/jquery.min.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vendors/bootstrap/dist/js/bootstrap.min.js&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/bootstrap/dist/js/bootstrap.min.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/js/login.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@</span></span></span><span class="template-tag">&#123;/<span class="name">statics</span>/vendors/layer/layer.js&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>login.js:</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>),</span><br><span class="line">        password = $(<span class="string">&quot;#password&quot;</span>),</span><br><span class="line">        loginBtn = $(<span class="string">&quot;#login-btn&quot;</span>),</span><br><span class="line">        errorUsername = $(<span class="string">&quot;#error-username&quot;</span>),</span><br><span class="line">        errorPassword = $(<span class="string">&quot;#error-password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    username.blur(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (username.val() == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            errorUsername.html(<span class="string">&quot;username can not be empty&quot;</span>);</span><br><span class="line">            errorUsername.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    username.focus(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        errorUsername.hide();</span><br><span class="line">        username.val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    password.blur(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (password.val() == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            errorPassword.html(<span class="string">&quot;password can not be empty&quot;</span>);</span><br><span class="line">            errorPassword.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    password.focus(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        errorPassword.hide();</span><br><span class="line">        password.val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    loginBtn.click(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(username.val());</span><br><span class="line">        <span class="keyword">if</span> (username.val() != <span class="string">&quot;&quot;</span> &amp;&amp; password.val() != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;login&#x27;</span>,<span class="comment">// 跳转到 action</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    <span class="attr">username</span>: username.val(),</span><br><span class="line">                    <span class="attr">password</span>: password.val()</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.code == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data.next != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                            location.href = data.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        location.href = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.msg(data.msg, &#123;</span><br><span class="line">                            <span class="attr">time</span>: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    layer.msg(<span class="string">&#x27;Error!&#x27;</span>, &#123;</span><br><span class="line">                        <span class="attr">time</span>: <span class="number">1000</span> <span class="comment">//1s后自动关闭</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="编写登录拦截器"><a href="#编写登录拦截器" class="headerlink" title="编写登录拦截器"></a>编写登录拦截器</h4><p>拦截器分为两个，一个用于读取<code>token</code>信息，并根据<code>token</code>信息写入用户信息，一个用于拦截未登录用户。</p>
<p>拦截器运行阶段如下：</p>
<p><img data-src="/uploads/in-post/sms/interceptor.png" alt="拦截器运行阶段"></p>
<p>PassportInterceptor（主要用于读取<code>token</code>，并根据此<code>token</code>读取并写入用户信息）:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassportInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(PassportInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenMapper tokenMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在Controller运行之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getCookies() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : httpServletRequest.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">                    token = cookie.getValue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Token</span> <span class="variable">selectedToken</span> <span class="operator">=</span> tokenMapper.selectByToken(token);</span><br><span class="line">            <span class="keyword">if</span> (selectedToken == <span class="literal">null</span> || selectedToken.getExpiredTime().before(<span class="keyword">new</span> <span class="title class_">Date</span>()) || selectedToken.getStatus() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(selectedToken.getUserId());</span><br><span class="line">            hostHolder.setUser(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在Controller运行之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="literal">null</span> &amp;&amp; hostHolder.getUser() != <span class="literal">null</span>) &#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;user&quot;</span>, hostHolder.getUser());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此阶段发生在视图渲染完成之后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        hostHolder.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginRequiredInterceptor(用于拦截未登录用户):</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequiredInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hostHolder.getUser() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拦截器编写完成后，需要将拦截器注册到<code>Spring</code>当中：</p>
<p>spring-interceptor.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.bupt.wen.interceptor.PassportInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.edu.bupt.wen.interceptor.LoginRequiredInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在<code>spring-mvc.xml</code>中加入引用<code>&lt;import resource=&quot;spring-interceptor.xml&quot;&gt;&lt;/import&gt;</code></p>
<h4 id="运行效果-1"><a href="#运行效果-1" class="headerlink" title="运行效果"></a>运行效果</h4><p><img data-src="/uploads/in-post/sms/login.png" alt="登录页面"></p>
<h3 id="遇到的问题和解决方案"><a href="#遇到的问题和解决方案" class="headerlink" title="遇到的问题和解决方案"></a>遇到的问题和解决方案</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">问题：无法找到*Mapper.xml文件</span><br><span class="line">解决方案：*Mapper.xml文件应当位于resources文件夹中而不是java文件夹中</span><br><span class="line"></span><br><span class="line">问题：IDEA提示无法注入mapper的bean</span><br><span class="line">解决方案：将Mapper接口文件注解为@Repository</span><br><span class="line"></span><br><span class="line">问题：Could not resolve placeholder</span><br><span class="line">解决方案：在引入外部文件的bean中增加属性</span><br><span class="line">&lt;property name=<span class="string">&quot;ignoreUnresolvablePlaceholders&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">并且需要注意properties的格式必须是beanName.property=value   </span><br><span class="line"></span><br><span class="line">问题：xml文件，元素 <span class="string">&#x27;bean&#x27;</span> 必须不含字符 <span class="selector-attr">[子级]</span></span><br><span class="line">解决方案：xml文件中有不合法字符，可能是中文没有注释掉</span><br><span class="line"></span><br><span class="line">问题：使用AOP的通配符时，报Expected raw type <span class="selector-tag">form</span> of</span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.handler</span><span class="selector-class">.AbstractHandlerMethodMapping</span></span><br><span class="line"><span class="variable">$MappingRegistry</span>错误</span><br><span class="line">解决方案：AspectJ <span class="number">1.8</span>.<span class="number">10</span>版本bug，换成<span class="number">1.8</span>.<span class="number">9</span>版本问题解决</span><br><span class="line"></span><br><span class="line">问题：数据库datetime类型无法直接映射到java项目中</span><br><span class="line">解决方案：在Mapper.xml文件中增加resultMap进行java<span class="selector-class">.util</span>.Date类型的映射</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移至 Hexo 博客</title>
    <url>/2018/05/04/2018-05-04-move-to-hexo-blog/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>之前一直使用的是基于 <code>jekyll</code> 的博客系统，但是功能不是十分的强大，最近老铁安利了 <code>Hexo</code> 这个博客系统，同时也想对自己以前的博文进行整理，所以开始准备将以前基于 <code>jekyll</code> 的博文迁移至 <code>Hexo</code>。</p>
<span id="more"></span>

<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="安装-git-和-node-js"><a href="#安装-git-和-node-js" class="headerlink" title="安装 git 和 node.js"></a>安装 <code>git</code> 和 <code>node.js</code></h4><p><strong>安装 Git</strong>:<br>Windows：下载并安装 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZC93aW4=">git<i class="fa fa-external-link-alt"></i></span><br>Mac：<code>brew install git</code><br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p>
<p>_验证安装_：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">version</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># git version 2.7.4</span></span><br></pre></td></tr></table></figure>

<p><strong>安装 node.js</strong><br>安装 Node.js 的最佳方式是使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvbnZt">nvm<i class="fa fa-external-link-alt"></i></span>。<br>cURL:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>raw.github.com<span class="regexp">/creationix/</span>nvm<span class="regexp">/master/i</span>nstall.sh | sh</span><br></pre></td></tr></table></figure>

<p>Wget:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -qO- https:<span class="regexp">//</span>raw.github.com<span class="regexp">/creationix/</span>nvm<span class="regexp">/master/i</span>nstall.sh | sh</span><br></pre></td></tr></table></figure>

<p>安装完成后，重启终端并执行下列命令即可安装 node.js：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">nvm <span class="keyword">install</span> stable</span><br></pre></td></tr></table></figure>

<p>当然，也可以根据 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">官网<i class="fa fa-external-link-alt"></i></span> 教程进行安装。</p>
<p>_验证安装_：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">--version</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># v8.11.1</span></span><br></pre></td></tr></table></figure>

<h4 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 <code>hexo-cli</code></h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>

<p>_验证安装_：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">version</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># hexo-cli: 1.1.0</span></span><br><span class="line"><span class="comment"># os: Linux 4.4.0-122-generic linux x64</span></span><br><span class="line"><span class="comment"># http_parser: 2.8.0</span></span><br><span class="line"><span class="comment"># node: 8.11.1</span></span><br><span class="line"><span class="comment"># v8: 6.2.414.50</span></span><br><span class="line"><span class="comment"># uv: 1.19.1</span></span><br><span class="line"><span class="comment"># zlib: 1.2.11</span></span><br><span class="line"><span class="comment"># ares: 1.10.1-DEV</span></span><br><span class="line"><span class="comment"># modules: 57</span></span><br><span class="line"><span class="comment"># nghttp2: 1.25.0</span></span><br><span class="line"><span class="comment"># openssl: 1.0.2o</span></span><br><span class="line"><span class="comment"># icu: 60.1</span></span><br><span class="line"><span class="comment"># unicode: 10.0</span></span><br><span class="line"><span class="comment"># cldr: 32.0</span></span><br><span class="line"><span class="comment"># tz: 2017c</span></span><br></pre></td></tr></table></figure>

<p>恭喜恭喜，至此，<code>Hexo</code> 就安装成功啦！</p>
<h3 id="备份原博客仓库"><a href="#备份原博客仓库" class="headerlink" title="备份原博客仓库"></a>备份原博客仓库</h3><p>因为我是迁移博客，所以要备份一下原来的博客，如果你是新建博客的话，可以跳过这一步。</p>
<h4 id="备份原仓库"><a href="#备份原仓库" class="headerlink" title="备份原仓库"></a>备份原仓库</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">在 github 中直接将原仓库重命名即可：</span><br><span class="line">blogName<span class="selector-class">.github</span><span class="selector-class">.io</span> -&gt; blogName<span class="selector-class">.github</span><span class="selector-class">.io</span>.backup</span><br></pre></td></tr></table></figure>

<h4 id="新建空仓库"><a href="#新建空仓库" class="headerlink" title="新建空仓库"></a>新建空仓库</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">在 github 中创建一个新的仓库：</span><br><span class="line"><span class="symbol">name:</span> blogName.github.io</span><br></pre></td></tr></table></figure>

<h3 id="初始化并上传博客"><a href="#初始化并上传博客" class="headerlink" title="初始化并上传博客"></a>初始化并上传博客</h3><h4 id="创建本地-Hexo-项目"><a href="#创建本地-Hexo-项目" class="headerlink" title="创建本地 Hexo 项目"></a>创建本地 <code>Hexo</code> 项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在用户根目录创建 Hexo 项目</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">hexo init blogName.github.io</span><br><span class="line"><span class="built_in">cd</span> blogName.github.io</span><br></pre></td></tr></table></figure>

<h4 id="关联本地-Hexo-项目与-github"><a href="#关联本地-Hexo-项目与-github" class="headerlink" title="关联本地 Hexo 项目与 github"></a>关联本地 <code>Hexo</code> 项目与 <code>github</code></h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 将新建的 Hexo 项目进行 git 初始化</span></span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">&quot;Hexo 博客，第一次提交&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 将 git 项目与 github 进行关联</span></span><br><span class="line">git remote <span class="keyword">add</span> origin git@github.com:yourName/blogName.github.io.git</span><br><span class="line">git <span class="keyword">push</span> origin master</span><br><span class="line"></span><br><span class="line"><span class="meta"># 使用 gh-pages 分支开发原代码，master 分支用于放置编译后的站点文件</span></span><br><span class="line">git checkout -b gh-pages</span><br><span class="line">git <span class="keyword">push</span> --<span class="keyword">set</span>-upstream origin gh-pages</span><br></pre></td></tr></table></figure>

<h4 id="本地编译并远端部署"><a href="#本地编译并远端部署" class="headerlink" title="本地编译并远端部署"></a>本地编译并远端部署</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 blogName.github.io 目录下安装已有插件</span></span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo 与 github 的关联插件</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改站点配置文件_config</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourName/blogName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 本地调试</span><br><span class="line">hexo s --debug</span><br><span class="line"></span><br><span class="line"># 部署文件到 master 分支，每次更新博文到 github 都要运行这三个命令，建议写成一个脚本</span><br><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入博客项目根目录，创建 next 目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/blogName.github.io</span><br><span class="line"><span class="built_in">mkdir</span> themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 NexT 主题</span></span><br><span class="line">curl -s https://api.github.com/repos/theme-next/hexo-theme-next/releases/latest | grep tarball_url | <span class="built_in">cut</span> -d <span class="string">&#x27;&quot;&#x27;</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure>

<h4 id="配置-NexT-主题"><a href="#配置-NexT-主题" class="headerlink" title="配置 NexT 主题"></a>配置 NexT 主题</h4><p>请参照 <span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vZ2V0dGluZy1zdGFydGVkLmh0bWwjaW5zdGFsbC1uZXh0LXRoZW1l">Hexo 的文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="增加站内搜索和阅读量统计功能"><a href="#增加站内搜索和阅读量统计功能" class="headerlink" title="增加站内搜索和阅读量统计功能"></a>增加站内搜索和阅读量统计功能</h3><h4 id="增加站内搜索功能"><a href="#增加站内搜索功能" class="headerlink" title="增加站内搜索功能"></a>增加站内搜索功能</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装相关插件</span></span><br><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置站点_config.xml 文件</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置主题_config.xml 文件</span></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="增加阅读量统计功能"><a href="#增加阅读量统计功能" class="headerlink" title="增加阅读量统计功能"></a>增加阅读量统计功能</h4><p>请参照 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vTEVBTkNMT1VELUNPVU5URVItU0VDVVJJVFkubWQ=">为 NexT 主题添加文章阅读量统计功能<i class="fa fa-external-link-alt"></i></span> 一文</p>
<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><h4 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h4><p>安装插件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中进行配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment"># Feed configuration.</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>

<p>参数的含义：</p>
<ul>
<li><code>type</code>: RSS 的类型 (atom/rss2)</li>
<li><code>path</code>: 文件路径, 默认是 atom.xml/rss2.xml</li>
<li><code>limit</code>: 展示文章的数量, 使用 0 或则 false 代表展示全部</li>
<li><code>hub</code>: PubSubHubbub hubs 的 URL，如果不用的话请置为空</li>
<li><code>content</code>: 在 RSS 文件中是否包含内容 , 有 3 个值 true/false 默认不填为 false</li>
<li><code>content_limit</code>: 指定内容的长度作为摘要, 仅仅在上面 content 设置为 false 和没有自定义的描述出现</li>
<li><code>content_limit_delim</code>: 上面截取描述的分隔符, 截取内容是以指定的这个分隔符作为截取结束的标志。在达到规定的内容长度之前最后出现的这个分隔符之前的内容，防止从中间截断.</li>
</ul>
<p>配置完成后运行 <code>hexo g</code>，如果在 <code>public</code> 文件夹生成了 <code>atom.xml</code> 文件说明添加成功。</p>
<h4 id="设置阅读全文"><a href="#设置阅读全文" class="headerlink" title="设置阅读全文"></a>设置阅读全文</h4><ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 关键字进行手动截断 2. 在主题配置文件中添加</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<h4 id="设置阅读百分比"><a href="#设置阅读百分比" class="headerlink" title="设置阅读百分比"></a>设置阅读百分比</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中进行设置</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中进行设置</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br></pre></td></tr></table></figure>

<h4 id="添加菜单选项"><a href="#添加菜单选项" class="headerlink" title="添加菜单选项"></a>添加菜单选项</h4><h5 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h5><p>在 <code>blogName.github.io</code> 目录下调用命令：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 添加分类页面</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta"># 添加标签页面</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> “tags”</span><br><span class="line"><span class="meta"># 添加关于页面</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行完指令后，在 <code>/source/</code> 文件夹下创建三个文件夹，命名分别为：<code>categories</code>、<code>tags</code>、<code>about</code> 文件夹</p>
<h5 id="修改页面"><a href="#修改页面" class="headerlink" title="修改页面"></a>修改页面</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-05-04 12:06:24</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-05-04 12:07:36</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于我</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-05-04 12:08:27</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>在文章开头添加关键字即可生成相应的 <code>分类</code> 和 <code>标签</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span>      <span class="string">&quot;迁移至 Hexo 博客&quot;</span></span><br><span class="line"><span class="attr">date:</span>       <span class="number">2018-05-04 12:00:00</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">NexT</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h4><p>在主题配置文件中修改 <code>social</code> 属性：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">https://www.zhihu.com/people/wenzhiquan/activities</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:wenzhiquanr@163.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/profile.php?id=100006943363300</span> <span class="string">||</span> <span class="string">facebook</span></span><br></pre></td></tr></table></figure>

<h4 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h4><p>在主题配置文件中修改 <code>links</code> 属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">肖楚天的博客:</span> <span class="string">https://xiaochutian.github.io/</span></span><br></pre></td></tr></table></figure>

<h4 id="添加近期文章"><a href="#添加近期文章" class="headerlink" title="添加近期文章"></a>添加近期文章</h4><p>在 <code>theme/next/layout/_macro/sidebar.swig</code> 中的 <code>if theme.links</code> 前面添加：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#123;% if theme.recent_posts %&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll motion-element </span></span></span><span class="template-variable">&#123;&#123;<span class="name">&quot;links-of-blogroll-&quot;</span>+ theme.recent_posts_layout&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-history fa-</span></span></span><span class="template-variable">&#123;&#123; <span class="name">theme.recent_posts_icon</span> | lower&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123;<span class="name">theme.recent_posts_title</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">post.path</span>) &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">title</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>并在主题配置文件中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>hexo g</code> 命令重新生成后即可显示</p>
<h4 id="添加字数统计"><a href="#添加字数统计" class="headerlink" title="添加字数统计"></a>添加字数统计</h4><p>安装插件：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-<span class="built_in">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>然后在<code>站点配置文件</code>加入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>并在<code>主题配置文件配置</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>

<h4 id="打赏字体不闪动"><a href="#打赏字体不闪动" class="headerlink" title="打赏字体不闪动"></a>打赏字体不闪动</h4><p>修改文件 <code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数 <code>wechat:hover</code> 和 <code>alipay:hover</code>，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//<span class="selector-id">#wechat</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">//    <span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//    -webkit-<span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//    -moz-<span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//&#125;</span><br><span class="line">//<span class="selector-id">#alipay</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">//    <span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//    -webkit-<span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//    -moz-<span class="attribute">animation</span>: roll <span class="number">0.1s</span> infinite linear;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件中配置</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果还想继续对博客主题进行配置，请访问我的参考网站。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、Moorez，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMDU0MzMzYWM5ZTY=">hexo 的 next 主题个性化教程: 打造炫酷网站<i class="fa fa-external-link-alt"></i></span></p>
<p>2、<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTU0NDkyNA==">hexo 的 next 主题个性化配置教程<i class="fa fa-external-link-alt"></i></span></p>
<p>3、sunshine 小小倩，<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OGViMmZkMmEwYmI5ZjAwNjkyOGY4YzcjaGVhZGluZy0xNg==">hexo 高阶教程<i class="fa fa-external-link-alt"></i></span></p>
<p>4、<span class="exturl" data-url="aHR0cHM6Ly9yZXVpeGl5LmdpdGh1Yi5pby90ZWNobm9sb2d5L2NvbXB1dGVyL2NvbXB1dGVyLWFpZGVkLWFydC8yMDE3LzA2LzA5L2hleG8tbmV4dC1vcHRpbWl6YXRpb24uaHRtbA==">打造个性超赞博客 Hexo+NexT+GithubPages 的超深度优化<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC 简析</title>
    <url>/2018/05/29/2018-05-29-rpc-introduction/</url>
    <content><![CDATA[<blockquote>
<p>RPC 的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC"></a>什么是 <code>RPC</code></h4><p><code>RPC</code>，全称为 <code>Remote Procedure Call</code>，即远程过程调用，是一种进程间的通信方式。它能够实现从主机 A 调用可达地址空间中另一台主机 B 上的过程或函数，而程序员并不需要显示的编码其调用过程。也即是说对于程序员来说，这个调用过程是透明的，本地调用和远程调用所用代码基本是相同的。</p>
<span id="more"></span>

<p>RPC 的调用过程如下图：</p>
<p><img data-src="/uploads/in-post/rpc-introduction/RPC.png" alt="RPC 调用过程"></p>
<ol>
<li><p><code>client</code> 以本地调用的方式发起一个远程调用</p>
</li>
<li><p>本地的 <code>client stub </code> 接收到调用请求后，将调用的接口、方法和参数通过约定的协议规范进行序列化（* 网络协议基于二进制，需要将内存中的值序列化成为二进制的形式 *）</p>
</li>
<li><p>本地的 <code>RPC</code> 实例将编码结果传输到远端（被调用端）的 <code>RPC</code> 实例</p>
</li>
<li><p>远端 <code>RPC</code> 实例收到请求后交给 <code>server stub</code> 进行反序列化</p>
</li>
<li><p><code>server stub</code> 调用 <code>server</code> 端本地服务</p>
</li>
<li><p><code>server stub</code> 获取到本地服务的的返回结果后进行序列化</p>
</li>
<li><p><code>server</code> 端的 <code>RPC</code> 实例将结果返回给 <code>client</code> 端</p>
</li>
<li><p><code>client</code> 端接收到返回值后进行反序列化，并将最终的结果返回给发起调用的函数</p>
</li>
</ol>
<p>可以看出 <code>RPC</code> 调用采用的是 <code>C/S</code> 模式。</p>
<h4 id="RPC-需要解决的问题"><a href="#RPC-需要解决的问题" class="headerlink" title="RPC 需要解决的问题"></a><code>RPC</code> 需要解决的问题</h4><ul>
<li><p>通讯的问题</p>
<ul>
<li>主要是通过在客户端和服务器之间建立 TCP 连接，并通过 TCP 连接进行数据交换</li>
</ul>
</li>
<li><p>寻址的问题</p>
<ul>
<li>即 A 服务器上的应用如何告诉底层的 <code>RPC</code> 框架，如何连接到 B 服务器的特定端口并调用其特定的方法，比如基于 <code>Web</code> 服务协议栈的 <code>RPC，需要提供一个 </code> <code>endpoint URI </code> 或是从 <code>UDDI</code> 服务上查找</li>
</ul>
</li>
<li><p>参数的序列化和反序列化</p>
<ul>
<li>由于方法的参数需要通过底层的网络协议进行传递，而网络协议是基于二进制的，所以需要将内存中参数的值序列化为二进制的形式，并且需要将接收到的二进制数据反序列化恢复为原来内存中的表达方式。</li>
</ul>
</li>
</ul>
<h3 id="RPC-调用分类"><a href="#RPC-调用分类" class="headerlink" title="RPC 调用分类"></a>RPC 调用分类</h3><p>根据 <code>Client</code> 端发起调用后是否等待服务端的返回结果，可以将 <code>RPC</code> 调用分为以下两种：</p>
<h4 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h4><p><code>Client</code> 端发起请求后，挂起本地进程，直到 <code>Server</code> 端运行完毕并返回结果后，唤醒进程继续执行。</p>
<h4 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h4><p><code>Client</code> 端发起请求后，不等待 <code>Server</code> 端的执行结果，继续运行进程。</p>
<p>若 <code>Client</code> 端需要获取结果，可以通过回调通知等方法获取执行结果。</p>
<p>若 <code>Client</code> 端不需要获取结果，则为单向异步调用，只触发 <code>Server</code> 端的函数执行。</p>
<h3 id="Python-2-简单示例"><a href="#Python-2-简单示例" class="headerlink" title="Python 2 简单示例"></a>Python 2 简单示例</h3><p>Server 端：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="meta"># 自定义 RPC 调用地址</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestHandler</span>(SimpleXMLRPCRequestHandler):</span><br><span class="line">    rpc_paths = (<span class="string">&#x27;/RPC2&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">port = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 绑定本地端口 8080 初始化 server</span></span><br><span class="line"><span class="keyword">server</span> = SimpleXMLRPCServer((<span class="string">&#x27;localhost&#x27;</span>, port), requestHandler=RequestHandler)</span><br><span class="line"><span class="meta"># 注册一个自省的 XML-RPC 函数</span></span><br><span class="line"><span class="keyword">server</span>.register_introspection_functions()</span><br><span class="line"><span class="meta"># 注册一个多调用组合</span></span><br><span class="line"><span class="keyword">server</span>.register_multicall_functions()</span><br><span class="line"></span><br><span class="line">def add(x, y):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta"># 注册调用函数, 可以创建别名</span></span><br><span class="line"><span class="keyword">server</span>.register_function(add, <span class="string">&#x27;addAlias&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFuncs</span>:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    def <span class="keyword">div</span>(self, x, y):</span><br><span class="line">        <span class="keyword">return</span> x <span class="comment">// y</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 注册调用实例, 所有方法将以 XML-RPC 的方式进行发布</span></span><br><span class="line"><span class="keyword">server</span>.register_instance(MyFuncs())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Listening on port&quot;</span> + <span class="built_in">str</span>(port)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 开启 server</span></span><br><span class="line"><span class="keyword">server</span>.serve_forever()</span><br></pre></td></tr></table></figure>

<p>Client 端：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">import xmlrpclib</span><br><span class="line"></span><br><span class="line">port = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">server</span> = xmlrpclib.ServerProxy(<span class="string">&quot;http://localhost:&quot;</span> + <span class="built_in">str</span>(port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="keyword">server</span></span><br><span class="line">multi = xmlrpclib.MultiCall(<span class="keyword">server</span>)</span><br><span class="line">multi.addAlias(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">multi.<span class="keyword">div</span>(<span class="number">24</span>, <span class="number">11</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> multi():</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Result is :&quot;</span> + <span class="built_in">str</span>(response)</span><br><span class="line">except xmlrpclib.Error, e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;ERROR&quot;</span>, e</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"># Server:</span><br><span class="line"><span class="number">127.0.0.1</span> - - <span class="string">[30/May/2018 10:36:19]</span> <span class="string">&quot;<span class="keyword">POST</span> /RPC2 HTTP/1.1&quot;</span> <span class="number">200</span> -</span><br><span class="line"></span><br><span class="line"># Client</span><br><span class="line">&lt;ServerProxy for localhost:<span class="number">8080</span>/RPC2&gt;</span><br><span class="line">Result is : <span class="number">6</span></span><br><span class="line">Result is : <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、Mindwind，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmRmbG9hdGluZy9hcnRpY2xlL2RldGFpbHMvMzk0NzM4MDc=">深入浅出 RPC - 浅出篇<i class="fa fa-external-link-alt"></i></span></p>
<p>2、Mindwind，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmRmbG9hdGluZy9hcnRpY2xlL2RldGFpbHMvMzk0NzQxMjM=">深入浅出 RPC - 深入篇<i class="fa fa-external-link-alt"></i></span></p>
<p>3、Way Lau，<span class="exturl" data-url="aHR0cHM6Ly93YXlsYXUuY29tL3JlbW90ZS1wcm9jZWR1cmUtY2FsbHMv">远程过程调用 (RPC) 详解<i class="fa fa-external-link-alt"></i></span></p>
<p>4、zhanlijun，<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTEJTZXIvcC80ODUzMjM0Lmh0bWw=">你应该知道的RPC原理<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Thrift 简析</title>
    <url>/2018/05/30/2018-05-30-thrift-introduction/</url>
    <content><![CDATA[<blockquote>
<p>Thrift 是一种可扩展、跨语言的服务开发框架，用于各个服务之间的 RPC 通信。</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Thrift</code> 最初由 <code>Facebook</code> 于 2007 年开发，2008 年进入 <code>Apache</code> 开源项目。Thrift 主要用于各个服务之间的 RPC 通信，是一种可扩展、跨语言的 <code>RPC</code> 服务开发框架，其服务端和客户端可以用不同的语言来开发。只需要依照 IDL（Interface Description Language）定义一次接口，Thrift 工具就能编译生成 C++, Java, Python, PHP, Ruby, JavaScript, Node.js 等语言的代码。</p>
<span id="more"></span>

<h3 id="Thrift-类型"><a href="#Thrift-类型" class="headerlink" title="Thrift 类型"></a>Thrift 类型</h3><p><code>Thrift</code> 的类型包括了基本类型，如 <code>bool</code>，<code>byte</code>，<code>double</code>，<code>string</code> 和不同长度的 <code>有符号整数</code> 类型；也提供了特殊类型如 <code>binary</code>，<code>enum</code>，<code>structs</code>，容器类型（<code>list</code>，<code>set</code>，<code>map</code>），<code>exception</code>，<code>service</code>，<code>const</code> 等，也支持类型定义。</p>
<h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">bool:</span> 布尔变量</span><br><span class="line"><span class="symbol">byte:</span> <span class="number">8</span> 位有符号整数</span><br><span class="line"><span class="symbol">i16:</span> <span class="number">16</span> 位有符号整数</span><br><span class="line"><span class="symbol">i32:</span> <span class="number">32</span> 位有符号整数</span><br><span class="line"><span class="symbol">i64:</span> <span class="number">64</span> 位有符号整数</span><br><span class="line"><span class="symbol">double:</span> <span class="number">64</span> 位浮点数</span><br><span class="line"><span class="symbol">string:</span> 字符串</span><br></pre></td></tr></table></figure>

<p>其中 <code>i16</code> 类型相当于 <code>short</code> 类型，<code>i32</code> 类型相当于 <code>int</code> 类型，<code>i64</code> 类型相当于 <code>long</code> 类型。</p>
<p>** 注：Thrift 不支持无符号整数类型，因为很多编程语言不存在无符号类型，比如 Java**</p>
<h4 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">binary</span>: 未编码的字节序列</span><br></pre></td></tr></table></figure>

<h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体中包含一系列的 <code>强类型</code> 域，目的是聚集一系列数据，类似于无继承的类。</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">     <span class="number">1</span>: <span class="type">string</span> name,</span><br><span class="line">     <span class="number">2</span>: <span class="type">byte</span> age,</span><br><span class="line">     <span class="number">3</span>: <span class="type">string</span> gender</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h4><p>集合中的类型可以是除了 <code>service</code> 之外的任何类型，包括 <code>exception</code>。</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">list:</span> 由 T 类型的数据组成的有序列表，元素可以重复</span><br><span class="line"><span class="symbol">set:</span>  由 T 类型的数据组成的无序集合，元素不可重复</span><br><span class="line"><span class="symbol">map:</span>  字典结构，<span class="keyword">key</span> 为 K 类型，value 为 V 类型，键不可重复</span><br></pre></td></tr></table></figure>

<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>Thrift 支持自定义 <code>exception</code>，规则和 <code>struct</code> 类似：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">exception</span> <span class="title">RequestException</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="type">i32</span> code,</span><br><span class="line">    <span class="number">2</span>: <span class="type">string</span> reason</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>thrift 定义服务相当于 Java 中创建 <code>Interface</code>，创建的 <code>service</code> 经过代码生成命令之后就会生成客户端和服务端的框架代码。定义形式如下：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloWordService</span> </span>&#123;</span><br><span class="line">     <span class="comment">// service 中定义的函数，相当于 Java interface 中定义的函数</span></span><br><span class="line">     <span class="type">string</span> doAction(<span class="number">1</span>: <span class="type">string</span> name, <span class="number">2</span>: <span class="type">i32</span> age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常量-const"><a href="#常量-const" class="headerlink" title="常量 (const)"></a>常量 (const)</h4><p>thrift 也支持常量定义，使用 <code>const</code> 关键字，例如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="type">i32</span> MAX_RETRIES_TIME = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> <span class="type">string</span> MY_WEBSITE = <span class="string">&quot;http://qifuguang.me&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h4><p>thrift 支持类似 C++ 一样的 <code>typedef</code> 定义，比如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">i32</span> Integer</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">i64</span> Long</span><br></pre></td></tr></table></figure>

<h3 id="Thrift-语法"><a href="#Thrift-语法" class="headerlink" title="Thrift 语法"></a>Thrift 语法</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>thrift 的命名空间相当于 Java 中的 <code>package</code>，主要目的是组织代码。thrift 使用关键字 <code>namespace</code> 定义命名空间，例如：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> java com.winwill.thrift</span><br></pre></td></tr></table></figure>

<h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>thrift 也支持文件包含，相当于 C/C++ 中的 <code>include</code>，Java 中的 <code>import</code>。使用关键字 <code>include</code> 定义，例 如：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;global.thrift&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="可选与必选"><a href="#可选与必选" class="headerlink" title="可选与必选"></a>可选与必选</h4><p>thrift 提供两个关键字 <code>required</code>，<code>optional</code>，分别用于表示对应的字段时必填的还是可选的。例如：</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="type">string</span> name;</span><br><span class="line">    <span class="number">2</span>: <span class="keyword">optional</span> <span class="type">i32</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表示 name 是必需的，age 是可选的。</p>
<h4 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h4><p>当一个结构体中，<code>field</code> 之间的关系是互斥的，即只能有一个 <code>field</code> 可生效被赋值。我们可以用 <code>union</code> 来声明这个结构体，而不是一堆堆 <code>optional</code> 的 <code>field</code>，语意上也更明确了。例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">union JavaObjectArg &#123;</span><br><span class="line">  <span class="number">1</span>: i32 <span class="built_in">int</span>_arg;</span><br><span class="line">  <span class="number">2</span>: i64 long_arg;</span><br><span class="line">  <span class="number">3</span>: <span class="built_in">string</span> <span class="built_in">string</span>_arg;</span><br><span class="line">  <span class="number">4</span>: <span class="built_in">bool</span> <span class="built_in">bool</span>_arg;</span><br><span class="line">  <span class="number">5</span>: binary binary_arg;</span><br><span class="line">  <span class="number">6</span>: <span class="built_in">double</span> <span class="built_in">double</span>_arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>thrift 注释方式支持 shell 风格的注释，支持 C/C++ 风格的注释，即 <code>#</code> 和 <code>//</code> 开头的语句都单当做注释，<code>/**/</code> 包裹的语句也是注释。</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"># 这是一个注释</span><br><span class="line"><span class="comment">// 这也是一个注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是一个多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="type">string</span> name;</span><br><span class="line">    <span class="number">2</span>: <span class="keyword">optional</span> <span class="type">i32</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="python2-示例"><a href="#python2-示例" class="headerlink" title="python2 示例"></a>python2 示例</h3><h4 id="定义idl"><a href="#定义idl" class="headerlink" title="定义idl"></a>定义idl</h4><p>首先我们需要定义一个 <code>idl</code> —— <code>hello.thrift</code>:</p>
<figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thrift接口定义文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="type">string</span> say(<span class="number">1</span>:<span class="type">string</span> msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>运行命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">thrift</span> -r -gen py hello.thrift</span><br></pre></td></tr></table></figure>

<p>会生成一个 <code>gen-py</code> 文件夹，里面的 <code>hello</code> 文件夹即为生成的服务</p>
<h4 id="server端代码"><a href="#server端代码" class="headerlink" title="server端代码"></a>server端代码</h4><p>在 <code>gen-py</code> 目录中新建 <code>server.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">thrift_client.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.server <span class="keyword">import</span> TServer</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> HelloService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloServiceHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, msg</span>):</span><br><span class="line">        ret = <span class="string">&quot;Received: &quot;</span> + msg</span><br><span class="line">        <span class="built_in">print</span> ret</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handler = HelloServiceHandler()</span><br><span class="line">processor = HelloService.Processor(handler)</span><br><span class="line">transport = TSocket.TServerSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>)</span><br><span class="line">tfactory = TTransport.TBufferedTransportFactory()</span><br><span class="line">pfactory = TBinaryProtocol.TBinaryProtocolFactory()</span><br><span class="line"></span><br><span class="line">server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Starting thrift server in python...&quot;</span></span><br><span class="line">server.serve()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;done!&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="client端代码"><a href="#client端代码" class="headerlink" title="client端代码"></a>client端代码</h4><p>在 <code>gen-py</code> 目录中新建 <code>client.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">thrift_client.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> HelloService</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    transport = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">    client = HelloService.Client(protocol)</span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;client - say&quot;</span></span><br><span class="line">    msg = client.say(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;server - &quot;</span> + msg</span><br><span class="line"></span><br><span class="line">    transport.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Thrift.TException, ex:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;%s&quot;</span> % (ex.message)</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ python <span class="keyword">server</span>.py</span><br><span class="line">Starting thrift <span class="keyword">server</span> <span class="keyword">in</span> python...</span><br><span class="line">Received: Hello!</span><br><span class="line"></span><br><span class="line">$ ptyhon <span class="keyword">client</span>.py</span><br><span class="line"><span class="keyword">client</span> - say</span><br><span class="line"><span class="keyword">server</span> - Received: Hello!</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、winwill2010，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dpbndpbGwyMDEyL2FydGljbGUvZGV0YWlscy83MTYyNzg4Ng==">Thrift 入门教程<i class="fa fa-external-link-alt"></i></span><br>2、王博文，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1dHNvZnQvYXJ0aWNsZS9kZXRhaWxzLzcxMTc4NjU1">Python Thrift示例<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Thrift</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--简单工厂模式</title>
    <url>/2018/06/15/2018-06-15-design-pattern-simple-factory/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简单工厂模式是最简单的设计模式之一，简单到甚至没有放到23种常用设计模式当中，可以用于设计模式的入门学习。</p>
<span id="more"></span>

<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>定义一个创建对象的接口，在工厂中决定实例化哪个对象的子类，解决了接口选择的问题</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>实现了子类对象创建和使用的分离</li>
<li>无需知道子类的类名，通过参数即可创建子类对象</li>
<li>屏蔽了子类的具体实现</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>每次增加新产品时，都需要修改工厂类，违反了开闭原则</li>
<li>产品和工厂类之间的依赖较大</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们将创建一个<code>Fruit</code>接口和实现<code>Fruit</code>接口的实体类，以及工厂类<code>FruitFactory</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="built_in">void</span> <span class="title function_">describe</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建苹果实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">describe</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;我是苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建梨实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pear</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">describe</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;我是梨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建橙子实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">describe</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;我是橙子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据给get方法的不同参数名，返回相应的子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Fruit</span> <span class="title function_">getFruit</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.<span class="title function_">equalsIgnoreCase</span>(<span class="string">&quot;apple&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.<span class="title function_">equalsIgnoreCase</span>(<span class="string">&quot;pear&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pear</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.<span class="title function_">equalsIgnoreCase</span>(<span class="string">&quot;orange&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Orange</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryPattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">FruitFactory</span> fruitFactory = <span class="keyword">new</span> <span class="title class_">FruitFactory</span>();</span><br><span class="line">        <span class="comment">// 获取苹果对象并调用 describe 方法</span></span><br><span class="line">        <span class="title class_">Fruit</span> apple = fruitFactory.<span class="title function_">getFruit</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        apple.<span class="title function_">describe</span>();</span><br><span class="line">        <span class="comment">// 获取梨对象并调用 describe 方法</span></span><br><span class="line">        <span class="title class_">Fruit</span> pear = fruitFactory.<span class="title function_">getFruit</span>(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        pear.<span class="title function_">describe</span>();</span><br><span class="line">        <span class="comment">// 获取橙子对象并调用 describe 方法</span></span><br><span class="line">        <span class="title class_">Fruit</span> orange = fruitFactory.<span class="title function_">getFruit</span>(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        orange.<span class="title function_">describe</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">我是苹果</span><br><span class="line">我是梨</span><br><span class="line">我是橙子</span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当我们明确知道传入工厂的参数且对如何创建对象不关心时可以使用此方法，尽量在工厂中创建类型较少时采用此方法，以免工厂类过于复杂。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>类文件结构和Java虚拟机类加载机制</title>
    <url>/2018/04/01/2018-04-01-java-class-load/</url>
    <content><![CDATA[<blockquote>
<p>“代码编译的结果从本地机器码转变为字节码，是存储格式发展的一小步，却是编程语言发展的一大步。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的类加载机制。</p>
<p>在 Java 语言中，类的加载、连接和初始化过程都是在程序运行期间完成的，为 Java 应用程序提供了高度的灵活性。</p>
<span id="more"></span>

<h3 id="Class-类文件的结构"><a href="#Class-类文件的结构" class="headerlink" title="Class 类文件的结构"></a>Class 类文件的结构</h3><p>任何一个 Class 文件都对应着<code>唯一一个</code>类或者接口的定义信息。Class 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目<code>严格按照顺序</code>紧凑的排列在 Class 文件之中，中间没有任何分隔符，所以整个 Class 文件中存储的内容几乎全是程序运行的必要数据。，遇到占用 8 位字节以上空间的数据项目时，会按照<code>高位在前</code>的方式分割成若干个 8 位字节进行存储。</p>
<p>Class 文件中只有两种数据类型：<code>无符号数</code>和<code>表</code></p>
<p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性的以<code>_info</code>结尾</p>
<p>Class 文件格式如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u4</td>
<td>magic</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>minor_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>major_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>constant_pool_count</td>
<td>1</td>
</tr>
<tr>
<td>cp_info</td>
<td>constant_pool</td>
<td>constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>this_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>super_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces_count</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces</td>
<td>interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td>fields_count</td>
<td>1</td>
</tr>
<tr>
<td>field_info</td>
<td>fields</td>
<td>fields_count</td>
</tr>
<tr>
<td>u2</td>
<td>methods_count</td>
<td>1</td>
</tr>
<tr>
<td>method_info</td>
<td>methods</td>
<td>methods_count</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody></table>
<p>无符号数属于基本的数据类型，用 u1、u2、u4、u8 里奥表示 1 个字节、2 个字节、4 个字节、8 个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值和按照 UTF-8 编码构成的字符串值。</p>
<h4 id="魔数与-Class-文件的版本"><a href="#魔数与-Class-文件的版本" class="headerlink" title="魔数与 Class 文件的版本"></a>魔数与 Class 文件的版本</h4><p>每个 Class 文件的开头 4 个字节称为<code>魔数</code>，它的唯一作用是确定这个文件是否为一个能被虚拟机接受的 Class 文件，值为<code>0xCAFEBABE</code>。</p>
<p>紧接着魔数的 4 个字节存储的是 Class 文件的<code>版本号</code>，第 5 和第 6 字节是次版本号，第 7 和第 8 字节是主版本号，虚拟机必须拒绝执行超过其版本号的 Class 文件</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>紧接着主次版本号之后的是<code>常量池入口</code>，常量池可以理解为 Class 文件之中的资源仓库，他是 Class 文件结构中与其他项目关联最多的数据类型，也是占用 Class 文件空间最大的数据项目之一，同时还是在 Class 文件中第一个出现的表类型数据项目。</p>
<p>由于常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项 u2 类型的数据，代表常量池容量计数值，这个容量计数是从<code>1</code>开始的，其他的集合类型都是从 0 开始的。因为将常量池索引置为 0 被设计用来表示<code>不引用任何一个常量池项目</code>。</p>
<p>常量池主要存放两大类常量：<code>字面量</code>和<code>符号引用</code></p>
<p>字面量比较接近 Java 语言层面的常量概念，如<code>文本字符串</code>、<code>声明为final的常量值</code>等</p>
<p>符号引用属于编译原理方面的概念，包括以下三类常量：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址中。</p>
<p>常量中每一项常量都是一个表，目前一共有 14 种常量类型，他们均有各自的结构。</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/2395997-dc9aafbf16055c31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p>
<p>可以通过<code>javap -verbose</code>命令查看 Class 文件的字节码内容。</p>
<h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>在常量池结束之后，紧接着的两个字节代表访问标志（access_flags),这个标志用于识别以下类或者接口层次的访问信息。</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>是否为 public 类型</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>是否被声明为 final，只有类可设置</td>
</tr>
<tr>
<td>ACC_SUPER</td>
<td>0x0020</td>
<td>是否允许使用 invokespecial 字节码指令的新语意，JDK1.0.2 之后编译出来的类此标志都必须为真</td>
</tr>
<tr>
<td>ACC_INTERFACE</td>
<td>0x0200</td>
<td>标识这是一个接口</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0400</td>
<td>是否为 abstract 类型，对于接口或抽象类来说，此标志值为真</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>标识这个类并非由用户代码产生的</td>
</tr>
<tr>
<td>ACC_ANNOTATION</td>
<td>0x2000</td>
<td>标识这是一个注解</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>标识这是一个枚举</td>
</tr>
</tbody></table>
<p>access_flags 的值由上述标志值求或操作获得。</p>
<h4 id="类索引、父类索引和接口索引集合"><a href="#类索引、父类索引和接口索引集合" class="headerlink" title="类索引、父类索引和接口索引集合"></a>类索引、父类索引和接口索引集合</h4><p>类索引(this_class)和父类索引(super_class)都是一个 u2 类型的数据，而接口索引集合(interfaces)是一组 u2 类型的数据集合，Class 文件中由这三项数据来确定这个类的继承关系。</p>
<p>类索引用于确定这个类的全限定名。</p>
<p>父类索引用于确定这个类的父类的全限定名。</p>
<p>接口索引集合用来描述这个类实现了哪些接口，按照 implements 语句后的接口顺序从左到右排列在接口索引集合中。</p>
<p>类索引和父类索引引用两个 u2 类型的索引值表示，他们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过 CONSTANT_Class_info 类型的常量中的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/2395997-d30e2d2d0df2b6ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"></p>
<h4 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h4><p>字段表(field_info)用于描述接口或者类中声明的变量，字段(field)包括类级变量以及实例级变量，但不包括局部变量。</p>
<p>字段表结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody></table>
<p>字段修饰符放在 access_flags 项目中，他与类中的 access_flags 项目非常类似，结构如下：</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>字段是否为 public</td>
</tr>
<tr>
<td>ACC_PRIVATE</td>
<td>0x0002</td>
<td>字段是否为 private</td>
</tr>
<tr>
<td>ACC_PROTECTED</td>
<td>0x0004</td>
<td>字段是否为 private</td>
</tr>
<tr>
<td>ACC_STATIC</td>
<td>0x0008</td>
<td>字段是否为 static</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>字段是否为 final</td>
</tr>
<tr>
<td>ACC_VOLATILE</td>
<td>0x0040</td>
<td>字段是否为 volatile</td>
</tr>
<tr>
<td>ACC_TRANSIENT</td>
<td>0x0080</td>
<td>字段是否为 transient</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>字段是否由编译器自动产生</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>字段是否枚举</td>
</tr>
</tbody></table>
<p>跟随 access_flags 标志的是两项索引值：name_index 和 descriptor_index，他们都是对常量池的引用，分别代表着字段的简单名称以及字段和方法的描述符。</p>
<h4 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h4><p>Class 文件存储格式中对方法的描述与对字段的描述几乎一致。</p>
<p>方法表结构如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody></table>
<p>方法表的访问标志结构如下：</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>方法是否为 public</td>
</tr>
<tr>
<td>ACC_PRIVATE</td>
<td>0x0002</td>
<td>方法是否为 private</td>
</tr>
<tr>
<td>ACC_PROTECTED</td>
<td>0x0004</td>
<td>方法是否为 private</td>
</tr>
<tr>
<td>ACC_STATIC</td>
<td>0x0008</td>
<td>方法是否为 static</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>方法是否为 final</td>
</tr>
<tr>
<td>ACC_SYNCHRONIZED</td>
<td>0x0020</td>
<td>方法是否为 synchronized</td>
</tr>
<tr>
<td>ACC_BRIDGE</td>
<td>0x0040</td>
<td>方法是否为编译器产生的桥接方法</td>
</tr>
<tr>
<td>ACC_VARARGS</td>
<td>0x0080</td>
<td>方法是否接收不定参数</td>
</tr>
<tr>
<td>ACC_NATIVE</td>
<td>0x0100</td>
<td>方法是否为 native</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0200</td>
<td>方法是否为 abstract</td>
</tr>
<tr>
<td>ACC_STRICTFP</td>
<td>0x0400</td>
<td>方法是否接为 stricttfp</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>方法是否由编译器自动产生</td>
</tr>
</tbody></table>
<h4 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h4><p>在 Class 文件、字段表、方法表都可以携带自己的属性表集合。总共有 21 项预定义的属性，如下：</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/2395997-952f38c0c361dba3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p>
<h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载共 7 个阶段。其中验证、准备和解析 3 个部分统称为连接。如下图所示：</p>
<p><img data-src="http://static.zybuluo.com/Rico123/ojhhtids41ivtuowfj74mkb2/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B"></p>
<p>其中，加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班的<code>开始</code>，因为这些阶段通常都是相互交叉地混合式进行的，通常会在一个阶段执行的过程中调用、激活另外一个阶段。</p>
<p>对于初始化阶段，严格规定了<code>有且只有</code>5 种情况必须立即对类进行初始化：</p>
<ol>
<li>遇到 new、getstatic、putstatic 和 invokestatic 这四条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这四条指令的最常见的 Java 代码场景是:</li>
</ol>
<ul>
<li>使用 new 关键字实例化对象的时候；</li>
<li>读取或设置一个类的静态字段（被 final 修饰，已在编译器把结果放入常量池的静态字段除外）的时候；</li>
<li>调用一个类的静态方法的时候。</li>
</ul>
<ol start="2">
<li>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li>
<li>当虚拟机启动时，用户需要制定一个要执行的主类（包含 main()方法的类），虚拟机会先初始化这个主类</li>
<li>当使用 JDK1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化</li>
</ol>
<p>这 5 种场景中的行为被称为<code>对一个类进行主动引用</code>，除此之外，所有引用类的方式都不会触发初始化，称为<code>被动引用</code>。</p>
<p>接口的初始化与类只在第 3 种场景有区别：当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口都完成了初始化，只有在真正使用到父接口时才会初始化。</p>
<h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载过程中的一个阶段，在加载阶段，虚拟机完成以下 3 件事情：</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<p>一个非数组类在加载阶段，即可以使用系统提供的引导类加载器去控制字节流的获取方式，也可以有用户自定义的类加载器去完成</p>
<p>数组类本身不通过类加载器创建，而是由 Java 虚拟机直接创建的，其（简称 C）创建过程遵循以下规则：</p>
<ul>
<li>如果数组的组件类型（指数组去掉一个维度的类型）是引用类型，递归采用加载过程区加载这个组件类型，数组 C 将在加载该组件类型的类加载器的类名称空间上被标识</li>
<li>如果数组的组件类型不是引用类型，Java 虚拟机将会把数组 C 标记为与引导类加载器关联</li>
<li>数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，数组类的可见性默认为 public</li>
</ul>
<p>加载阶段完成后，虚拟机外部的二进制字节流就会按照虚拟机所需的格式存储在方法区中，方法区中的数据存储格式由虚拟机实现自定义，然后会在内存中实例化一个 java.lang.Class 类的对象，HotSpot 中这个对象存放在方法区中，这个对象将作为程序访问方法区中类型数据的外部接口。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证是连接阶段的第一步，目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。</p>
<p>验证阶段大致上会完成下面 4 个阶段的检验动作：<code>文件格式验证</code>、<code>元数据验证</code>、<code>字节码验证</code>、<code>符号引用验证</code></p>
<ol>
<li>文件格式验证：主要验证字节流是否符合 Class 文件的格式规范</li>
<li>元数据验证：对字节码描述的信息进行语义分析，保证其描述的信息符合 Java 语言规范的要求</li>
<li>字节码验证：是最复杂的验证阶段，目的是通过数据流和控制流分析，确定程序语意是合法的、符合逻辑的</li>
<li>符号引用验证：发生在虚拟机将符号引用转化为直接引用时，目的是确保解析动作能正常进行</li>
</ol>
<p>验证阶段是非常重要但是非必要的阶段，如果运行的全部代码都已经被反复使用和验证过，可以考虑使用-Xverify:none 参数关闭大部分类验证措施，缩短虚拟机类加载时间</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为<code>类变量</code>分配内存并设置<code>类变量</code>初始值的阶段，这些变量将在方法区进行内存分配。</p>
<p>如果类字段的字段属性表中存在 ConstantValue 属性，准备阶段变量会被初始化为 ConstantValue 属性所指定的值。</p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量</p>
<p>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>类初始化阶段才真正开始执行类中定义的 Java 程序代码，是执行类构造器<clinit>()方法的过程。</p>
<ol>
<li><clinit>()方法是有编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的</li>
<li><clinit>()方法与类的构造函数不同，他不需要显式调用父类构造器，虚拟机会保证父类的<clinit>()方法先执行，所以第一个被执行的<clinit>()方法一定是 java.lang.Object</li>
<li>由于父类<clinit>()方法先执行，所以父类中定义的静态语句块要优先于子类变量的赋值操作</li>
<li><clinit>()方法对于类或接口来说不是必需的，如果类中没有静态语句块和对变量的赋值操作，则不为这个类生成<clinit>()方法</li>
<li>接口的<clinit>()方法不需要先执行父类的<clinit>()方法，只有当父接口中定义的变量使用时，父接口才会初始化。接口的实现类初始化时也不会执行接口的<clinit>()方法</li>
<li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确的加锁、同步</li>
</ol>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载阶段的“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作被设计放到 Java 虚拟机外部实现，以便让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块称为<code>类加载器</code>。</p>
<h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</p>
<h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>从 Java 虚拟机的角度来讲，只存来两种不同的类加载器：<code>启动类加载器</code>和<code>其他类加载器</code></p>
<p>从 Java 开发人员的角度来看，大部分 Java 程序会使用一下三种系统提供的类加载器：</p>
<ol>
<li>启动类加载器（Bootstrap ClassLoader）：将存放在<JAVA_HOME>/lib 目录中的，或被-Xbootclasspath 参数指定路径中的，且被虚拟机是别的类库加载到虚拟机内存中</li>
<li>扩展类加载器（Extension ClassLoader）：将存放在<JAVA_HOME>/lib/ext 目录中的，或呗 java.ext.dirs 系统变量指定路径中的所有类库加载到虚拟机内存中</li>
<li>应用程序类加载器（Application ClassLoader）：负责加载用户类路径（ClassPath）上所指定的类库</li>
</ol>
<p><img data-src="/uploads/in-post/parent-delegate.png"></p>
<p>图中展示的类加载器之间的层次关系，称为类加载器的<code>双亲委派模型</code>，该模型要求除了启动类加载器外，其余的类加载器都应当有自己的父类加载器。类加载器的父子关系都是使用<code>组合关系</code>来复用父加载器的</p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载请求，他首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的家在请求最终都应该传送到顶层的启动类加载器中，只有当父加载器在其搜索范围内没有找到所需的类时，子加载器才会尝试去加载。</p>
<p>双亲委派模型的代码都集中在 java.lang.ClassLoader 的 loadClass()方法中，代码如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">Class</span>&lt;?&gt; loadClass(String name,<span class="keyword">boolean</span> resolve)<span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">// 首先检查请求的类是否应经被加载过了</span></span><br><span class="line">    <span class="keyword">Class</span> c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">                c = parent.loadClass(name,<span class="keyword">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">            <span class="comment">// 如果父类加载器抛出ClassNotFoundException</span></span><br><span class="line">            <span class="comment">// 说明父类无法完成加载请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 在父类加载器无法加载的时候</span></span><br><span class="line">            <span class="comment">// 再调用本身的findClass()方法来进行类加载</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(resolve)&#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码逻辑为：先检查是否已经被加载过，若没有加载则调用父加载器的 loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException 后，再调用自己的 findClass()方法进行类加载。</p>
<h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><p>双亲委派模型不是一个强制性的约束模型，而是 Java 设计者推荐给开发者的类加载器实现方式。到目前为止，出现过 3 次较大规模的“被破坏”情况。</p>
<ol>
<li>双亲委派模型在 JDK1.2 之后引入，为了向前兼容，在 java.lang.ClassLoader 添加了一个新的 protected 方法 findClass()</li>
<li>为了解决基础类需要调用会用户代码的问题，引入了一个不太优雅的设计：<code>线程上下文类加载器</code>，父类加载器可以通过他请求子类加载器去完成类加载动作</li>
<li>由于用户对程序动态性的追求而导致，例如 OSGi 的网状结构</li>
</ol>
<p>只要有足够的理由和意义，突破已有的原则就可以认为是一种创新。</p>
<p>参考</p>
<p>1、周志明，深入理解 Java 虚拟机：JVM 高级特性与最佳实践，机械工业出版社</p>
<p>2、xiedacon，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMGI3YTBjYTY0MGI=">《深入理解 java 虚拟机》-类文件结构<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>类文件结构</tag>
        <tag>类加载机制</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--工厂方法模式</title>
    <url>/2018/06/16/2018-06-16-design-pattern-factory-method/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于简单工厂模式每次增加新的产品时，都需要修改工厂类，违背了开闭原则，可以通过定义工厂类的父类，为每种产品都创建一个工厂，从而动态的获取子类，并且增加产品时增加工厂子类即可，不用修改工厂父类。</p>
<span id="more"></span>

<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>解决简单工厂模式中违背开闭原则的问题</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>新增产品时，增加具体产品类和工厂子类即可，不用更改工厂父类</li>
<li>每个具体工厂类只负责一个产品的创建，更符合单一职责原则</li>
<li>更利于形成继承结构</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>每次增加新产品时，都需要增加工厂类，导致系统复杂度变高</li>
<li>产品和工厂类之间的依赖较大</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们将创建一个<code>Product</code>接口和实现<code>Product</code>接口的实体类，工厂接口类<code>Factory</code>和实现<code>Factory</code>接口的实体类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="title class_"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    Product getProduct();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    void show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Prouduct1</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Product</span></span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void show() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是产品1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Prouduct2</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Product</span></span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void show() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是产品2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Factory1</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Factory</span></span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product getProduct() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Prouduct1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Factory2</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Factory</span></span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product getProduct() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Prouduct2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">FactoryMethodPattern</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Factory factory1 = <span class="keyword">new</span> <span class="type">Factory1</span>();</span><br><span class="line">        factory1.getProduct().show();</span><br><span class="line">        Factory factory2 = <span class="keyword">new</span> <span class="type">Factory2</span>();</span><br><span class="line">        factory2.getProduct().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">我是产品1</span><br><span class="line">我是产品2</span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>但用户只知道产品对应的工厂，而不知道具体产品的类名时可以使用此模式。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--抽象工厂模式</title>
    <url>/2018/06/25/2018-06-25-design-pattern-abstract-factory/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<code>工厂方法模式</code>中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。此时工厂方法模式就无法完成需求，而抽象工厂模式可以解决这个问题。</p>
<span id="more"></span>

<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用<code>抽象工厂模式</code>。</p>
<p><code>抽象工厂模式</code>与<code>工厂方法模式</code>最大的区别在于:</p>
<ul>
<li>工厂方法模式针对的是一个产品等级结构</li>
<li>抽象工厂模式需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。</li>
</ul>
<p>当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li>
<li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li>
<li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li>
<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>AbstractFactory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
<li>AbstractProduct：抽象产品</li>
<li>Product：具体产品</li>
</ul>
<p><img data-src="/uploads/in-post/design_patterns/abstract_factory_struc.jpg"></p>
<p><strong>时序图</strong></p>
<p><img data-src="/uploads/in-post/design_patterns/abstract_factory_seq.jpg"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>AbstractProductA:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">AbstractProductA</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractProductB:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">AbstractProductB</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductA1:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA1</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;This is product A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductA2:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA2</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;This is product A2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductB1:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB1</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;This is product B1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProductB2:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB2</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;This is product B2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractFactory:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteFactory1:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConcreateFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductA1</span> createProductA() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductB1</span> createProductB() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteFactory1:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConcreateFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductA2</span> createProductA() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">ProductB2</span> createProductB() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AbstractFactory productFactory1 <span class="operator">=</span> new ConcreateFactory1()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        AbstractProductA a1 <span class="operator">=</span>  productFactory1.createProductA()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        a1.display()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        AbstractProductB b1 <span class="operator">=</span> productFactory1.createProductB()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        b1.draw()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        AbstractFactory productFactory2 <span class="operator">=</span> new ConcreateFactory2()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        AbstractProductA a2 <span class="operator">=</span> productFactory2.createProductA()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        a2.display()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        AbstractProductB b2 <span class="operator">=</span> productFactory2.createProductB()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">        b2.draw()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> A1</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> B1</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> A2</span><br><span class="line">This <span class="built_in">is</span> <span class="built_in">product</span> B2</span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用抽象工厂模式：</p>
<ul>
<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。<br>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li>
<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 简明教程</title>
    <url>/2018/06/30/2018-06-30-vim-introduction/</url>
    <content><![CDATA[<blockquote>
<p>“Vim 是一个历史悠久的，具有很多命令的功能非常强大的文本编辑器，被称为 <code>编辑器之神</code>。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVmlt">Vim<i class="fa fa-external-link-alt"></i></span> 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。两派使用者经常发起 “XXX 才是最好的编辑器” 之争。</p>
<span id="more"></span>

<h4 id="Vim-的几种模式"><a href="#Vim-的几种模式" class="headerlink" title="Vim 的几种模式"></a>Vim 的几种模式</h4><p>Vim 最常用的有四个模式，分别是：</p>
<p><code>normal 模式 </code>：在普通模式中，用户可以执行一般的编辑器命令，比如移动光标，删除文本等等。这也是 Vim 启动后的默认模式。<br><code>insert 模式 </code>：在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按 ESC 键回到普通模式。<br><code>visual 模式 </code>：这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim 的 “文本对象” 也能和移动命令一样用在这个模式中。<br><code>command 模式 </code>：在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（<code>:</code> 键），搜索（<code>/</code> 和 <code>?</code> 键）或者过滤命令（<code>!</code> 键）。在命令执行之后，Vim 返回到命令行模式之前的模式，通常是普通模式。</p>
<p>此外还有一些衍生模式，包括：</p>
<p><code>操作符等待模式</code>：这个派生模式指普通模式中，执行一个操作符命令后 Vim 等待一个 “动作” 来完成这个命令。如 <code>dw</code> 中的 <code>d</code> 即为操作符<br><code>插入普通模式</code>：这个模式是在插入模式下按下 <code>Ctrl-o</code> 键的时候进入。这个时候暂时进入普通模式，执行完一个命令之后，Vim 返回插入模式<br><code>替换模式</code>：这是一个特殊的插入模式，在这个模式中可以做和插入模式一样的操作，但是每个输入的字符都会覆盖文本缓冲中已经存在的字符。在普通模式下按 <code>R</code> 键进入。</p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>Vim 自带一个交互式的基本教程，里面包括了最常用的命令和你应该学了解的最基础的知识，安装 vim 之后，只需要在终端输入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vimtutor</span></span><br></pre></td></tr></table></figure>

<p>运行命令后，会出现操作系统对应语言的教程文档，首先要做的就是要对这个基础文档中的所有命令进行练习，直到形成肌肉记忆，下面简单总结一下教程中使用到的命令。</p>
<h4 id="进入和退出-Vim"><a href="#进入和退出-Vim" class="headerlink" title="进入和退出 Vim"></a>进入和退出 Vim</h4><p>输入命令 <code>vim filename</code>，即为使用 vim 打开文件。由于这是一个新建文件，你会得到一个空的窗口。屏幕看起来会像下面这样:</p>
<pre><code>    +---------------------------------------+
    |#                                      |
    |~                                      |
    |~                                      |
    |~                                      |
    |~                                      |
    |&quot;file.txt&quot; [New file]                  |
    +---------------------------------------+
            (&#39;#&quot; 是当前光标的位置)
</code></pre>
<p>以波纹线 (<code>~</code>) 开头的行表示该行在文件中不存在。换句话说，如果 Vim 打开的文件不能充满这个显示的屏幕，它就会显示以波纹线开头的行。在屏幕的底部，有一个消息行指示文件名为 file.txt 并且说明这是一个新建的文件。这行信息是临时的，新的信息可以覆盖它。</p>
<p>处于 <code>normal</code> 模式时 (按 <ESC> 键)，输入命令 <code>:q</code>，即可退出 vim 编辑器，如果不想保存修改而退出，使用 <code>:q!</code> 命令。</p>
<p>处于 <code>normal</code> 模式时，输入命令 <code>:wq</code> 可以保存文件并退出 vim 编辑器，其中 <code>:w</code> 命令表示保存文件，也可以按下 <code>ZZ</code> 保存并退出文件。</p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>Vim 使用 <code>hjkl</code> 来控制光标的移动。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">h 的键位位于四个字母的最左边，每次按下光标就会向左移动</span><br><span class="line">l 的键位位于四个字母的最右边，每次按下光标就会向右移动</span><br><span class="line">我们一般说上下，<span class="keyword">jk </span>键位的位置正好对应了这个说法，<span class="keyword">j </span>表示上，k 表示下</span><br></pre></td></tr></table></figure>

<p>按下 <code>G</code> 键可以跳转到文件末尾，按下 <code>gg</code> 可以跳转到文件开头，也可以通过 <code>: 行号 </code> 或者 <code> 行号 G</code> 命令快速跳转到行号处。</p>
<pre><code>            |   first line of a file   ^
            |   text text text text    |
            |   text text text text    |  gg
   7G / :7  |   text text text text    |
            |   text text text text
            |   text text text text
            V   text text text text    |
                text text text text    |  G
                text text text text    |
                last line of a file    V
</code></pre>
<p>按下 <code>^</code> 可以跳转到本行第一个不为空白字符处，按下 <code>0</code> 可以返回行首。按下 <code>$</code> 可以跳转到行尾。</p>
<pre><code>             ^
       &lt;------------
  .....This is a line with example text
  &lt;-----------------   ---------------&gt;
  0                  $
  (这里 &quot;.....&quot; 表示空白字符)
</code></pre>
<p>按下 <code>w</code> 可以跳转到下一个单词词首， <code>3w</code> 表示跳转 3 个单词。</p>
<pre><code>      This is a line with example text
      ---&gt;--&gt;-&gt;-----------------&gt;
       w  w  w    3w
</code></pre>
<p>按下 <code>b</code> 可以跳转到上一个单词词首</p>
<pre><code>    This is a line with example text
    &lt;----&lt;--&lt;-&lt;---------&lt;---
       b   b b    2b      b
</code></pre>
<p>按下 <code>e</code> 可以跳转到下一个单词词尾，按下 <code>ge</code> 可以跳转到上一个单词词尾。</p>
<pre><code>    This is a line with example text
       &lt;-   &lt;--- -----&gt;   ----&gt;
       ge    ge     e       e
</code></pre>
<p>上面的 <code>w, b, e, ge</code> 会将标点符号也认为是一个单词，如果使用 <code>W, B, E, gE</code> 会以空白字符作为分隔符进行单词跳转，如下：</p>
<pre><code>             ge      b          w                             e
             &lt;-     &lt;-         ---&gt;                          ---&gt;
      This is-a line, with special/separated/words (and some more).
         &lt;----- &lt;-----         --------------------&gt;         -----&gt;
         gE      B                   W                       E
         ge      b          w                             e
</code></pre>
<p>使用操作符 <code>f</code> 可以向后移动到一个指定的字符处，如 <code>fx</code> 向后查找到本行中的字符 <code>x</code> 。</p>
<p>例如，假定你在下行行首，而想移动到单词 <code>human</code> 的 <code>h</code> 那里。执行命令 <code>fh</code> 即可:</p>
<pre><code>    To err is human.  To really foul up you need a computer.
    ----------&gt;---------------&gt;
        fh           fy
</code></pre>
<p>这个例子里同时演示 <code>fy</code> 命令移动到了 <code>really</code> 的词尾。</p>
<p>你可以在这个命令前面加计数前缀，所以，你可以用 <code>3fl</code> 命令移动到光标后第三个 <code>l</code> 处，即 <code>foul</code> 的 <code>l</code>:</p>
<pre><code>    To err is human.  To really foul up you need a computer.
              ---------------------&gt;
                       3fl
</code></pre>
<p><code>F</code> 命令用于向左查找:</p>
<pre><code>    To err is human.  To really foul up you need a computer.
              &lt;---------------------
                        Fh
</code></pre>
<p><code>tx</code> 命令与 <code>fx</code> 相似，但它会把光标移动到目标字符的前一个字符上。提示: <code>t</code> 表示 <code>To</code> (到达)。这个命令的反向版本是 <code>Tx</code>。</p>
<pre><code>    To err is human.  To really foul up you need a computer.
               &lt;------------  -------------&gt;
                    Th              tn
</code></pre>
<p>移动光标的命令是 Vim 中最为基础的命令，但是他和我们平常使用的上下左右键有较大的区别，所以需要进行大量的练习让他成为你理所当然的操作习惯。</p>
<p>推荐一款游戏用来练习 Vim 的基础命令：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ptb29uMDE4L1BhY1ZpbQ==">PacVim<i class="fa fa-external-link-alt"></i></span></p>
<p>通过这个游戏，可以快速的上手和熟练 vim 的基本操作，值得一试。</p>
<h4 id="相对屏幕移动"><a href="#相对屏幕移动" class="headerlink" title="相对屏幕移动"></a>相对屏幕移动</h4><p>通过 <code>Ctrl-f</code> 向下翻页，<code>Ctrl-b</code> 向上翻页， <code>Ctrl-u</code> 向下滚动半屏（即把当前行上半屏的行置于当前行）， <code>Ctrl-d</code> 向上滚动半屏（即把当前行下半屏的行置于当前行）， <code>Ctrl-e</code> 逐行下滚，<code>Ctrl-y</code> 逐行上滚。这在几乎所有 Unix 软件中都是可以使用的，比如 man 和 less。</p>
<pre><code>                                   +----------------+
                                   | some text      |
                                   | some text      |
          原文本                    | some text      |
    +---------------+              | some text      |
    | some text     |  CTRL-U  --&gt; |                |
    |               |              | 123456         |
    | 123456        |              +----------------+
    | 7890          |
    |               |              +----------------+
    | example       |  CTRL-D --&gt;  | 7890           |
    +---------------+              |                |
                                   | example        |
                                   | example        |
                                   | example        |
                                   | example        |
                                   +----------------+
</code></pre>
<p><code>H</code> 可以移动到屏幕的首行，<code>L</code> 到屏幕尾行，<code>M</code> 到屏幕中间。</p>
<pre><code>                    +---------------------------+
            H --&gt;   | text sample text          |
                    | sample text               |
                    | text sample text          |
                    | sample text               |
            M --&gt;   | text sample text          |
                    | sample text               |
                    | text sample text          |
                    | sample text               |
            L --&gt;   | text sample text          |
                    +---------------------------+
</code></pre>
<p><code>zt</code> 可以置顶当前行，通常用来查看完整的下文，比如函数、类的定义。 <code>zz</code> 将当前行移到屏幕中部，<code>zb</code> 移到底部。</p>
<pre><code>    +------------------+             +------------------+
    | some text        |   zt  --&gt;   | line with cursor |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | line with cursor |             | some text        |
    | some text        |             | some text        |
    +------------------+             +------------------+

    +------------------+             +------------------+
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |   zz  --&gt;   | line with cursor |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | line with cursor |             | some text        |
    | some text        |             | some text        |
    +------------------+             +------------------+

    +------------------+             +------------------+
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | some text        |             | some text        |
    | line with cursor |             | some text        |
    | some text        |   zb  --&gt;   | line with cursor |
    +------------------+             +------------------+
</code></pre>
<h4 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h4><h5 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h5><p>在 normal 模式下，按下 <code>i</code> 键可以在光标所在处进入 insert 模式，按下 <code>I</code> 键会直接在行首进入 insert 模式。</p>
<p>在 normal 模式下，按下 <code>a</code> 键可以在光标所在处之后进入 insert 模式，按下 <code>A</code> 键会直接在行尾进入 insert 模式。</p>
<p>在 normal 模式下，按下 <code>o</code> 键可以在光标所在行之后插入空行，按下 <code>O</code> 键则是在光标所在行之前插入空行，两个命令都会进入 insert 模式。</p>
<p>如果进入了 insert 模式，Vim 会在窗口的底部显示 <code>--INSERT--</code> (中文模式显示的是 <code>-- 插入 --</code>)，这表示你在插入模式。</p>
<pre><code>    +---------------------------------------+
    |A very intelligent turtle              |
    |Found programming UNIX a hurdle        |
    |~                                      |
    |~                                      |
    |-- INSERT --                           |
    +---------------------------------------+
</code></pre>
<h5 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h5><p>在 normal 模式下，可以使用 <code>x</code> 键删除光标坐在位置的字符。</p>
<p>在 normal 模式下，可以使用 <code>dw</code> 命令删除至一个单词的末尾，其中 <code>d</code> 是一个 <code>操作符</code>，可以和其他 <code>动作</code> 命令进行组合，使用删除操作符 <code>d</code> 的命令格式如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">d</span> motion</span><br><span class="line"><span class="comment"># d      - 删除操作符</span></span><br><span class="line"><span class="comment"># motion - 操作符的操作对象</span></span><br></pre></td></tr></table></figure>

<p>如 <code>dd</code> 是删除一行，<code>db</code> 是往前删除至单词开头，<code>d$</code> 是删除至行末等。</p>
<h5 id="替换文本"><a href="#替换文本" class="headerlink" title="替换文本"></a>替换文本</h5><p>在 normal 模式下，按下 <code>r</code> 键可以进入替换状态，可以输入任意字符替换光标所在的字符，替换后即会退出替换状态，如果想保持替换状态，可以使用 <code>R</code> 命令，即可进入替换模式，你输入的字符会依次替换光标所在的字符，直到你按 <ESC> 退出替换模式。</p>
<pre><code>    +---------------------------------------+
    |A very intelligent turtle              |
    |Found programming UNIX a hurdle        |
    |~                                      |
    |~                                      |
    |-- REPLACE --                          |
    +---------------------------------------+
</code></pre>
<h5 id="更改文本"><a href="#更改文本" class="headerlink" title="更改文本"></a>更改文本</h5><p>使用操作符 <code>c</code> 可以实现更改文本，实现的功能相当于删除并进入 insert 模式，例如 <code>cw</code> 命令表示删除一个单词并进入 insert 模式，<code>c$</code> 命令表示删除至行尾并进入 insert 模式， <code>cc</code> 表示修改一整行，但是会保留这一行的缩进。</p>
<pre><code>    To err is human
       -------&gt;
         c2w
    To human
</code></pre>
<h5 id="复制和粘贴文本"><a href="#复制和粘贴文本" class="headerlink" title="复制和粘贴文本"></a>复制和粘贴文本</h5><p>使用操作符 <code>y</code> 可以复制文本，例如 <code>yy</code> 可以复制一行的文本，<code>yw</code> 可以复制一个单词，使用 visual 模式选中文本后按 <code>y</code> 可以复制选中文本。</p>
<p>除了复制的文本外，Vim 的删除操作也会将删除的文本存入一个寄存器中，使用 <code>p</code> 命令可以在光标之后插入寄存器中的内容，使用 <code>P</code> 命令可以在光标之前插入寄存器中的内容。</p>
<pre><code>    let sqr = LongVariable *
             --------------&gt;
                   y2w

    let sqr = LongVariable *
                           p

    let sqr = LongVariable * LongVariable
</code></pre>
<h5 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h5><p>之前说到使用 <code>:w</code> 命令可以保存文件，默认存储的文件名为打开文件的文件名，如果需要另存为的话，只需要在命令后加上另存为的文件名即可，如 <code>:w filename</code> 便可将文件另存为为 <code>filename</code>。</p>
<p>除了保存整个文件之外，vim 还支持部分文本的保存，按下 <code>v</code> 进入 visual 模式，移动光标选中想要部分保存的内容，输入 <code>:</code> 字符，可以看到屏幕底部会出现 <code>:&#39;&lt;,&#39;&gt;</code>，输入命令 <code>w filename</code>，命令变为 <code>:&#39;&lt;,&#39;&gt;w filename</code> 即可把选中的内容保存到 <code>filename</code> 文件中。</p>
<h5 id="提取和合并文件"><a href="#提取和合并文件" class="headerlink" title="提取和合并文件"></a>提取和合并文件</h5><p>和 <code>:w</code> 命令相对应的，<code>:r</code> 命令是从文件中读取文本，输入命令 <code>:r filename</code>，将会读取文件 <code>filename</code> 中的所有内容，并将其插入到光标所在位置处。</p>
<h4 id="使用计数指定动作"><a href="#使用计数指定动作" class="headerlink" title="使用计数指定动作"></a>使用计数指定动作</h4><p>在 normal 模式下，输入 <code>4h</code> 使光标向前移动 4 个位置，输入 <code>2w</code> 使光标向后移动两个单词。</p>
<p>在 normal 模式下，输入 <code>d2w</code> 向后删除两个单词，输入 <code>2dw</code> 先后删除两个单词，这两个命令的区别是，前者是执行一次删除两个单词的命令，后者是执行两次删除一个单词的命令。</p>
<h4 id="撤销类命令"><a href="#撤销类命令" class="headerlink" title="撤销类命令"></a>撤销类命令</h4><p>在 normal 模式下，输入 <code>u</code> 可以撤销上一条命令，输入 <code>U</code> 可以恢复一行的原始状态，输入 <code>Ctrl-r</code> 可以重做撤销的命令。</p>
<h4 id="定位文件状态"><a href="#定位文件状态" class="headerlink" title="定位文件状态"></a>定位文件状态</h4><p>在 normal 模式下，按下 <code>Ctrl-g</code> 会显示当前编辑文件中当前光标所在行位置以及文件的状态信息。</p>
<h4 id="搜索类命令"><a href="#搜索类命令" class="headerlink" title="搜索类命令"></a>搜索类命令</h4><p>在 normal 模式下，输入 <code>/</code> 加上搜索字符串可以在当前文件中查找该字符串，查找后，按下 <code>n</code> 键可以跳转到下一个搜索字符处，按下 <code>N</code> 可以跳转到上一个搜索字符处。如果想使用逆向查找命令，可以使用 <code>?</code> 和搜索字符串进行查找。</p>
<p>要回到之前的位置，可以按下 <code>Ctrl-o</code>，重复按可以回到更多步，而按下 <code>Ctrl-i</code> 可以跳到更新的位置。</p>
<p>当光标处于 <code>&#123;[()]&#125;</code> 任意一个括号字符上时，按下 <code>%</code> 可以快速查找并跳转到匹配的括号位置。</p>
<pre><code>                        %
                     &lt;-----&gt;
            if (a == (b * c) / d)
               &lt;----------------&gt;
                        %
</code></pre>
<p>当光标不在一个括号字符上，<code>%</code> 会先正向查找找到一个。比如当光标停留在上例中的行首时，<code>%</code> 会正向查找到第一个 <code>)</code>。再按一次会移动到它的匹配处。</p>
<pre><code>            if (a == (b * c) / d)
            --------------------&gt;
                       %
</code></pre>
<h4 id="替换类命令"><a href="#替换类命令" class="headerlink" title="替换类命令"></a>替换类命令</h4><p>在 normal 模式下，输入命令 <code>:s/old/new/g</code>，可以将文件中所有的 <code>old</code> 字符串替换为 <code>new</code>。</p>
<p>只替换单行的字符串可以使用命令 <code>:s/old/new</code>。</p>
<p>要替换多行字符串可以使用命令 <code>:#,#s/old/new/g</code>，其中 <code>#</code> 表示行号，如 <code>:4,8s/old/new/g</code> 表示将 4 到 8 行的 <code>old</code> 替换为 <code>new</code>。</p>
<p>如果要进行有提示的替换，可以使用命令 <code>:s/old/new/gc</code>，每次替换都会进行是否替换的询问。</p>
<h4 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h4><p>在编辑过程中，同样可以执行 shell 命令，只需要输入 <code>:! command</code> 即可运行外部的 shell 命令，命令执行后会回到 vim 中。</p>
<p>** 上面的所有命令都是使用 vim 需要学习的基础命令，只有把基础命令都联系到滚瓜烂熟，肌肉记忆的程度，才能够真正的感受到使用 vim 的便捷之处，加油！**</p>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="选项配置"><a href="#选项配置" class="headerlink" title="选项配置"></a>选项配置</h4><p>Vim 可以进行预先配置启动项，从而增加插件以增强 Vim 的功能， 要配置 Vim，需要使用 <code>vimrc</code> 文件。</p>
<h5 id="vimrc-文件"><a href="#vimrc-文件" class="headerlink" title="vimrc 文件"></a>vimrc 文件</h5><p>如果已经有 <code>vimrc</code> 文件了，可以直接在 vim 中输入命令 <code>:edit $MYVIMRC</code> 来进行编辑。</p>
<p>如果还没有 <code>vimrc</code> 文件，可以在用户目录创建该文件，即 <code>~/.vimrc</code>，如果想 vim 启动时显示行号，可以在 <code>vimrc</code> 文件中加上：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure>

<p>重启 vim 后即可生效。</p>
<p>下面简单介绍一些常用设置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">syntax on                       <span class="string">&quot; 设置语法高亮</span></span><br><span class="line"><span class="string">set fileencodings=utf-8         &quot;</span> vim 写入文件时编码类型</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">termencoding</span>=utf-8          <span class="string">&quot; 输出到终端时编码类型</span></span><br><span class="line"><span class="string">set encoding=utf-8              &quot;</span> 缓存文本，寄存器，脚本文件编码类型</span><br><span class="line"><span class="built_in">set</span> number                      <span class="string">&quot; 显示行号，也可以使用 set nu</span></span><br><span class="line"><span class="string">set cursorline                  &quot;</span> 突出显示当前行</span><br><span class="line"><span class="built_in">set</span> cursorcolumn                <span class="string">&quot; 突出显示当前列</span></span><br><span class="line"><span class="string">set nocompatible                &quot;</span> 以不兼容模式运行 vim</span><br><span class="line"><span class="built_in">set</span> showmatch                   <span class="string">&quot; 显示括号匹配</span></span><br><span class="line"><span class="string">set tabstop=4                   &quot;</span> 设置 Tab 键长度为 4 个空格</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">shiftwidth</span>=4                <span class="string">&quot; 设置自动缩进长度为 4 个空格</span></span><br><span class="line"><span class="string">set softtabstop                 &quot;</span> 设置编辑模式删除 Tab 时为 4 个空格</span><br><span class="line"><span class="built_in">set</span> expandtab                   <span class="string">&quot; 设置用空格来表示缩进</span></span><br><span class="line"><span class="string">set smarttab                    &quot;</span> 根据文件中其他地方的缩进空格个数来确定一个 Tab 是多少个空格</span><br><span class="line"><span class="built_in">set</span> autoindent                  <span class="string">&quot; 在插入一个新行时使用和前一行相同的缩进</span></span><br><span class="line"><span class="string">set smartindent                 &quot;</span> 打开智能缩进</span><br><span class="line"><span class="built_in">set</span> paste                       <span class="string">&quot; 设置为粘贴模式，使用鼠标右键粘贴时避免出现格式变形</span></span><br><span class="line"><span class="string">set listchars=▸-,eol:↩︎,trail:-↩ &quot;</span> 将 Tab 键显示为 &gt;-，行尾显示 ↩︎， 将行尾空格显示为 -↩︎</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">backspace</span>=indent,eol,start  <span class="string">&quot; 指明在插入模式下在哪里允许 &lt;BS&gt; 删除光标前面的字符。逗号分隔的三个值分别指: 行首的空白字符，换行符和插入模式开始处之前的字符。</span></span><br><span class="line"><span class="string">set nowrap                      &quot;</span> 禁止自动换行显示</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">history</span>=1000                <span class="string">&quot; 保存 1000 条命令和 1000 个查找模式的历史，数值可按需修改</span></span><br><span class="line"><span class="string">set ruler                       &quot;</span> 在 vim 窗口右下角显示当前光标的位置</span><br><span class="line"><span class="built_in">set</span> showcmd                     <span class="string">&quot; 在 vim 窗口右下角 ruler 左侧显示未完成的命令</span></span><br><span class="line"><span class="string">set incsearch                   &quot;</span> 设置实时匹配</span><br><span class="line"><span class="built_in">set</span> hlsearch                    <span class="string">&quot; 设置搜索时高亮匹配词</span></span><br><span class="line"><span class="string">filetype plugin indent on       &quot;</span> 开启文件类型探测，使用文件类型相关插件，使用缩进文件</span><br><span class="line">autocmd FileType text setlocal <span class="attribute">textwidth</span>=78  <span class="string">&quot; 一行超过 78 行时自动换行</span></span><br><span class="line"><span class="string">set foldenable                  &quot;</span> 允许折叠</span><br></pre></td></tr></table></figure>

<p>更多配置可以使用这个 <span class="exturl" data-url="aHR0cDovL3ZpbWNvbmZpZy5jb20v">Vim 配置工具<i class="fa fa-external-link-alt"></i></span> 来模拟。</p>
<p>也可以参考多人推荐的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwZjEzL3NwZjEzLXZpbQ==">spf13-vim<i class="fa fa-external-link-alt"></i></span> 来学习他人的配置。</p>
<h5 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h5><p>Vim 可以通过插件增强功能，把插件放入 Vim 的 <code>plugin</code> 目录中即可使插件生效。</p>
<p>如果没有 <code>plugin</code> 目录，可以使用命令 <code>mkdir -p ~/.vim/plugin</code> 创建。</p>
<p>Vim 中共有两种插件：</p>
<ul>
<li>全局插件： 用于所有类型的文件</li>
<li>文件类型插件：仅用于特定类型的文件</li>
</ul>
<p>当然，这种拷贝插件的方式比较麻烦，所以插件管理器也应运而生，最常用的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Z1bmRsZVZpbS9WdW5kbGUudmlt">Vundle<i class="fa fa-external-link-alt"></i></span> 管理器。</p>
<p>网上关于插件安装的文章数不胜数，就不在此赘述了。</p>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly92aW1hd2Vzb21lLmNvbS8=">VimAwesome<i class="fa fa-external-link-alt"></i></span> 可以找到大家常用的插件。</p>
<h4 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h4><h5 id="编辑另一个文件"><a href="#编辑另一个文件" class="headerlink" title="编辑另一个文件"></a>编辑另一个文件</h5><p>输入命令 <code>:edit foo.txt</code> 可以关闭当前文件并打开 <code>foo.txt</code>，如果当前文件未保存，则会提示错误信息。或者可以使用 <code>:edit! foo.txt</code> 命令放弃当前文件的修改并打开 <code>foo.txt</code> 文件。</p>
<h5 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h5><p>可以在启动 vim 时指定打开多个文件。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim <span class="built_in">test</span> test1 test2</span><br></pre></td></tr></table></figure>

<p>这样会打开三个文件，可以使用命令在这三个文件中进行跳转：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:next 或 :n</span>        # 跳转到下一个文件</span><br><span class="line"><span class="meta">:previous 或 :prev</span> # 跳转到上一个文件</span><br><span class="line">:first             # 跳转到第一个文件</span><br><span class="line">:last              # 跳转到最后一个文件</span><br><span class="line">:2next             # 向后跳转两个文件</span><br></pre></td></tr></table></figure>

<p>上面的两条命令默认也会保存当前文件，然后进行跳转。</p>
<p>但是这样的方式不利于我们对多个编辑的文件进行管理，所以使用标签的方法打开多个文件是一个更好的方式，将在后面进行相应的讲解。</p>
<h4 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h4><h5 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h5><p>分割新窗口最简单的命令如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:split 或 :sp</span>      # 水平分割窗口</span><br></pre></td></tr></table></figure>

<p>这个命令把屏幕分解成两个窗口并把光标置于上面的窗口中:</p>
<pre><code>    +----------------------------------+
    |/* file one */                    |
    |~                                 |
    |~                                 |
     one===============================
    |/* file one */                    |
    |~                                 |
     one===============================
    |                                  |
    +----------------------------------+
</code></pre>
<p>这两个窗口允许你同时显示一个文件的两个部分。例如，你可以让上面的窗口显示变量定义而下面的窗口显示使用这些变量的代码。</p>
<p><code>Ctrl-w w</code> 命令可以用于在窗口间跳转。如果你在上面的窗口，它会跳转到下面的窗口，如果你在下面的窗口，它会跳转到上面的窗口。(<code>Ctrl-w Ctrl-w</code> 可以完成相同的功能，是为了避免你有时按第二次的时候没有松开 <code>Ctrl</code> 按键。) 类似的，也可以使用 <code>Ctrl-w j</code> 跳转到下面窗口，使用 <code>Ctrl-k</code> 跳转到上面窗口。</p>
<p>使用 <code>:close</code> 或 <code>:clo</code> 命令可以关闭光标所在的窗口，并且只剩一个窗口的时候不会退出 vim。</p>
<p>当然，还可以利用分割窗口打开新的文件：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">split</span> <span class="literal">two</span></span><br></pre></td></tr></table></figure>

<p>如果你正在编辑文件 one，则命令执行的结果为：</p>
<pre><code>    +----------------------------------+
    |/* file two */                    |
    |~                                 |
    |~                                 |
     two===============================
    |/* file one */                    |
    |~                                 |
     one===============================
    |                                  |
    +----------------------------------+
</code></pre>
<p>如果想新建一个窗口用于编辑一个新文件，可以使用 <code>:new</code> 命令。</p>
<h5 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h5><p>在分割了窗口之后，可以发现默认是所有窗口平分屏幕，即分割三个窗口，则每个窗口是屏幕的三分之一大小。对于已经打开的窗口，我们可以使用命令来控制窗口的大小：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Ctrl-w +          <span class="meta"># 扩大窗口大小一行</span></span><br><span class="line">Ctrl-w -          <span class="meta"># 缩小窗口大小一行</span></span><br><span class="line">&#123;height&#125;Ctrl-w <span class="literal">_</span>  <span class="meta"># 把窗口设置为指定的高度</span></span><br></pre></td></tr></table></figure>

<p>不过这几种方法按键较多，可能并不能快速达到想要的窗口大小，在这种情况下，直接使用鼠标进行拖动可以更快的调整窗口大小。具体方法是使用鼠标点按住状态条进行拖动。</p>
<h5 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h5><p>类似水平分割，垂直分割的命令为：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:vsplit</span> 或 <span class="symbol">:vsp</span></span><br></pre></td></tr></table></figure>

<p>这个命令可以做到垂直分割窗口，效果如下：</p>
<pre><code>    +--------------------------------------+
    |/* file two */     |/* file one */    |
    |~                  |~                 |
    |~                  |~                 |
    |~                  |~                 |
     two  ===============one  =============
    |                                      |
    +--------------------------------------+
</code></pre>
<p>如果既水平分割了窗口，又垂直分割了窗口，我们便需要在各个窗口之间进行移动，之前提到过的 <code>Ctrl-w w</code> 命令只能够向下一个窗口进行移动，不够方便高效。 Vim 提供了一下几种命令在窗口之间进行跳转：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Ctrl-w h        <span class="comment"># 跳转到左边的窗口</span></span><br><span class="line">Ctrl-w <span class="keyword">j </span>       <span class="comment"># 跳转到下面的窗口</span></span><br><span class="line">Ctrl-w k        <span class="comment"># 跳转到上面的窗口</span></span><br><span class="line">Ctrl-w l        <span class="comment"># 跳转到右边的窗口</span></span><br><span class="line"></span><br><span class="line">Ctrl-w t        <span class="comment"># 跳转到最顶的窗口</span></span><br><span class="line">Ctrl-w <span class="keyword">b </span>       <span class="comment"># 跳转到最底的窗口</span></span><br></pre></td></tr></table></figure>

<h5 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h5><p>经过上面的联系，我们可以发现，无论分割窗口多少次，各个窗口之间都是相互独立的，不会发生重叠，这样会导致窗口过多时，屏幕空间不足以显示文件内容。为了解决这个问题，我们可以使用标签页。</p>
<p>假如正在编辑文件 <code>thisfile</code>，使用以下命令可以创建一个新的标签页：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:tabedit thatfile 或 :tabe</span> thatfile</span><br></pre></td></tr></table></figure>

<p>命令运行效果如下：</p>
<pre><code>    +----------------------------------+
    | thisfile | /thatfile/ __________X|   (thatfile 用加粗字体出现或高亮选中)
    |/* thatfile */                    |
    |that                              |
    |that                              |
    |~                                 |
    |~                                 |
    |~                                 |
    |                                  |
    +----------------------------------+
</code></pre>
<p>窗口顶端的横向文件名表示了已经打开的标签页和其中的文件名。</p>
<p>想要在标签之间进行切换，可以使用以下命令：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">gt</span>         <span class="comment"># 切换到下一个标签页</span></span><br><span class="line">:<span class="keyword">gT</span>         <span class="comment"># 切换到上一个标签页</span></span><br><span class="line">:<span class="number">3</span><span class="keyword">gt</span>        <span class="comment"># 切换到第三个标签页</span></span><br><span class="line">:<span class="number">4</span><span class="keyword">gT</span>        <span class="comment"># 向前切换4个标签页，如果超过标签页数量，将从最后一个标签页继续计算数量</span></span><br></pre></td></tr></table></figure>

<p>本文仅仅是对 Vim 这一款强大软件的基本介绍，想要真正的发挥 Vim 的强大之处，还需要不断地学习和不断地练习，希望大家都能够成为 Vim 大神。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、newjueqi，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25ld2p1ZXFpL2FydGljbGUvZGV0YWlscy83NDQxOTMw">Vim 的几种模式介绍<i class="fa fa-external-link-alt"></i></span><br>2、vimtutor<br>3、yianwillis，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpYW53aWxsaXMvdmltY2RvYw==">Vim 中文文档计划<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--观察者模式</title>
    <url>/2018/06/26/2018-06-26-design-pattern-observer/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>当对象间存在一对多关系，且当一个对象被修改时，会自动通知它的依赖对象，则使用观察者模式（Observer Pattern）。观察者模式属于行为型模式。</p>
<span id="more"></span>

<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>可以建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为被观察者，而被通知的对象称为观察者，一个被观察者可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式意图。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有不同的表示层作为具体观察者角色。</li>
<li>观察者模式在被观察者和观察者之间建立一个抽象的耦合。</li>
<li>观察者模式支持广播通信。</li>
<li>观察者模式符合“开闭原则”的要求。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>如果一个被观察者对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道被观察者发生了变化。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>Subject：目标</li>
<li>ConcreteSubject：具体目标</li>
<li>Observer：观察者</li>
<li>ConcreteObserver：具体观察者</li>
</ul>
<p><img data-src="/uploads/in-post/design_patterns/observer_struc.png"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Subject:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteSubject:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">ArrayList</span>&lt;<span class="title class_">Observer</span>&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Object</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">ConcreteSubject</span>() &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">registerObserver</span>(<span class="params">Observer o</span>) &#123;</span><br><span class="line">        observers.<span class="title function_">add</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">removeObserver</span>(<span class="params">Observer o</span>) &#123;</span><br><span class="line">        int index = observers.<span class="title function_">indexOf</span>(o);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.<span class="title function_">remove</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">notifyObserver</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Observer</span> <span class="attr">observer</span>: observers) &#123;</span><br><span class="line">            observer.<span class="title function_">update</span>(<span class="variable language_">this</span>, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">dataChanged</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">notifyObserver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setData</span>(<span class="params"><span class="built_in">Object</span> data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">        <span class="title function_">dataChanged</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Observer:</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">public interface Observer &#123;</span><br><span class="line">    public void update(Subject <span class="function"><span class="keyword">sub</span>, <span class="title">Object</span> <span class="title">obj</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteObserver:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="title">implements</span> <span class="title">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject concreteSubject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcreteObserver(Subject subject) &#123;</span><br><span class="line">        <span class="keyword">this</span>.concreteSubject = subject;</span><br><span class="line">        <span class="keyword">this</span>.concreteSubject.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void update(Subject sub, Object obj) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Subject is &quot;</span> + sub.toString() + <span class="string">&quot; Data is &quot;</span> + obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main:</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">public class Main &#123;</span></span><br><span class="line"><span class="language-xml">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="language-xml">        ConcreteSubject subject = new ConcreteSubject();</span></span><br><span class="line"><span class="language-xml">        Observer observer = new ConcreteObserver(subject);</span></span><br><span class="line"><span class="language-xml">        subject.setData(new HashMap&lt;Integer, Integer&gt;()</span><span class="template-variable">&#123;&#123;<span class="name">put</span>(<span class="name">1</span>, <span class="number">1</span>);&#125;&#125;</span><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml">        subject.setData(new HashMap&lt;Integer, Integer&gt;()</span><span class="template-variable">&#123;&#123;<span class="name">put</span>(<span class="name">2</span>, <span class="number">2</span>);&#125;&#125;</span><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml">        subject.setData(new HashMap&lt;Integer, Integer&gt;()</span><span class="template-variable">&#123;&#123;<span class="name">put</span>(<span class="name">3</span>, <span class="number">3</span>);&#125;&#125;</span><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>&#125;</span><br><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">2</span>=<span class="number">2</span>&#125;</span><br><span class="line">Subject <span class="keyword">is</span> observer_pattern.<span class="symbol">ConcreteSubject@</span><span class="number">610455</span>d6 Data <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用观察者模式：</p>
<ul>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>
<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>
<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>
<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式--策略模式</title>
    <url>/2018/06/27/2018-06-27-design-pattern-strategy/</url>
    <content><![CDATA[<blockquote>
<p>“设计模式是软件开发人员在开发过程中可以遵循的一般问题的解决方案。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p>
<p>策略模式是一种对象行为型模式。</p>
<span id="more"></span>

<h3 id="模式意图"><a href="#模式意图" class="headerlink" title="模式意图"></a>模式意图</h3><p>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。</p>
<p>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。</p>
<p>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。</p>
<p>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</p>
<p>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>
<li>策略模式提供了管理相关的算法族的办法。</li>
<li>策略模式提供了可以替换继承关系的办法。</li>
<li>使用策略模式可以避免使用多重条件转移语句。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
</li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>抽象工厂模式包含如下角色：</p>
<ul>
<li>Context: 环境类</li>
<li>Strategy: 抽象策略类</li>
<li>ConcreteStrategy: 具体策略类</li>
</ul>
<p><img data-src="/uploads/in-post/design_patterns/strategy_struc.png"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Strategy:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> doAction(<span class="built_in">int</span> i, <span class="built_in">int</span> j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AddStrategy:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">AddStrategy</span> <span class="symbol">implements</span> <span class="symbol">Strategy</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> doAction(<span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MinusStrategy:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MinusStrategy</span> <span class="symbol">implements</span> <span class="symbol">Strategy</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> doAction(<span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Context:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span>(<span class="params">Strategy strategy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeStrategy</span>(<span class="params"><span class="built_in">int</span> i, <span class="built_in">int</span> j</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.strategy.doAction(i, j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main:</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> <span class="type">Context</span>();</span><br><span class="line">        Strategy addStrategy = <span class="keyword">new</span> <span class="type">AddStrategy</span>();</span><br><span class="line">        Strategy minusStrategy = <span class="keyword">new</span> <span class="type">MinusStrategy</span>();</span><br><span class="line">        context.setStrategy(addStrategy);</span><br><span class="line">        context.executeStrategy(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        context.setStrategy(minusStrategy);</span><br><span class="line">        context.executeStrategy(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line"><span class="deletion">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在以下情况下可以使用策略模式：</p>
<ul>
<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>
<li>一个系统需要动态地在几种算法中选择一种。</li>
<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>
<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Annotation 简析</title>
    <url>/2018/07/13/2018-07-13-java-annotation/</url>
    <content><![CDATA[<blockquote>
<p>“Java Annotation 是 JDK5.0 引入的一种注释机制, 用于为 Java 代码提供元数据。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>Annotation</code>，中文译名为注解，那么注解又是什么呢？简单来说，注解就是对某件事物的标记和解释，用来描述这件事物的特点和属性。举个例子，前一阵看《创造 101》，看到了一名熟悉的 <code>Rapper</code> – Yamy，参加这个节目之后，她又被打上了 <code>Dancer</code> 的标签。对于 Yamy 来说，<code>Rapper</code> 和 <code>Dancer</code> 就是对她的注解。我们通过注解，可以在一定程度上了解到被标记事物的一些属性，我们就可以用这些属性来做一些事情。比如在《中国有嘻哈》利用 <code>Rapper</code> 标签宣传 Yamy 的说唱能力，而在《创造 101》利用 <code>Dancer</code> 标签宣传 Yamy 的跳舞能力等。</p>
<p>从上面的例子我们可以看出来，通过获取事物的注解，可以得到事物的属性，利用这些属性可以进行一些操作。代码也是这样，通过获取代码的注解，我们可以获得注解赋予代码的属性，利用这些属性，我们就可以在程序的生命周期中，对具有这些属性的代码进行额外的操作。</p>
<span id="more"></span>

<h3 id="Annotation-组成部分"><a href="#Annotation-组成部分" class="headerlink" title="Annotation 组成部分"></a>Annotation 组成部分</h3><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>java annotation 的组成中，有 3 个非常重要的 java 文件。它们分别是：</p>
<h5 id="Annotation-java"><a href="#Annotation-java" class="headerlink" title="Annotation.java"></a>Annotation.java</h5><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ElementType-java"><a href="#ElementType-java" class="headerlink" title="ElementType.java"></a>ElementType.java</h5><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">package java.lang.annotation<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">public enum ElementType &#123;</span><br><span class="line"><span class="built_in">    TYPE,</span>               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    FIELD,</span>              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    METHOD,</span>             <span class="comment">/* 方法声明  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    PARAMETER,</span>          <span class="comment">/* 参数声明  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    CONSTRUCTOR,</span>        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    LOCAL_VARIABLE,</span>     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">    ANNOTATION_TYPE,</span>    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line"></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RetentionPolicy-java"><a href="#RetentionPolicy-java" class="headerlink" title="RetentionPolicy.java"></a>RetentionPolicy.java</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> enum RetentionPolicy &#123;</span><br><span class="line">    <span class="keyword">SOURCE</span>,            <span class="comment">/* Annotation 信息仅存在于编译器处理期间，该 Annotation 信息不会进行存储到. class 文件中  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">CLASS</span>,             <span class="comment">/* 编译器将 Annotation 存储于类对应的. class 文件中。默认行为  */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">RUNTIME</span>            <span class="comment">/* 编译器将 Annotation 存储于 class 文件中，并且可由 JVM 读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码简析"><a href="#代码简析" class="headerlink" title="代码简析"></a>代码简析</h4><p>上面三个类的关系如下图：</p>
<p><img data-src="/uploads/in-post/java/java_annotation.jpg"></p>
<p>从中我们可以看出：</p>
<ul>
<li>  一个 Annotation 和一个 RetentionPolicy 唯一关联，即每个 Annotation 对象，都会有一个唯一的 RetentionPolicy 属性</li>
<li>  一个 Annotation 和多个 ElementType 相关联，即每个 Annotation 对象，可以有一个或多个 Elementtype 属性</li>
</ul>
<p>从代码中我们可以看出：</p>
<ul>
<li>  Annotation 是一个接口。当我们自定义注解时，需要添加 @interface 字段，相当于注解实现了 Annotation 接口，之后会有讲解</li>
<li>  ElementType 是枚举类型，记录了注解可以标记的类型。例如一个 Annotation 标记了 METHOD 类型，则该 Annotation 只可以用来注解方法</li>
<li>  RetentionPolicy 是枚举类型，记录了注解的保留策略。</li>
</ul>
<ul>
<li>若为 SOURCE 类型，表示该 Annotation 只存在于编译器处理期间，编译结束后，该 Annotation 的信息则失去作用</li>
<li>若为 CLASS 类型，表示该 Annotation 编译后会被存储于类对应的. class 文件中，但是 JVM 在加载类的时候不需要将其加载为运行时可见的（反射可见）的注解。这里很重要的一点是编译多个 Java 文件时的情况：假如要编译 A.java 源码文件和 B.class 文件，其中 A 类依赖 B 类，并且 B 类上有些注解希望让 A.java 编译时能看到，那么 B.class 里就必须要持有这些注解信息才行。</li>
<li>若为 RUNTIME 注解，表示该 Annotation 编译后会被存储于类对应的. class 文件中，并且 JVM 加载类的时候也会将其加载为反射可见的注解。</li>
</ul>
<h3 id="Annotation-语法"><a href="#Annotation-语法" class="headerlink" title="Annotation 语法"></a>Annotation 语法</h3><h4 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h4><p>注解通过 <code>@interface</code> 关键字进行定义</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">TestAnnotation</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们创建了一个 <code>TestAnnotation</code> 的注解，可以使用它对代码进行注解。</p>
<h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><p>将创建的注解使用 java annotation 的方式添加到代码顶部，即为代码增加了注解：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">@TestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们对 Test 类添加了 TestAnnotation 的注解，这样 Test 类就具有了 TestAnnotation 注解的所有属性，当然，目前 TestAnnotation 注解中还没有加入属性，之后会有相关讲解。</p>
<h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>到这里，我们已经简单的创建并使用了注解，但是仅仅使用这种默认的注解并不能达到理想的效果，所以 java 提供了 <code>元注解</code> 来帮助我们丰富注解的功能。</p>
<p>那么什么是元注解呢？简单来说，元注解就是注解的注解。我们自定义的注解可以为代码增加属性，而元注解可以为我们的注解增加属性。</p>
<p>元注解一共有五种：</p>
<ul>
<li>  @Documented</li>
<li>  @Target</li>
<li>  @Retention</li>
<li>  @Inherited</li>
<li>  @Repeatable</li>
</ul>
<h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>使用此元注解会将注解中的元素包含到 Javadoc 中</p>
<h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>此元注解对应了 ElementType 的类型，用于限制注解可以注解到哪些场景下，有以下取值：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ElementType<span class="selector-class">.ANNOTATION_TYPE</span> 可以给一个注解进行注解</span><br><span class="line">ElementType<span class="selector-class">.CONSTRUCTOR</span> 可以给构造方法进行注解</span><br><span class="line">ElementType<span class="selector-class">.FIELD</span> 可以给属性进行注解</span><br><span class="line">ElementType<span class="selector-class">.LOCAL_VARIABLE</span> 可以给局部变量进行注解</span><br><span class="line">ElementType<span class="selector-class">.METHOD</span> 可以给方法进行注解</span><br><span class="line">ElementType<span class="selector-class">.PACKAGE</span> 可以给一个包进行注解</span><br><span class="line">ElementType<span class="selector-class">.PARAMETER</span> 可以给一个方法内的参数进行注解</span><br><span class="line">ElementType<span class="selector-class">.TYPE</span> 可以给一个类型进行注解，比如类、接口、枚举</span><br></pre></td></tr></table></figure>

<p>使用了 <code>@Target</code> 元注解之后，注解就被限制在定义的场景下使用了，例如 <code>@Target(ElementType.METHOD)</code> 表示注解只能用于标记方法。</p>
<h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>此注解对应了 RetentionPolicy 的类型，用于限制注解的存活时间，有以下取值：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">RetentionPolicy.<span class="keyword">SOURCE</span> 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</span><br><span class="line">RetentionPolicy.<span class="keyword">CLASS</span> 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</span><br><span class="line">RetentionPolicy.<span class="keyword">RUNTIME</span> 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</span><br></pre></td></tr></table></figure>

<p>使用了 <code>@Retention</code> 元注解之后，注解的生命周期就被决定了，例如 <code>@Retention(RetentionPolicy.RUNTIME)</code> 表示注解可以在程序运行期间被获取到。</p>
<h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>使用此元注解表示子类如果没有自己的注解，会继承父类的注解，例如：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@interface</span> TestAnnotation &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@TestAnnotation</span></span><br><span class="line">public class A &#123;&#125;</span><br><span class="line"></span><br><span class="line">public class B extends A &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>注解 <code>@TestAnnotation</code> 被 <code>@Inherited</code> 修饰，之后类 A 被 TestAnnotation 注解，类 B 继承 A，则类 B 也拥有 TestAnnotation 这个注解。</p>
<h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><p><code>@Repeatable</code> 是 Java 1.8 加进来的特性，表示注解可以多次使用。</p>
<p>举个例子，一个人他既是程序员又是产品经理, 同时他还是个艺术家：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> Persons &#123;</span><br><span class="line">    Person[]  value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="meta">@interface</span> Person&#123;</span><br><span class="line">    String role default <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Person(role=<span class="string">&quot;artist&quot;</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="string">&quot;coder&quot;</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="string">&quot;PM&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的代码我们可以看到，<code>@Repeatable</code> 元注解注解了 <code>@Person</code> 注解，其中的参数是一个用于存放其他注解的 <code>容器注解</code>。</p>
<p>按照规定，它里面必须要有一个 <code>value</code> 的属性，属性类型是一个被 <code>@Repeatable</code> 注解过的注解数组，注意它是数组。</p>
<p>Persons 是标签盒子，里面放满了 Person 这种同类型但内容不一样的标签。把 Persons 送给一个 SuperMan ，相当于同时把盒子里面的所有标签贴在了 SuperMan 身上。</p>
<h4 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h4><p>注解的属性类似于类的成员变量。但是注解只有属性，而没有方法。注解的属性以 <code>无形参方法</code> 的方式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">id</span>();</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">msg</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了 <code>@TestAnnotation</code> 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。</p>
<p>** 注意：在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组 **</p>
<p>赋值方式是在注解的括号内以 value=”” 形式，多个属性之前用 <code>,</code> 隔开, 如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation(id=3, msg=<span class="string">&quot;hello annotation&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，注解中属性也可以有默认值，默认值需要用 default 关键值指定。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@TestAnnotation</code> 注解中 id 属性默认值为 -1，msg 属性默认值为 Hi。这样即使不对注解进行 id 和 msg 的赋值，也会拥有默认值。</p>
<p>此外，如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接接属性值填写到括号内。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">@interface</span> Check &#123;</span><br><span class="line">    String <span class="built_in">value</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Check</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">int a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Check</span>(value=<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">int a;</span><br></pre></td></tr></table></figure>

<p>上面两种注解变量 a 的方式是相同的。</p>
<h3 id="Java-预置注解"><a href="#Java-预置注解" class="headerlink" title="Java 预置注解"></a>Java 预置注解</h3><p>除了我们自定义注解之外，Java 已经内置了一些常用的注解：</p>
<ul>
<li>  @Deprecated</li>
<li>  @Override</li>
<li>  @SuppressWarnings</li>
<li>  @SafeVarargs</li>
<li>  @FunctionalInterface</li>
</ul>
<h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h4><p>此注解用于标注过时的，不被推荐使用的方法，属于编译期注解（ElementType.SOURCE），编译器在编译阶段遇到这个注解时会发出提醒警告，告诉开发者正在调用一个过时的元素比如过时的方法、过时的类、过时的成员变量。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">deprecatedMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Noting has to say!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">newMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;I have a dream!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">TestAnnotation</span> testAnnotation = <span class="keyword">new</span> <span class="title class_">TestAnnotation</span>();</span><br><span class="line">        testAnnotation.<span class="title function_">deprecatedMethod</span>();</span><br><span class="line">        testAnnotation.<span class="title function_">newMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 IDE 中可以看到，deprecatedMethod() 方法将会被划掉，以提示用户该方法已过时：</p>
<p><img data-src="/uploads/in-post/java/deprecated_annotation.png"></p>
<h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h4><p>这个注解应该是使用最多的注解之一了，主要用于提示子类复写父类中被 <code>@Override</code> 修饰的方法，同样属于编译期注解。</p>
<h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h4><p>这个注解同样是编译期注解，主要用于阻止编译期的警告，之前调用被 <code>@Deprecated</code> 注解的方法后，编译器会警告提醒，而有时候开发者会忽略这种警告，他们可以在调用的地方通过 <code>@SuppressWarnings</code> 达到目的。</p>
<p><img data-src="/uploads/in-post/java/suppress_warnings_annotation.png"></p>
<h4 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h4><p>参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作，它会阻止编译器产生 unchecked 这样的警告。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">@SafeVarargs<span class="keyword"></span></span><br><span class="line"><span class="keyword">static</span> void m(List&lt;String&gt;... stringLists) &#123;</span><br><span class="line">    Object[]<span class="built_in"> array </span>= string<span class="class">Lists;</span></span><br><span class="line">    List&lt;Integer&gt; tmpList = Arrays.asList(42);</span><br><span class="line">    array[0] = tmp<span class="class">List;</span></span><br><span class="line">    String s = stringLists[0].get(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，编译阶段不会报错，但是运行时会抛出 ClassCastException 这个异常，所以尽量还是不要使用这个注解。</p>
<h4 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h4><p>函数式接口注解，这个是 Java 1.8 版本引入的新特性。</p>
<p>函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Runnable 接口就是一个典型的函数式接口，通过源码我们可以看到它就被 <code>@FunctionalInterface</code> 注解。而函数式接口一般被用于 Java 的 Lambda 表达式，感兴趣的话可以搜索学习相关内容。</p>
<h3 id="注解的提取和使用"><a href="#注解的提取和使用" class="headerlink" title="注解的提取和使用"></a>注解的提取和使用</h3><p>之前我们提到过，通过注解，可以在一定程度上了解到被标记事物的一些属性，我们就可以用这些属性来做一些事情。所以如果去获取这些属性并做一些事就是我们接下来要讨论的内容。</p>
<p>想要提取和使用注解，需要利用 Java 的一个特点，那就是反射。</p>
<p>通过反射，我们可以在程序运行阶段获取到注解中的属性，并根据这些属性进行额外的操作。</p>
<h4 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h4><p>注解通过反射获取。首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否被某个注解标记。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAnnotationPresent</span>(<span class="params">Class&lt;? <span class="keyword">extends</span> Annotation&gt; annotationClass</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果拥有注解，则可以使用 getAnnotation() 方法来获取 Annotation 对象，或使用 getAnnotations() 方法来获取多个 Annotation 对象。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; A <span class="title function_">getAnnotation</span>(<span class="params">Class&lt;A&gt; annotationClass</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">Annotation</span>[] <span class="title function_">getAnnotations</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>前一种方法返回指定类型的注解，后一种方法返回注解到这个元素上的所有注解。</p>
<p>如果能够获取到注解，我们就可以使用注解中的属性了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnnotation()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasAnnotation</span> <span class="operator">=</span> Test.class.isAnnotationPresent(TestAnnotation.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">            <span class="type">TestAnnotation</span> <span class="variable">testAnnotation</span> <span class="operator">=</span> Test.class.getAnnotation(TestAnnotation.class);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+testAnnotation.id());</span><br><span class="line">            System.out.println(<span class="string">&quot;msg:&quot;</span>+testAnnotation.msg());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序的运行结果是：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">id:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">msg:</span>Hi</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果一个注解要在运行时被成功提取，那么 @Retention(RetentionPolicy.RUNTIME) 是必须的。</strong></p>
<h4 id="注解的使用场景"><a href="#注解的使用场景" class="headerlink" title="注解的使用场景"></a>注解的使用场景</h4><p>官方文档对于 Java 注解的文档是这样说明的：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">注解是一系列元数据，它提供数据用来解释程序代码，但是注解并非是所解释的代码本身的一部分。注解对于代码的运行效果没有直接影响。</span><br><span class="line"></span><br><span class="line">注解有许多用处，主要如下：</span><br><span class="line"><span class="bullet">- </span>提供信息给编译器： 编译器可以利用注解来探测错误和警告信息</span><br><span class="line"><span class="bullet">- </span>编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、Html文档或者做其它相应处理。</span><br><span class="line"><span class="bullet">- </span>运行时的处理： 某些注解可以在程序运行的时候接受代码的提取</span><br></pre></td></tr></table></figure>

<p>从上面的描述中我们可以看出来，注解仅仅是对代码的一个标记，不会对代码的运行自动产生任何影响。 所以如果我们想要对拥有某些注解的代码进行操作的话，需要<code>自己编写代码</code>来提取注解信息，并处理这些信息，执行一些代码之外的操作。</p>
<p>说了这么多，我们用实际的代码来感受一下如何使用注解吧！</p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>注解的使用可以贯穿程序的整个生命周期，何时何地使用注解完全由程序员自己决定，举一个简单的例子：</p>
<p>首先创建一个 <code>@CheckLogin</code> 注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckLogin &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我想在调用 <code>getName()</code> 方法之前检查是否有这个注解，如果有，则检查登录状态，如果没有则通知用户先登录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CheckLogin</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取姓名&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loggedIn</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> TestAnnotation.class.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getNameMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">CheckLogin</span> <span class="variable">checkLogin</span> <span class="operator">=</span> getNameMethod.getAnnotation(CheckLogin.class);</span><br><span class="line">                <span class="keyword">if</span> (checkLogin != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;需要检查登录&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!loggedIn) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TestAnnotation</span> <span class="variable">testAnnotation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestAnnotation</span>();</span><br><span class="line">        testAnnotation.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> loggedIn = <span class="literal">true</span></span><br><span class="line">需要检查登录</span><br><span class="line">获取姓名</span><br><span class="line"><span class="string">//</span> loggedIn = <span class="literal">false</span></span><br><span class="line">需要检查登录</span><br><span class="line">请先登录</span><br></pre></td></tr></table></figure>

<p>这只是一个最简单的注解使用的例子，如何更好地使用注解，就需要各位自己去发掘啦~~</p>
<p><strong>最后再提一句，由于注解的提取需要借助于 Java 的反射技术，反射会降低程序运行效率，所以使用注解时也需要谨慎考虑时间成本。</strong></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、frank909，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JyaWJsdWUvYXJ0aWNsZS9kZXRhaWxzLzczODI0MDU4">秒懂，Java 注解 （Annotation）你可以这样学<i class="fa fa-external-link-alt"></i></span></p>
<p>2、skywang12345，<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2t5d2FuZzEyMzQ1L3AvMzM0NDEzNy5odG1s">Java Annotation认知<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>MECE 法则</title>
    <url>/2020/02/11/2020-02-21-mece-principle/</url>
    <content><![CDATA[<p>本周学习到了一个很有意思的原则，【MECE法则】，全称是 Mutually Exclusive Collectively Exhausted，互斥且穷尽，意思是在我们分析解决一个问题时，需要将可能的方案穷尽的列举出来，然后再对其归类，达到每个类别互斥，然后就可以得出几类解决问题的方法。这样的方式会更加有效地帮助我们分析和解决问题，值得一试。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>BBS 法则</title>
    <url>/2020/03/06/2020-03-06-bbs-principle/</url>
    <content><![CDATA[<p>这周学习到了一个很好的方法论【BBS】，分别是 learn from the Best，Basic way 和 Stop doing list，首先我们需要制定自己的 Stop doing list，这样才能够让自己不偏离正确的方向，Basic way 需要我们学习几种最基本的做事方法，然后应用在日常工作中，可以提升我们的工作效率，最后我们还要 learn from the Best，向身边或者业界的优秀者学习，学习他们的工作和思考方法，让自己不断进步。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 通配符简析</title>
    <url>/2019/03/02/2019-03-02-java-wildcards/</url>
    <content><![CDATA[<blockquote>
<p>“Java 通配符是一种表示未知类型的类型约束的方法。”</p>
</blockquote>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>通配符</code> 并不包含在最初的泛型设计中（起源于 Generic Java（GJ）项目），从形成 JSR 14 到发布其最终版本之间的五年多时间内完成设计过程并被添加到了泛型中。<code>通配符</code> 在类型系统中具有重要的意义，它们为一个泛型类所指定的类型集合提供了一个有用的类型范围。Oracle 的官方解释是 Type of unknown。</p>
<span id="more"></span>

<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>通配符有以下三种类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>&lt;?&gt;  <span class="comment">// 任意类型的 List</span></span><br><span class="line"><span class="type">List</span>&lt;? extends <span class="type">T</span>&gt;  <span class="comment">// 继承自 T 的任意类型的 List</span></span><br><span class="line"><span class="type">List</span>&lt;? <span class="keyword">super</span> <span class="type">T</span>&gt;  <span class="comment">// 具有 T 的超类型的 List</span></span><br></pre></td></tr></table></figure>

<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>假设有以下几个类：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">&quot;Food taste&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Meat</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">&quot;Meat taste&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">&quot;Fruit taste&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void taste() &#123;</span><br><span class="line">    <span class="type">System</span>.out.println(<span class="string">&quot;Apple taste&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们定义了一个无通配符的使用示例：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">Eater</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> void eat(List&lt;Food&gt; foodList) &#123;</span><br><span class="line">    <span class="keyword">for</span>(Food food: <span class="type">foodList</span>) &#123;</span><br><span class="line">      food.taste();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">EaterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Eater eater = <span class="keyword">new</span> <span class="type">Eater</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test1</span></span><br><span class="line">        List&lt;Food&gt; foodList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        foodList.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">        foodList.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line"></span><br><span class="line">        eater.eat(foodList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test2</span></span><br><span class="line">        List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        fruitList.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">        fruitList.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line"></span><br><span class="line">        eater.eat(fruitList);  <span class="comment">// 无法通过编译</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照普遍的逻辑推断，Fruit 是 Food 的子类，所以能够装下 Food 的集合理论上应该也可以装下 Fruit。尽管 Fruit 是 Food 的子类， Fruit 对象可以直接添加到 <code>List&lt;Food&gt;</code> 对象中。但是 <code>List&lt;Fruit&gt;</code> 却不能直接认为是 <code>List&lt;Food&gt;</code> 的子类，因为集合的泛型并不是协变的。所以将不是 <code>List&lt;Food&gt;</code> 对象子类的 <code>List&lt;Fruit&gt;</code> 对象传递给 <code>eat(List&lt;Food&gt; foodList)</code> 函数是不能通过编译的。此时就需要通配符上场了。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>通配符被设计用来解决泛型继承规则所带来的问题。</p>
<h5 id="通配符上界"><a href="#通配符上界" class="headerlink" title="通配符上界"></a>通配符上界</h5><p>从上面我们知道 <code>List&lt;Fruit&gt;</code> 不是 <code>List&lt;Food&gt;</code> 的子类，那么我们要如何将 <code>List&lt;Fruit&gt;</code> 和 <code>List&lt;Food&gt;</code> 与 Fruit 和 Food 之间的关系关联起来呢？我们可以使用 <code>List&lt;? extends Food&gt;</code> 来表示 List 的上界是 Food，也就是说 <code>List&lt;Food&gt;</code> 或 <code>List&lt;Food Subclass&gt;</code> 都是 <code>List&lt;? extends Food&gt;</code> 的子类，这样就可以直接将 <code>List&lt;Fruit&gt;</code> 传递给 <code>List&lt;? extends Food&gt;</code> 进行操作了，因为 <code>List&lt;Fruit&gt;</code> 中的对象都将安全地向上转型为 Food 传递给 <code>List&lt;? extends Food&gt;</code>。</p>
<p>更改后的 eat() 函数如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eater</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">eat</span>(<span class="params">List&lt;? <span class="keyword">extends</span> Food&gt; foodList</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Food</span> <span class="attr">food</span>: foodList) &#123;</span><br><span class="line">            food.<span class="title function_">taste</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再试一次之前的测试函数可以通过编译了。</p>
<p>综上我们可以知道， <code>List&lt;Food&gt;</code>，<code>List&lt;Meat&gt;</code>，<code>List&lt;Fruit&gt;</code>，<code>List&lt;Apple&gt;</code> 都是 <code>List&lt;? extends Food&gt;</code> 的子类，通配符上界拥有以下规则：</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">假设有泛型类型 G(如 List 或 Map)， 泛型参数 X 和 Y，其中 Y 是 X 的子类，则有</span><br><span class="line"></span><br><span class="line">G<span class="attribute">&lt;Y&gt;</span> 是 G<span class="attribute">&lt;? extends X&gt;</span> 的子类型（如 List<span class="attribute">&lt;Fruit&gt;</span> 是 List<span class="attribute">&lt;? extends Food &gt;</span> 的子类型）</span><br><span class="line">G<span class="attribute">&lt;? extends Y&gt;</span> 是 G<span class="attribute">&lt;? extends X&gt;</span> 的子类型（如 List<span class="attribute">&lt;? extends Fruit&gt;</span> 是 List<span class="attribute">&lt;? extends Food&gt;</span> 的子类型）。</span><br><span class="line">G<span class="attribute">&lt;X&gt;</span> 是 G<span class="attribute">&lt;? extends X&gt;</span> 的子类型（如 List<span class="attribute">&lt;Food&gt;</span> 是 List<span class="attribute">&lt;? extends Food&gt;</span> 的子类型）</span><br><span class="line">G<span class="attribute">&lt;?&gt;</span> 等同于 G<span class="attribute">&lt;? extends Object&gt;</span>，如 List<span class="attribute">&lt;?&gt;</span> 等同于 List<span class="attribute">&lt;? extends Object&gt;</span>。</span><br></pre></td></tr></table></figure>

<p>在上面我们测试了从 <code>List&lt;? extends Food&gt;</code> 中读取信息，那么我们能不能向其中添加信息呢？我们添加如下代码进行测试：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(<span class="params">List&lt;? extends Food&gt; foods</span>)</span> &#123;</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Food());</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line">    foods.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? extends Food&gt; foods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Food());</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Fruit());</span><br><span class="line">foods.<span class="keyword">add</span>(<span class="keyword">new</span> Apple());</span><br></pre></td></tr></table></figure>

<p>根据我们之前的分析，<code>? extends Food</code> 可以代表 Food 及其子类 (Meat 或 Fruit 或 Apple)，那上述代码理应是可以通过编译的。但是实际上结果却是 <code>无法通过编译</code>，原因如下：</p>
<p>已知 <code>List&lt;Food&gt;</code> 中只可以添加 Food 类对象及其子类对象 (如 Meat 和 Fruit)，<code>List&lt;Fruit&gt;</code> 中只可以添加 Fruit 类对象及其子类对象 (如 Apple)。在向 testAdd() 函数传递参数时，我们可以传入 <code>List&lt;? extends Food&gt;</code> 的所有子类型。在进行 add() 操作时，假设传入的参数为 <code>List&lt;Food&gt;</code>，则三个 add 操作都是可以执行的，假设传入的参数为 <code>List&lt;Fruit&gt;</code>，则第一个 add 操作不能执行，假设传入的参数为 <code>List&lt;Meat&gt;</code>，则所有 add 操作都不能执行。</p>
<p>所以给 testAdd() 函数传入参数时，由于传入的参数是未知的，所以 add() 操作可能会引发类型不兼容的问题，所以 java 为了保护类型一致性，禁止向 <code>List&lt;? extends T&gt;</code> 中除了 null 之外的任意对象，即 foods.add(null) 是可行的。同样的第二段代码不能通过编译。</p>
<h5 id="通配符下界"><a href="#通配符下界" class="headerlink" title="通配符下界"></a>通配符下界</h5><p>类似的，通配符也拥有下界。可以如此定义通配符的下界 <code>List&lt;? super Fruit&gt;</code>，其中 Fruit 就是通配符的下界。<code>注意：不能同时声明泛型通配符申明上界和下界。</code> 通配符的下界拥有以下规则：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">假设有泛型类型 <span class="type">G</span>(如 <span class="type">List</span> 或 <span class="type">Map</span>)， 泛型参数 <span class="type">X</span> 和 <span class="type">Y，其中</span> <span class="type">Y</span> 是 <span class="type">X</span> 的子类，则有</span><br><span class="line"></span><br><span class="line"><span class="type">G</span>&lt;? <span class="keyword">super</span> <span class="type">X</span>&gt; 是 <span class="type">G</span>&lt;? <span class="keyword">super</span> <span class="type">Y</span> &gt; 的子类型（如 <span class="type">List</span>&lt;? <span class="keyword">super</span> <span class="type">Food</span>&gt; 是 <span class="type">List</span>&lt;? <span class="keyword">super</span> <span class="type">Fruit</span> &gt; 的子类型）<span class="operator">。</span></span><br><span class="line"><span class="type">G</span>&lt;<span class="type">X</span>&gt; 是 <span class="type">G</span>&lt;? <span class="keyword">super</span> <span class="type">X</span> &gt; 的子类型（如 <span class="type">List</span>&lt;<span class="type">Fruit</span>&gt; 是 <span class="type">List</span>&lt;? <span class="keyword">super</span> <span class="type">Fruit</span> &gt; 的子类型）</span><br></pre></td></tr></table></figure>

<p>我们再次写两段测试代码：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void testAdd(List&lt;? <span class="keyword">super</span> Fruit&gt; fruits) &#123;</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line">    fruits.add(<span class="keyword">new</span> <span class="type">Food</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">super</span> Fruit&gt; fruits = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Apple</span>());</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Fruit</span>());</span><br><span class="line">fruits.add(<span class="keyword">new</span> <span class="type">Food</span>());</span><br></pre></td></tr></table></figure>

<p>根据分析，<code>? super Fruit</code> 可以代表 Fruit 及其父类，而 Apple 是 Fruit 的子类，那上述代码理应是可以无法通过编译的。但是实际上结果却是 <code>可以通过编译</code>，原因如下：</p>
<p>在向 testAdd() 函数传递参数时，我们可以传入 <code>List&lt;? super Fruit&gt;</code> 的所有子类型，则传入的参数可以为 <code>List&lt;Fruit&gt;</code>，<code>List&lt;Food&gt;</code> 以及 <code>List&lt;Object&gt;</code>。<code>List&lt;? super Fruit&gt;</code> 表示具有任何 Fruit 超类型的列表，亦即该列表至少是一个 <code>List&lt;Fruit&gt;</code> 类型的列表，故所有 Fruit 的子类都可以添加至该列表中，所以 testAdd() 函数中前两行代码是可以成功执行的。但是往列表中添加 Fruit 的父类型的时候，假设添加的是 Food 类对象，是无法添加到 <code>List&lt;Fruit&gt;</code> 中的，假设添加的是 Object 类对象，也是无法添加到 <code>List&lt;Fruit&gt;</code> 中的。为了保证数据类型的统一性，java 禁止向 <code>List&lt;? super T&gt;</code> 中添加任意 T 的父类对象。同样的第二段代码的最后一行无法通过编译。</p>
<p>而在读取 <code>List&lt;? super Fruit&gt;</code> 时，无法保证读取到的元素是 Fruit，因为它还有可能是 Food 或者 Object，也无法保证读取到的元素是 Food，因为它还有可能是 Object，只能保证能够读取到的对象一定是 Object。所以在调用 <code>List&lt;? supper Fruit&gt;</code> 的 get() 方法时，返回的数据是 Object 类型的数据。</p>
<p>这样看起来通配符下界貌似没有起到什么作用。那么什么地方能够利用上通配符下界的特性呢？请看以下代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="title">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Fruit</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span>(<span class="params"><span class="built_in">int</span> price</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getPrice</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">compareTo</span>(<span class="params">Fruit o</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(price, o.price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Apple</span> <span class="title">extends</span> <span class="title">Fruit</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"><span class="built_in">int</span> price</span>)</span> &#123;</span><br><span class="line">        super(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? super T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span>(<span class="params">List&lt;T&gt; list</span>)</span> &#123;</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">    List&lt;Apple&gt; apples = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    apples.<span class="keyword">add</span>(<span class="keyword">new</span> Apple(<span class="number">1</span>));</span><br><span class="line">    apples.<span class="keyword">add</span>(<span class="keyword">new</span> Apple(<span class="number">4</span>));</span><br><span class="line">    apples.<span class="keyword">add</span>(<span class="keyword">new</span> Apple(<span class="number">2</span>));</span><br><span class="line">    apples.<span class="keyword">add</span>(<span class="keyword">new</span> Apple(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">for</span> (Apple collegeStudent: apples) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(collegeStudent.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">    sort(apples);</span><br><span class="line">    <span class="keyword">for</span> (Apple collegeStudent: apples) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(collegeStudent.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码可以正常运行，下面我们来分析这段代码：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="keyword">void</span> <span class="keyword">sort</span>(List&lt;T&gt; list) &#123;</span><br><span class="line">    Collections.<span class="keyword">sort</span>(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先 <code>&lt;T extends Comparable&lt;T&gt;&gt;</code> 规定了数组中对象必须实现 Comparable 接口，而 <code>Comparable&lt;? super T&gt;</code> 表示如果数组中对象的父类实现了 Comparable 接口，则其自身可不实现，如 Apple。</p>
<p>如果将代码改为如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Comparable&lt;T&gt;&gt; <span class="keyword">void</span> <span class="keyword">sort</span>(List&lt;T&gt; list) &#123;</span><br><span class="line">    Collections.<span class="keyword">sort</span>(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则 sort() 方法无法执行, 因为 Apple 没有实现 <code>Comparable&lt;Apple&gt;</code> 接口。换句话来说就是 <code>? super T</code> 使 sort() 方法变得更为通用了。</p>
<h5 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h5><p>当通配符只有一个 <code>?</code> 时，即为无界通配符。如 List&lt;?&gt;，<code>?</code> 可以代表任意类型，<code>任意</code> 也就是未知类型。无界通配符一般应用于以下两种场景中：</p>
<ol>
<li>当方法是使用原始的 Object 类型作为参数时</li>
<li>在定义的方法体的业务逻辑与泛型类型无关时</li>
</ol>
<p>第一种场景，例如：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">public</span> <span class="variable">static</span> <span class="variable">void</span> <span class="variable">printList</span><span class="punctuation">(</span><span class="built_in">List</span><span class="operator">&lt;</span><span class="variable">Object</span><span class="operator">&gt;</span> <span class="variable">list</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="variable">for</span> <span class="punctuation">(</span><span class="variable">Object</span> <span class="variable">item</span> <span class="operator">:</span> <span class="variable">list</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="variable">System</span><span class="operator">.</span><span class="variable">out</span><span class="operator">.</span><span class="variable">println</span><span class="punctuation">(</span><span class="variable">item</span> <span class="operator">+</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span><span class="operator">;</span></span><br><span class="line">    <span class="variable">System</span><span class="operator">.</span><span class="variable">out</span><span class="operator">.</span><span class="variable">println</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">Integer</span><span class="operator">&gt;</span> <span class="variable">li</span> <span class="operator">=</span> <span class="built_in">Arrays</span><span class="operator">.</span><span class="variable">asList</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="operator">;</span></span><br><span class="line"><span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">String</span><span class="operator">&gt;</span> <span class="variable">ls</span> <span class="operator">=</span> <span class="built_in">Arrays</span><span class="operator">.</span><span class="variable">asList</span><span class="punctuation">(</span><span class="string">&quot;one&quot;</span><span class="operator">,</span> <span class="string">&quot;two&quot;</span><span class="operator">,</span> <span class="string">&quot;three&quot;</span><span class="punctuation">)</span><span class="operator">;</span></span><br><span class="line"><span class="variable">printList</span><span class="punctuation">(</span><span class="variable">li</span><span class="punctuation">)</span><span class="operator">;</span>  <span class="operator">//</span> 编译不通过，因为需要传入 <span class="built_in">List</span><span class="operator">&lt;</span><span class="variable">Object</span><span class="operator">&gt;</span> 但是传入的参数为 <span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">Integer</span><span class="operator">&gt;</span></span><br><span class="line"><span class="variable">printList</span><span class="punctuation">(</span><span class="variable">ls</span><span class="punctuation">)</span><span class="operator">;</span>  <span class="operator">//</span> 编译不通过，因为需要传入 <span class="built_in">List</span><span class="operator">&lt;</span><span class="variable">Object</span><span class="operator">&gt;</span> 但是传入的参数为 <span class="built_in">List</span><span class="operator">&lt;</span><span class="built_in">String</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，如果将 printList 参数进行修改：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> printList(List&lt;?&gt; list) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">Object</span> item : list) &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(item + &quot; &quot;);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面我们提到过 <code>List&lt;?&gt;</code> 相当于 <code>List&lt;? extends Object&gt;</code>，则所有 <code>List&lt;? extends Object&gt;</code> 的子类型都可以传递给 printList() 函数，并且所有传入的元素都将安全地向上转型为 Object 存入 <code>List&lt;?&gt;</code> 中。这样可以更好地兼容函数的参数传递和调用。</p>
<p>第二种场景，例如：</p>
<p>List.size(), List.clear() 方法等，使用最多的是 <code>Class&lt;?&gt;</code> ，这样就避免了 <code>Class&lt;T&gt;</code> 对于 T 类型的依赖。</p>
<p>最后需要注意的是，<code>List&lt;?&gt;</code> 不同于 <code>List&lt;Object&gt;</code>，因为 <code>List&lt;Object&gt;</code> 是 <code>List&lt;?&gt;</code> 的子类，而且不能往 <code>List&lt;?&gt;</code> 列表中添加除了 null 之外的任何元素。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、peiquan，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9wZWlxdWFuLzEzMDM3Njg=">java 通配符解惑<i class="fa fa-external-link-alt"></i></span></p>
<p>2、Brian Goetz，<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otanRwMDQyOTguaHRtbA==">使用通配符简化泛型使用<i class="fa fa-external-link-alt"></i></span></p>
<p>3、BarbaraBear，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jYjU0Mzk2OWExNWI=">Java 泛型中的通配符<i class="fa fa-external-link-alt"></i></span></p>
<p>4、Stack Overflow，<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDM0MzIwMi9kaWZmZXJlbmNlLWJldHdlZW4tc3VwZXItdC1hbmQtZXh0ZW5kcy10LWluLWphdmE=">Difference between &lt;? super T&gt; and &lt;? extends T&gt; in Java<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>通配符</tag>
      </tags>
  </entry>
  <entry>
    <title>「2+2」 原则</title>
    <url>/2020/04/12/2020-04-12-2-plus-2/</url>
    <content><![CDATA[<p>当我们遇到困难需要向上寻求帮助时，可以使用【2+2】原则，一共提出四个问题：1. 期望的结果是什么；2. 当前的进展是什么；3. 遇到了什么困难；4. 需要哪些资源帮助，这四个问题，前两个可以快速阐明问题的背景和进展，后两个可以明确阐明难点和需求，使用这种方式寻求帮助可以更高效的完成沟通，节约双方的时</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>双向反馈法</title>
    <url>/2020/03/15/2020-03-15-double-side-feedback/</url>
    <content><![CDATA[<p>当我们需要对他人的工作做出评价的时候，最好使用双向反馈法——既要给出激励性反馈，又要给出建设性反馈，每种反馈至少三条。激励性反馈是指找出其做得好的点，给出反馈，建设性反馈即找出可以改进的点，进行反馈。双向反馈法的好处是可以帮助我们更全面的考虑，避免出现片面的评价，同时又能为对方提出中肯的建议。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning By Doing</title>
    <url>/2020/03/29/2020-03-29-learning-by-doing/</url>
    <content><![CDATA[<p>之前听一鸣同学说我们要 Learning By Doing，其义即是在实践中学习、在工作中学习。我们大部分的学习是在工作中实现的，因为工作中遇到的问题众多，每天都会给我们新的课题，很多问题可能从前根本没有遇到过、考虑过，并且是必须解决的，为我们提供了持续学习的丰富素材，通过遇到并解决问题，我们可以在工作中不断地学习和提升自己。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>立即行动</title>
    <url>/2020/04/26/2020-04-26-act-immediately/</url>
    <content><![CDATA[<p>当你决定做一件事情时，你必须在72小时之内行动起来，否则你可能永远不会再做了。这是前两天从一本书上学习到的一句话，觉得很有道理，无关乎是不是三分钟热度，因为我们处在一个信息爆炸的时代，每天又在不断的被信息淹没，如果决定做一件事时不马上行动起来，很可能就会被后来的信息淹没。至少当我们有一个想法时，赶紧记录下来，然后根据四象限模型放到对应的优先级中，这样以后才有迹可循。我理解这句话的要点就是提高执行力，立即行动起来。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于任务优先级</title>
    <url>/2020/04/03/2020-04-03-mission-priority/</url>
    <content><![CDATA[<p>我们都知道事情是需要分紧急程度和重要程度的，那我们应该如何对这些事情排出优先级呢？首先对于不紧急不重要的事情我们不要耗费时间去做，对于紧急不重要的事情一般我们称为琐事，要无负担的做，最好就是记录到 todo-list 中，这样就可以放空大脑关于这部分的负担，抽空的时候做就好，对于紧急且重要的事情毫无疑问应该尽最大努力去完成尽量做到 100%，对于重要不紧急的事情，需要我们每天持续的去完成和优化，争取当他成为紧急重要的事情的时候能做到完成 120%</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>关于坚持</title>
    <url>/2020/04/17/2020-04-17-about-consist/</url>
    <content><![CDATA[<p>最近听到了几个定律：荷花定律，竹子定律和金蝉定律，其核心思想都是要坚持不懈，荷花在最后一天开满池塘，而前一天只有一半而已，竹子4年时间发展根系，只为之后迸发的成长，蝉在底下长久深埋，只为最后的腾飞。这些其实都很符合当今的一个说法，苦练基本功，延迟满足感，不要因为眼前一时的得失产生放弃的心理，而是顶住压力，不断地保持学习和进步，这样才能让我们获得更好的成长。比如我们平常开发过程中，可能会遇到一些比较棘手的任务，导致站会的时候感觉没有什么进展，这个时候我们不应该失落而导致效率降低，而是更应该想办法解决问题或寻求帮助，从而锻炼自己的技术水平，更快更稳的成长。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我们的上下文切换</title>
    <url>/2020/05/09/2020-05-09-context-switch/</url>
    <content><![CDATA[<p>就像电脑的CPU一样，我们做事时，其实也是有上下文的，如果不断被其他事情打断，那我们切换回原来上下文的成本就会非常高，会极大的降低我们的工作效率，所以集中精力免打扰的完整的做完一件事情才能最大限度的利用好我们的精力和能力。应用在我们工作中，一天中可以在某几段需要集中的整块时间（oncall当天可能要做好没有整块时间的打算），开启勿扰模式，减少被打断的次数，才可能更高效的完成设计或者编写代码，提升整体的任务完成效率</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>非暴力沟通</title>
    <url>/2020/05/15/2020-05-15-non-violence-communicate/</url>
    <content><![CDATA[<p>本周阅读了《非暴力沟通》了解到我们周围其实充满了无意识的“暴力沟通”，比如直言“你这个方案不对”，“你应该这么这么做”等等，这种沟通很可能导致对方有很不好的感受，不利于后续的沟通。所以在沟通之前我们可以先把谈话目标说出来，然后采用四步法进行沟通：讲事实，讲感受，讲原因，讲需求。例如：妻子对丈夫说，我想和你谈谈你回家晚的情况，这周你有四次在22点之后回家（<strong>讲事实</strong>，不要添加主观感受，例如“经常回家晚”），这样让我感到很孤单（<strong>讲感受</strong>），因为你不在家我没人可以说话，也有点害怕（<strong>讲原因</strong>），我希望你今后尽量在22点之前回家（<strong>讲需求</strong>，明确的提出需求）。先提出谈话目标，可以让对方提前知道接下来要讨论的要点，然后通过<strong>事实，感受，原因，需求</strong>一步步让对方了解到自己做的事情造成的影响，应该如何去做，而不会引起情绪上的爆发。当然，非暴力沟通也不是适用于所有的场景，使用前需要视谈论的话题而定。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>逆商</title>
    <url>/2020/05/29/2020-05-29-anti-intelligence/</url>
    <content><![CDATA[<p>如果把面对逆境比作攀登山峰，我们可能成为三种角色：放弃者，扎营者，攀登者，放弃者很好理解，遇到逆境便产生退缩的想法，屈服于逆境，觉得自己不行；扎营者是克服了几个逆境之后，觉得自己满足了，便不再举步向前，原地扎营；攀登者用于面对和发现逆境，并不断的克服，不断向前。大部分人都是扎营者，但我们都期望攀登者。遭遇困难时，我们可以使用夸张的方式告诉自己遇到了逆境，例如在脑海里告诉自己“叮！逆境来了”，这样我们便不会畏惧它，而是去想办法克服它，不断向前，我们终将成为攀登者。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于信息同步</title>
    <url>/2020/06/07/2020-06-07-information-sync/</url>
    <content><![CDATA[<p>信息同步非常重要，当我们前期与其他同学对接了需求之后，如果由于某些原因无法正常开始开发的话，一定要及时同步到对方，否则对方默认我们会支持而开发了相应功能之后，问我们要功能的时候却无法提供，这样不但浪费了对方的人力还会对双方的合作产生非常负面的影响。切记切记，信息一定要及时同步。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>做需求之前需要思考的问题</title>
    <url>/2020/06/12/2020-06-12-thinking-before-do-requirement/</url>
    <content><![CDATA[<p>做需求之前我们需要思考几个问题：</p>
<ol>
<li>为什么要做。已经是老生常谈了，不能为了做需求而做需求，而是要思考这个需求可以提升哪些指标，满足哪些用户需求，是否合理等等</li>
<li>使用场景是什么。其实有的时候我们思考出来的需求可能是伪需求，乍看之下很有道理，但是如果不能结合使用场景来落地，那其实这个需求并没有实际的意义。能够满足使用场景落地的需求才是好需求。</li>
<li>制定何种评估指标。其实这一点我们都做到了一部分，我们每次实现需求并进行验证时都在自己的脑海里有一套评估指标，比如返回值是否符合预期，数据是否正常修改等等，但是如果某个需求比较大，更好的方法是把这些指标书面化，然后再思考一下是否有遗漏，尽量避免人为导致的疏漏。</li>
<li>实现到什么程度能满足业务的需求。大部分的需求也不是需要一步到位的看，我们在讨论一个需求时，如果能够先做出一个MVP版本满足业务的基本需求，然后再不断地根据业务的新需求迭代优化，可能是一个更加灵活和快速的方式</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>规划三角形</title>
    <url>/2020/06/28/2020-06-29-planning-triangle/</url>
    <content><![CDATA[<p>年度规划会议中，育亮讲到了一个规划三角形的方法论，感觉受益匪浅。<br>对于 MS 平台，可以拆分为【平台，数据，架构】三个维度来开展规划；数据包括数据分析，数据存储的完整性和实时性等，架构包括现有架构的稳定性和可运维性等，平台包括易用性和便捷性等，可以从三个维度各自的特点来思考可以做的内容，而不是仅仅限制于其中某一个维度；<br>做规划的时候，还要注意点到即止，把大目标分解为几个更细粒度的方向，为每个方向打一个分数，规划每个双月需要把各个方向提升多少，最开始不用做太多，先提供最基础的能力，把特别缺失的部分先做到及格，然后通过迭代提升分数，不要把某个方向做到很高分数后才去做别的方向，做规划需要考虑均衡发展，避免头重脚轻。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做长期规划</title>
    <url>/2020/07/12/2020-07-12-long-term-planning/</url>
    <content><![CDATA[<p>又从育亮学到了一个关于制定规划的点：做长期规划的时候，不一定要基于现有的能力想我们能做什么，可以激进一些，</p>
<ol>
<li>看看能不能与其他部门合作共同开发，共建更加适宜用户使用的平台；</li>
<li>跳出当前的能力圈思考我们还有什么可以做的，然后再收束成我们如果做需要什么样的能力，进而去锻炼相关的能力。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>抓主要矛盾&amp;&amp;注重文档</title>
    <url>/2020/07/23/2020-07-23-main-issue-and-documents/</url>
    <content><![CDATA[<ol>
<li>最近学习到了一个方法论：抓主要矛盾，这个方法论意义为在我们面对众多工作的事宜时，要弄清楚当前的最重要最紧急的事情，并将其作为主要矛盾，并且这个主要矛盾随着事情优先级的改变也是随时改变的，需要解决主要矛盾之后再处理其他事宜，而不要让非主要矛盾占用了主要矛盾的时间</li>
<li>清晰的流程文档很重要，第一是可以省下每次去跟新同学讲解的时间，用节省下的人力去做更重要的事情，第二是可以帮助自己再次去理清思路，加深对整个项目的印象，第三是标准的流程文档可以避免出现人为疏忽而导致的问题。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>避免经验主义导致的问题</title>
    <url>/2020/08/07/2020-08-07-avoid-empiricism/</url>
    <content><![CDATA[<p>在业务高速发展的系统中，在利用以往经验进行判断时，需要首先判断当前的业务是否还符合历史经验所处的背景和环境中，是否还适合套用经验，如果不适用，就需要摒弃以往的经验，重新思考针对当前业务环境，使用何种方案才能拥有更好的收益，否则很可能会产生反向的效果</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>深入一线了解用户需求</title>
    <url>/2020/08/23/2020-08-23-investigate-user-requirements/</url>
    <content><![CDATA[<p>到深圳出差和对应的架构和业务开发面谈之后深有感触，真的是要多深入一线，才能够真正了解用户的需求，换句话说，只有真正的接触了用户在系统的使用过程中遇到的痛点，才能让我们启发我们更深入的去思考。相比基础架构，业务架构能够更多的接触到用户，也就能更能理解用户的痛点，能思考并提出解决用户问题的需求点，所以我们要多和业务架构以及业务的同学多沟通交流，这不仅仅能让我们更多的接触到用户的痛点，更能激发我们的思考，扩展我们的视野。</p>
<p>另外，在和用户聊需求的时候，不要直接问用户想要什么，因为大概率用户也不知道自己想要的功能具体是什么，也不要直接向用户讲解自己系统的功能，因为用户很可能缺少上下文，并不能很好的进行理解。我们应该跟用户聊他们的工作和使用场景，了解他们在此过程中遇到的问题和潜在的优化点，从而挖掘出用户的需求，并且通过挖掘用户使用场景验证方案的可行性。此外，做访谈总结的时候，最好把用户的原话写上去，因为每个人对于同一句话的理解可能是不同的，写上用户的原话，也能佐证自己的理解是正确的。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们要写周报</title>
    <url>/2020/09/06/2020-09-06-why-write-weekly-report/</url>
    <content><![CDATA[<p>最近在思考为什么我们要写周报，觉得有两方面的作用：</p>
<ol>
<li>对自己，周报是检核项目进展明确项目计划、复盘与调整迭代策略的重要手段。因此，周报内容可以围绕项目进展、计划、经验总结、认知迭代几个方面去写，让自己能够在写周报的过程中不断总结不断进步。</li>
<li>对合作伙伴，周报可以让大家了解项目进展与问题，既能起到进展同步和暴露问题的作用，又能结合项目提出对合作伙伴的诉求，获得对方支持。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写项目规划</title>
    <url>/2020/08/14/2020-08-14-how-to-write-planning/</url>
    <content><![CDATA[<p>上次开会时育亮讲到，我们在写一个项目规划的时候应该从三个方面出发进行阐述，痛点，场景和解决问题，让我想到了之前的一个写作方法论——5w1H，痛点对应的就是 why，我们为什么要做这个项目；场景对应的就是 where，when，who，我们在什么情况下为谁服务，有哪些使用场景；解决问题对应的就是 what 和 how，我们做哪些事情，如何解决用户的痛点问题。这个方法不仅仅可以用在项目规划，在我们要向他人分享内容的时候也可以采用这种框架，能够让听众更加清晰地了解文章要讲述的内容。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>应对“无知之错”和“无能之错”</title>
    <url>/2020/09/11/2020-09-11-two-kinds-fault/</url>
    <content><![CDATA[<p>《清单革命》中提到了两类错误：“无知之错”和“无能之错”。</p>
<ol>
<li>无知之错指的是没有掌握相关的知识，可以认为是专业知识不足以解决遇到的问题，针对此类问题，需要增强专业知识的学习，掌握通用解决方案，从而解决问题。</li>
<li>无能之错指的是犯错并非是因为没有掌握知识，而是因为没有正确使用，此类问题更加考验对已有知识的运用以及相关经验的积累，比“无知之错”更难解决。正所谓“知易行难”，光学习知识是不足以应对这个千变万化的世界的，实践出真知，多积累经验，应用知识，我们需要把重点放在“行”上。。。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>如何应对焦虑</title>
    <url>/2020/08/25/2020-08-25-how-to-deal-anxiety/</url>
    <content><![CDATA[<p>这周听到关于焦虑的解释与应用，觉得比较受用，分享给大家。</p>
<p>焦虑指的是我们对还没有发生的事情产生的负面情绪。关键词：“还没有发生”、“负面情绪”。还没有发生意味着我们是有时间改变它的，负面情绪意味着我们可以直面它、接受并改变它。当我们有这样的情绪时，可以尝试使用列清单的方式，把可能发生的最坏结果写下来，并从第三方视角审视一下，写下为了从坏变好，自己可以做什么事情，从而掌握主动权而不是等待坏结果的发生。</p>
<p>解决焦虑的最好办法，是解决那个引发焦虑的问题。不要沉浸在情绪里，要沉浸在行动里，用行动解决问题。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>掌控习惯</title>
    <url>/2020/09/20/2020-09-20-control-habits/</url>
    <content><![CDATA[<p>《掌控习惯》中提到了打造好习惯的四个定律，感觉对我们还是可以有所帮助的：</p>
<ol>
<li>让习惯显而易见</li>
</ol>
<ul>
<li>用习惯记分卡记录自己每天的习惯，并标注出来哪些是好习惯，哪些是坏习惯</li>
<li>习惯叠加，将不同习惯叠加在一起使其更加显而易见，例如我吃饭之前先要洗手</li>
</ul>
<ol start="2">
<li>让习惯不可抗拒</li>
</ol>
<ul>
<li>让习惯联动起来，继当前习惯之后，我要完成一个我需要的习惯，接着完成一个我想要的习惯</li>
<li>养成习惯时，提升执行习惯的次数的效果大于提升执行习惯的时间</li>
</ul>
<ol start="3">
<li>让习惯简单易行</li>
</ol>
<ul>
<li>习惯是切入点而不是终点，作为启动一系列习惯的起点</li>
<li>两分钟原则，养成习惯时，缩减成两分钟可以完成的版本，比如读一页书，然后再逐步增长时间</li>
</ul>
<ol start="4">
<li>让习惯令人愉悦</li>
</ol>
<ul>
<li>打造即时满足感，完成某一个习惯之后，给自己一个奖励</li>
<li>糟糕的坚持也好过放弃，连续放弃两次之后可能就养成了一个坏习惯</li>
</ul>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>从健身得到的一些感触</title>
    <url>/2020/10/20/2020-10-20-learn-from-body-training/</url>
    <content><![CDATA[<ol>
<li>健身是一项需要长期坚持的事业，身体健康是一辈子的事</li>
</ol>
<ul>
<li>健身是一项非常好的习惯，但是需要长期坚持才能够凸显成效，好习惯都是延迟满足的</li>
<li>人的一生最重要的是身体健康，无论你的价值有多少个零，都是需要身体健康这个 1 来支撑的，失去了身体健康，后面再多的零也是无意义的</li>
<li>如何将健身保持下去？找一个或几个人一起去练是很好的方法，互相监督能够大大提升坚持下去的概率</li>
</ul>
<ol start="2">
<li>不要因循守旧，还要善于学习新的内容</li>
</ol>
<ul>
<li>有时候我们健身总是做一套固定的动作，久而久之可能就会变得倦怠，提不起兴趣，所以我们要持续学习新的动作，不断刺激自己健身的兴趣，达到更好的效果</li>
<li>我们的工作和学习也是这样，如果仅仅抱着已有的知识“吃老本”，早晚有一天会无法跟上时代的潮流，我们要不断地学习新的知识，并应用到工作和学习当中，才能够在时代的浪潮中紧跟脚步，披荆斩棘，乘风破浪</li>
</ul>
<ol start="3">
<li>健身不是一个人的事</li>
</ol>
<ul>
<li>刚才说到身体健康是 1，并且这个 1 还不仅仅是自己的 1，还会影响到我们身边更多的 1，比如父母，配偶，子女等等，我们把身体变得更好，也会让他们更加的安心</li>
<li>我们把身体变得更好之后，还能够反过来影响身边的人，主动教授他们相关知识，让他们也更加具有健身意识，刻意的去锻炼自己的身体，这样一家人的身体都会变得越来越好</li>
</ul>
<ol start="4">
<li>健身要适量</li>
</ol>
<ul>
<li>一定要量力而行，不要把自己练得影响了第二天的工作和学习，这样反而得不偿失</li>
</ul>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何刻意练习</title>
    <url>/2020/09/25/2020-09-25-deliberate-practise/</url>
    <content><![CDATA[<p>看完了《刻意练习》，总结下来有以下四个主要步骤：</p>
<ol>
<li>找个好导师（如果没有导师就去学习杰出人物的练习方式）</li>
</ol>
<ul>
<li>求助导师或者学习杰出人物的做事方式，可以帮助我们建立高效的心理表征和练习方式</li>
<li>我们可以通过 3F 法创建有效的心理表征：focus，feedback 和 fix it，聚焦在做的事情上，然后获得反馈，并根据反馈及时进行修正和提升</li>
</ul>
<ol start="2">
<li>专注的投入</li>
</ol>
<ul>
<li>练习时需要投入百分之百的精力，如果练习时变得懈怠，可以缩短练习时间，短时高效练习的效果要高于长时低效练习</li>
</ul>
<ol start="3">
<li>根据反馈跨越停滞阶段</li>
</ol>
<ul>
<li>反馈是刻意练习中很重要的一个部分，通过反馈，我们可以了解练习的效果和练习中存在的不足，这样能够帮助我们调整练习方法，不断地改进自身，建立更加有效的心理表征</li>
</ul>
<ol start="4">
<li>保持动机</li>
</ol>
<ul>
<li>动机是支持我们不断练习的推动因素，保持动机才能够保持不断地进步。</li>
<li>动机不足的原因只有一个：前进的理由败给了停下脚步的理由，所以要保持动机，要么加强前进的理由，要么弱化停下脚步的理由。</li>
</ul>
<p>我们的技能是需要通过不断的练习才能够提升的，无论是编码能力或者是系统设计的能力，刻意练习的效果往往要高于被动练习，就如我们通过大量的开发实践才能够总结出更加高效的系统体系和业务架构，在每次开发过程中更多的投入精力，获得的结果会更加令自己惊喜。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么需要积极主动</title>
    <url>/2020/10/26/2020-10-26-be-positive-willing/</url>
    <content><![CDATA[<p>以前在穿山甲的时候，有一句话其实说的很对：「成长是个人的事情」，正对应了那句老话「师傅领进门，修行在个人」，我们的 mentor 或者 leader，是我们成长道路上的领路人，可以给我们指出错误，帮助我们调整方向，但是他们是没有义务也没有办法像父母一样拖着拽着让我们进步的，每个人都有自己需要处理的事情，不可能时时刻刻关注到其他人的状态。《刻意练习》里面提到过，练习最重要的步骤就是练习之后需要有即时反馈，让自己能够适时调整错误的姿态和动作，所以积极主动地向周围的人寻求反馈是很重要的，无论是平级还是 leader，都能够为我们提出相应的反馈，这些反馈对于我们的成长是至关重要的。此外，我们还需要更加积极主动的参与到每一份工作当中，从中汲取成长的养分，并主动进行思考，推陈出新。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>从曾国藩身上我们可以学习到的东西</title>
    <url>/2020/10/15/2020-10-15-learn-from-zengguofan/</url>
    <content><![CDATA[<p>曾国藩，我们耳熟能详的一位伟人，组建湘军、平叛太平天国之乱、剿灭捻军、兴办洋务运动，为晚清朝廷立下了赫赫功勋，在我的眼中他一直就是一个有着丰功伟绩，可望而不可及的一位人物。但是张宏杰先生的《曾国藩的正面与侧面》经过严密的考证和整理，从曾国藩日常生活和工作中的一件件小事讲起，将曾国藩一生的故事娓娓道来，将曾国藩这一位“圣人”的形象有血有肉的，立体而丰富的展现在了我们的面前。</p>
<p>为什么曾国藩的事迹总是能够为人们所称道，因为他只是一个智商中等，集各种矛盾于一体的人，就像我们每一位普通人一样，没有超高的智商，没有强硬的后台，靠的是自己的努力，最终成为了一位伟人，这样的成长路径对于普通人来说是可复制的可达到的。</p>
<p>但同时他的成功又不是那么容易复制和达到的，他的性格中有四个要点，让他能够逐步的向上走，缓慢的到达巅峰，这几点真的不是一般人可以轻易做到的。</p>
<p>他能获得成功最重要的一点就是“有恒”，琦玉老师（一拳超人）为什么那么强？贵在“有恒”，曾国藩更是这样，他的“有恒”体现在他的日课上，在日课上他记录了自己每一天的所作所为，包括各种糗事和不足，从而不断反思自己做的不好的地方，及时更正，然后坚持做得好的，这和《掌控习惯》所提出的“习惯是自我提高的复利”不谋而合，他几十年如一日的不断更正自己的错误，让自己不断变得更加优秀。我司的“始终创业”这一点中，“始终”二字便是“有恒”的一个最佳体现，能够一直以一家创业公司的心态要求自己，能自驱，能坚持，能有韧性的不断为之持续的努力，坚持稳步前进。</p>
<p>除了有恒之外他还立志高远，他三十岁之后立志成为“完人”，“内圣外王”，内，俯仰无愧于天地，光明澄澈，不苟且，不退缩；外，经邦治国，建功立业，充分实现自我价值，并一直以“圣人”的言行要求自己，这个难以达到的目标却是驱使他一直不断向前的最大动力，是他面对艰难困苦、诱惑而不停步的指路明灯。这和我们的 OKR 和“追求极致”是多么的契合！我们在工作中也应该像曾国藩一样，以终为始，定下一个长远的目标作为我们的指路明灯，能够去追求长期价值而不是被当下所左右。此外当前所做的每一件事都应该考虑的更加全面，对每一个问题都能刨根问底，每一次思考都能更加贴近本质，追求更高的标准和结果，以求达到“内圣外王”的境界。</p>
<p>还有一点是十分重要的，那就是他遇到挫折能够触底反弹，而不是被困难打倒，人生的五次大堑：科举被悬牌批评，画图甚陋被同事耻笑，批评皇帝遭反驳和挑战“大名大位”者被排挤，长沙“打脱牙和血吞”，江西之困“积泪涨江”，每一件都对他产生了巨大的影响，他在遭受挫折时，想到的不是抱怨，而是憋着一股气奋起向上，让他人刮目相看。其中最重要的一次是在江西去为父丁忧的时候逼迫皇帝给实权失败，在家中不断反思自己以前的做法，让他彻彻底底的变换了自己对人对事的姿态，不再众人皆醉我独醒，而是选择去“和光同尘”，让自己逐渐有了可以做大事的条件。“务实敢为”中也提到了这一点，我们要勇于开拓创新，有担当不畏艰难，敢于失败，并从失败中吸取经验，触底反弹，在不断快速试错迭代中修正我们的方向，最终达成更高的目标。</p>
<p>另外他交友广泛，对待朋友十分真诚，所以能够获得众多臂助，这就是“坦诚清晰”和“开放谦逊”呀，人前人后一致，能够表达自己的真实想法，犯错了勇于承认和改正，能够善意假设，信任对方，久而久之就能够建立长期的友好合作关系，更加快速的推动事情的进展。</p>
<p>曾国藩当时很多的做法都是为了顺应官场顺应时代的无奈之举，处于当今时代，我们能够从曾国藩身上学习到的最重要的几点：</p>
<ol>
<li>我们要立志高远，这样我们才能够不在小诱惑和小目标前止步</li>
<li>为了达到高远的目标，我们需要不断坚持，“有恒”地去为达到目标不断努力</li>
<li>一个人要坚持下来是很难的，我们有时还需要借助外力来监督自己，让身边的朋友或家人看到并督促自己</li>
<li>要多交朋友，用“诚，敬，恕，浑”的方式来交朋友，待人以诚，尊敬他人，宽恕他人，不嫉妒和过于计较，拓宽自己的人脉，多一个朋友多一条路。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>读书让我们进步，实践方能巩固</title>
    <url>/2020/10/13/2020-10-13-reading-and-practise/</url>
    <content><![CDATA[<p>书籍凝聚了各类高手关于他们对于这个世界或者某些事件的理解，我们可以更加高效的从中获取知识，而不用通过日常生活中自己去慢慢踩坑总结，可以极大提高我们获取信息的效率。</p>
<p>我觉得书籍大体可以分为四类：工具书，专业书，文化书，娱乐书，工具书用于提升我们的软实力，比如众所周知的《刻意练习》《金字塔原理》等，专业书用于提升我们专业硬实力，比如《深入理解 JVM 虚拟机》等，文化书用于提升我们的人文素养，文化常识，比如《牛津通识》《明朝那些事儿》等，娱乐书就是用来让我们放松身心，但没有任何实际作用的书籍，比如各类网络小说。</p>
<p>我们应当尽量去阅读能够提升我们能力的书籍，而少去阅读小说这种能够提供即时满足感却无实际意义的书籍。此外，好的书值得多读几遍，并且一定要记录书籍的要点和自己当时读完之后的感想，这样能够加深我们对于这本书的理解和记忆，如果读完了就完事了，遗忘是迟早的事情，而记录和复习才能够加深我们的印象，让我们真正的把书读到脑子里。</p>
<p>把书读到脑子里之后还不算完，能够把书中的知识应用到平常的工作生活中，才算是“读书”真正的终极状态，实践出真知，书中的知识不一定能够直接照搬来解决问题，而利用书中学来的知识和现实相结合，解决真实遇到的问题，才发挥了这次读书的最大作用，才真正巩固了这次读书的效果。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>提升自己思考问题的 level</title>
    <url>/2020/11/02/2020-11-02-upward-thinking-level/</url>
    <content><![CDATA[<p>上次和育亮 one one 时，他提到要提升自己思考问题的层次，不要仅仅思考如何解决当前的问题，这样会不断的陷入细节当中，而应该提升关注问题的层次，抽象出来，理解业务的痛点，当理解并解决了业务的痛点之后，还应该举一反三，更深入的思考是否其他业务也可能存在类似的痛点，如何更好地去解决这类共同的问题。再往上一层，还应该能够考虑到如何协调资源以落地方案。再往上，还应该考虑到业界是如何解决此类问题的，能否辅助我们解决问题，我们今后应该如何继续推进系统的演进等等问题，提升自己的 insight。</p>
<p>总结下来就是，不要仅仅关注如何解决当前的问题，要理解业务痛点举一反三，并能够考虑如何推动方案落地，还需要考虑方案的后续发展演进并持续推动。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写一篇产品设计文档之我见</title>
    <url>/2020/11/08/2020-11-08-how-to-write-product-design-document/</url>
    <content><![CDATA[<p>最近编写产品设计文档时，发现了一些方法论，在这里分享出来。首先，要写一篇产品设计文档时，要明确产品设计的背景是什么，是由于什么问题无法解决才需要这个产品，这个产品针对的用户是哪些人，产品设计出来是要帮他们在什么场景下解决什么问题，为了解决这些问题我们需要提供哪些核心能力，这些核心能力有哪些使用场景，产品要如何呈现才能更好的让用户使用，最后才是详细的架构和技术设计，总结下来一般框架为：</p>
<ol>
<li>背景    - 现有能力    - 局限性</li>
<li>产品愿景</li>
<li>核心能力</li>
<li>使用场景</li>
<li>产品设计    - 产品呈现    - 方案设计</li>
<li>所需资源</li>
<li>效果评估</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>远离受害者模式</title>
    <url>/2020/11/25/2020-11-25-away-victim-mode/</url>
    <content><![CDATA[<p>今天看了一篇文章，提到一个受害者模式，是指在遭遇到困难或者失败时，把自己放在受害者的位置上，责怪他人或者环境，比如，责怪父母离异觉得自己很可怜，责怪配偶不关心自己觉得遇人不淑，工作不顺利责怪领导碾压自己等。受害者模式是一种弱者的模式，消极的模式，不积极反思自己的不足加以改正，而是怨天尤人，满怀委屈和不忿，觉得都是别人的错，与自己无关。</p>
<p>这种心态无法帮助我们意识到自己的能力和责任，产生正向的能量。要获得成长，必须要走出这种心态，主动为发生的事情承担责任，积极探索如何解决问题和避免类似问题的再次发生，并在一次一次的承担中锻炼自己的力量，佛说“莫向外求”，其实我们每个人的潜力非常大，只要我们更加积极主动，我们会发现其实我们是有能力进行选择，有能力承担更多的责任的，相信自己是十分强大的！</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好地准备一场会议</title>
    <url>/2020/11/11/2020-11-11-prepare-conversation/</url>
    <content><![CDATA[<p>今天开了一场略显尴尬的会议，会议上我方存在的问题主要有两点，第一是会议之前和某一相关方没有达成一致，导致在会议上来回拉扯说不清楚，第二是会议之前准备不足，导致与会方提出的问题没有很好的进行回答，导致拖慢了整个会议的节奏，也给与会方留下不太好的印象。所以，在参加重要的会议之前，我们应当准备以下内容：</p>
<ol>
<li>与合作方先达成一致，就算有不一致的地方也先统一好在会上的表述，会后再私下讨论和解决不一致的地方，而不是在会上来回拉扯</li>
<li>在开会之前先定义好会议议程，整理好会议要讨论的内容和想要达成的目标，有导向性的开展会议会更加利于达成一致</li>
<li>开会之前需要事先准备一些与会方可能提出问题的解答，以免会上仓促回答导致内容缺失</li>
</ol>
<p>同样，在开会过程中也有一些需要关注的方面</p>
<ol>
<li>会议开始时，先跟与会方对齐会议议程，然后再展开会议</li>
<li>开会时，某一项议程达成一致后再进行下一项议程，当然，如果某项议程长时间无法达成一致，则需要先暂时搁置，先过完能够达成一致的议程</li>
<li>开会过程中需要记录双方讨论的内容和观点，以便之后复盘</li>
<li>会议结束前，再次确认达成的一致的观点和后续安排，保证双方理解没有偏差</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>重要的 15.87%</title>
    <url>/2020/11/30/2020-11-30-important-15.87-percent/</url>
    <content><![CDATA[<p>今天看到万维钢的一篇文章，讲到我们学习的三个区域：舒适区，学习区和恐慌区，在学习区我们可以达到心流状态，让我们的工作挑战和技能形成平衡，这也就需要我们要在已有的知识技能的基础上增加“意外”，也就是学习新的内容，这个新内容比例经过研究表明是 15.87%，当学习的新知识是这个比例时可以让人获得最快的成长，这个理论同样适用于人工智能学习。</p>
<p>所以想要让我们的学习效率获得提升，最好是基于我们熟悉的内容，再增加 15% 左右的新内容，这样可以让我们的大脑获得更多学习能力的提升，达到学习效率最大化</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提升自己的批判性思维</title>
    <url>/2020/11/22/2020-11-22-criticism-thinking/</url>
    <content><![CDATA[<p>今天看 TED，里面提到了 5 个提升批判性思维的 tips，这里分享给大家</p>
<ol>
<li>确定目的<br>在我们进行某项行动之前，不能为了做而做，而是需要在行动之前确定此次行动需要达成的目标，以便更有针对性的进行下一个步骤</li>
<li>收集信息<br>明确目标之后，需要针对达成这个目标收集信息，包括且不限于咨询领域专家，参考成功经验等，尽可能多的收集信息，为下一个步骤提供基础</li>
<li>应用信息<br>收集到足够的信息之后，我们还需要对这些信息进行分析，找出使用何种信息，进行何种方式的行动可以达成目标，对于一些可能的干扰信息，需要多问一句为什么，是否符合逻辑，能否帮助达成目标？</li>
<li>考虑潜在信息<br>除了考虑已有信息直接给出的结论，还需要思考这些信息中是否还会隐藏一些潜在的信息，比如汽油降价，表面信息是可能会带来购车需求的增加，但我们还需要考虑到这可能会带来的污染等</li>
<li>发掘其他视角<br>这一点其实也是老生常谈了，需要多角度看问题，最简单的方式其实是站在对立的角度来看同一个问题，假想自己是辩论的双方，不断找对方思维的漏洞，从而找出不同的观点，比如我们一个技术方案的设计，设计完成后，多问自己一句，如果不这么实现，能否有其他的实现方式等</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于系统设计抽象一层的思考</title>
    <url>/2020/12/14/2020-12-14-abstract-thinking-of-system-design/</url>
    <content><![CDATA[<p>平常在设计系统时，会基于现有的条件进行系统架构的设计，满足当前用户的需求，以最小的代价完成系统设计和实现。这样的设计在无法完全确定当前业务能否“活下来”的情况下是比较适用的，因为成本较低，可以快速试错，但是带来的缺点是总以最小代价来进行设计，可能会导致设计能力的原地踏步。因此，我们应该在成本可控的基础上再多进行一层抽象的思考，当用户量级或者请求量级提升上来之后应该如何进行设计以保证系统的可靠性，或者如何提升设计的通用性，减少以后的修改成本。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>one on one 时需要注意的点（对同级或下级）</title>
    <url>/2020/12/06/2020-12-06-how-to-one-on-one/</url>
    <content><![CDATA[<p>最近学习了一个与人 one on one 的方法论模型，总结起来主要有两步：第一步是「建立信任打开心扉」，第二步是「解决问题」，切记在对方打开心扉之前，不要抛出问题，并且整个谈话应该是以被交谈者为中心，因为谈话主要是为了解决被交谈者的问题。两个部分又分为两个不同的模型</p>
<p>「建立信任」使用 <strong>PLASS</strong> 模型（praise listen ask share support），praise 表示以肯定和赞许开头，用「事实+评价」的方式肯定对方，打开对方心扉，listen 表示在整个谈话过程中要以倾听为主，给对方足够的时间和空间来表达，并在倾听过程中表示理解，ask 表示用询问和引导的方式获取对方的意见和想法，切记不要过分表达自己的想法，share 表示在谈话过程中还应当分享自己的意见和经验，表露自己的感受和想法，给对方提供「参考」而不是「指导」，support 表示在对方提出需要帮助时，尽自己的努力为对方提供尽量多的支持和帮助，切记不要越俎代庖。</p>
<p>通过上面的方式建立起信任，让对方能够真正的打开心扉，才能开始「解决问题」，这个阶段可以使用 <strong>GROW</strong> 模型（goal reality options way-forward），首先要对齐目标 goal，包括短期和长期目标，让谈话双方能够在一开始就谈论问题的重要性达成一致，然后需要分析现状 reality，抛出遇到问题的难点和原因，充分交换上下文信息，接着一起讨论方案 option，提出一些可供选择的策略或者行动方案，讨论需要哪些支持和资源，最后需要确认行动计划 way-forward，拆分达成目标的步骤，并且设立具体的实施方案。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>关于系统设计抽象一层的思考</title>
    <url>/2021/01/11/2021-01-11-about-persevere/</url>
    <content><![CDATA[<p>从我开始用「不背单词」APP 背单词和「多邻国」APP 学日语已经 50 天了，以前都说 21 天养成一个习惯，那我这个习惯也算是养成了，但是其实能够坚持下来也是有一些条件的，这也和《掌控习惯》里面提到的一些方法不谋而合–让习惯简单易行和让习惯令人愉悦，其中我背单词的时候没有每天背非常多的单词个数，因为那样复习的时候会让自己产生压力，让坚持变的困难，而「多邻国」每个单元的学习比较简短，并且在每次学习之后给出一个及时反馈，给一些奖励，并且有学习排名，让我更有动力继续学习下去。</p>
<p>反映到我们生活中的其他方面，其实我们也可以使用类似的方法让自己能够更长久的坚持下来</p>
<ul>
<li>看书不用看太多，每次看一章或者看一节，看完之后合上书，回顾一下刚刚看完的内容，总结一下自己的理解，最好能够找个人讲出来，化被动为主动。</li>
<li>适当的做总结，而不是等年终的时候才做总结，一次总结太多东西会令人懈怠，每周都回顾一下自己做的事情，学到的内容，最好也能总结下来找个人讲出来，不知不觉之中自己就会获得更快的成长。</li>
</ul>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更好的处理你的版本 tag</title>
    <url>/2021/01/27/2021-01-27-how-to-deal-with-tag/</url>
    <content><![CDATA[<p>今天在发布上线的时候，CI 突然报错没有通过编译，打开一看，惊了，之前依赖的公司内部的一个组件库的 tag 删除了😂，oncall 问了原因，告知是有两个连续的版本 1.0.2 和 1.0.3 有个比较严重的问题所以删掉了。由此，我不禁思考：如何发布版本才能更少的影响用户</p>
<ol>
<li>首先，一定是要尽量保证发布的版本不要有问题，要进行足够的单测和集成测试，力求保证发布的每个版本都是 bug free 的，作为基础组件的库更应该如此。</li>
<li>不要删除已有的 tag，然后重新发一个同名的 tag，之前也是一个组件库的同学进行了这个样的操作，导致已经下载的文件的 checksum 和线上不一致，导致编译错误。</li>
<li>不要在新版本 tag 还没有准备好的情况下，就把老版本的 tag 删除了，即便老版本的 tag 可能有 bug，但是不一定会影响使用，但是一旦删除了，导致无法通过编译而无法上线，所造成的影响可能会更大，比如有一个紧急发布需要上线，但是由于老 tag 删除了而无法打包，后果不堪设想。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何看待看似不公正的待遇</title>
    <url>/2021/01/28/2021-01-28-how-to-deal-with-unfair-treat/</url>
    <content><![CDATA[<p>有时候会听到一些同学的吐槽，说自己遭受了上级的不公正待遇，把更好的机会给了另一位同学而不是自己，导致自己的绩效不出彩，甚至会心生怨怼。其实我们可以设身处地的从两个方面来考虑这个问题：</p>
<ol>
<li>让自己站在上级的角度，思考一下为什么上级会把这个机会交给另一位同学而不是你，可能有以下原因：1. 觉得你能力不够，还不足以按照他的预期完成这个项目；2. 另一位同学经常能够按照预期甚至超预期完成项目。无非就是这两个原因，对于第一点很好解决，先从上级觉得你能够预期完成的事情入手，做到每个项目都能够超预期完成，要不了多久就能够让自己成为第二种情况，也就能够获得更好的机会了。第二点和第一点也是同样的处理方法，当你在上级心中的地位也是能够经常超预期的人了，下次有项目的时候肯定会将你也加入优先队列当中。信赖的建立是需要时间的，不要老想着一蹴而就，一次次信任的积累才能达成更好的信赖</li>
<li>站在自己的角度，觉得上级不认可自己的能力，那么我们换一种思考方式呢？是不是我们没有让上级了解到自己的能力呢？工作中确实容易出现一种马太效应，愿意把项目交给自己信赖的人去做，然后做得好的就有继续的正向循环，而一直缩在后面不展示自己能力的人，可能就会一直得不到能力展示的机会。俗话说的很好：“师傅领进门，修行在个人”，如果自己一直缩在后面，而不愿展示自己的能力，那谁能如伯乐一般偏偏挑中了我们呢？所以我们需要更加主动一些，展示出自己的能力，通过做好一个又一个的项目，得到更多人的认可。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更加完善的考虑和完成需求</title>
    <url>/2021/02/09/2021-02-09-how-to-consider-more-perfect/</url>
    <content><![CDATA[<p>首先，我们需要明确的一点是，用户也无法清晰的知道自己的需求是什么。所以我们在跟用户讨论需求的时候，不要去问用户想要什么功能，否则往往会陷入细节却无法得出真正想要的结果，更好的方式是去引导用户讲述自己的使用场景，以及为什么会有这样的使用场景，自己的痛点是什么。收集过后，使用 MECE 法则，针对用户的场景和痛点穷举出可能的需求及其解决方案，列在白板上，然后对这些列举出来的方案进行抽象归类，这样就形成了一个一个的模块，然后对各个模块进行去重和提炼，提取出各个模块的核心，建立他们之间的关联，然后形成文档之后，与用户再进行多次沟通和交流，多次完善需求和方案，最终达成一致。</p>
<p>在完成需求的时候，需要对各个模块进行充分的评估，然后确定出各个模块的优先级和大致的实现顺序，然后再对各个模块进行更细粒度的拆分，建立起相关的任务，与相关方一起评估实现的难度和方案，讨论得出实现的时间节点（一定要预留足够的 buffer），对于那种有依赖方的需求一定要提前进行沟通，保证正式开发之前依赖已经准备就绪，而不是等做完了某些需求，等要做有依赖的需求才发现依赖方还未准备就绪，这样会有极大的延期风险。实现需求的之后最好能够用 TDD 的方式进行开发，这样可以更明确的了解到需要实现到什么程度，也能在一定程度上保证和提升开发的质量。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于天赋和习惯的思考</title>
    <url>/2021/02/28/2021-02-28-talent-and-habit/</url>
    <content><![CDATA[<p>这周看到一篇 <span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVklHdXBIamhOMUpPblRxUWJrOFFmUQ==">不错的文章<i class="fa fa-external-link-alt"></i></span>， 大致讲的是我们要有一个认知，即决定成功的往往是学习习惯与思维习惯，而非天赋。</p>
<p>举个例子，在面对同样一个问题时，有的人能看得全面深入，有的人却只能单一角度看问题或无法深入。再比如一件事情需要我们进行 7 层的逻辑判断，一部分人由于长期以来的好习惯将思维锻炼到了直接就可以达到 4-5 层，而另一部分人缺少锻炼只能直接看到 1-2 层，面对这个问题的时候就会发现前者往往可以很容易的解决问题，让人觉得他们有天赋，这看起来是天赋，但一些精准的判断与独特的视角却是在过往的习惯中不断积累下来的，因此会给人一种有天赋的感觉。</p>
<p>而形成这些习惯的本质原因，是我们从小的教育与成长环境。有的人过往环境让他更倾向于做能获得短期刺激的事情（如上课开小差、想学习时却被抖音/剧集吸引等）；有的人从小培养了专注的习惯，会对于刺激来的更长期的读书、或深挖一个问题找到背后原因的快感更加倾向。其实所谓天赋，不过是过往的长期原始习惯积累带来的能力差异，并非真的不可逾越。</p>
<p>因此，在这个认知基础上，我们可以刻意训练自己的学习习惯与思维习惯。比如看书时远离手机，给自己创造一个安静的沉浸式的环境，培养专注的习惯。比如在遇到困难时，首先不是畏难，而是尝试找到角度深挖下去，长此以往在遇到困难时的第一反应不是害怕而是快速反应应对。当然除了这些还有其他一些习惯是可以养成的，意识到习惯的差异并建立正确认知，通过刻意练习，是能够逐渐弥补大家普遍认知的“天赋”差距的。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于中观层面的思考</title>
    <url>/2021/02/19/2021-02-19-meso-consideration/</url>
    <content><![CDATA[<p>昨天和朋友讨论了一下关于工作总结应该如何去做的问题，他提出了一个观点我觉得十分正确，就是在总结中我们需要增加我们对于中观层面的思考，而不是仅仅罗列我们做了那些事情和达到了哪些效果。这让我想起了一个之前听到的一个做事情的方法论，叫做「以终为始」，在我们分析问题的时候应该从想要达到的最终效果开始思考，以此为起点，反推出我们需要做到哪些事情。比如我们要实现一个需求来达到某个目标，我们需要思考的不应该仅仅是如何完成这个需求，而是要去想为什么要达到这个目标需要做这个需求，而不是其他需求，有没有什么更好的解决方案，每种解决方案都有哪些优劣之处，为了更好的达到这个目标应该以什么样的优先级来完成不同的小步骤等等。这样的思考方式最开始会花费我们更多的时间和精力，但是一旦养成习惯之后，可以大大的增加我们思考的深度和广度，并且这种思考方式不仅仅可以运用在工作中，生活中也可以使用这种思考方式来达成更好的效果，比如参加一场重要的聚会，先思考想要在聚会上想要达到的状态，然后以终为始选择自己的装扮等等。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于权责利的思考</title>
    <url>/2021/03/12/2021-03-12-authority-responsibility-benefit/</url>
    <content><![CDATA[<p>今天看到了一篇文章，讲的是一个团队指定了 A 作为 B 的上级，但是 A 却没有批复 B 的申请，给 B 打绩效的权利，B 的绩效好坏也不影响 A，久而久之 B 不再听从 A 的安排，A 也不去管 B，导致 AB 虽然是一个团队，却没有团队的合作。这个就是团队管理中常见的权责利不统一而导致的问题。</p>
<ul>
<li>权，指的是团队主管拥有的权利，一般指财务权和人事权。</li>
<li>责，指的是团队主管需要承担的责任，比如团队的整体绩效。</li>
<li>利，指的是实现了绩效之后，整个团队可以和获得的收益及其分配方案。</li>
</ul>
<p>三者之间的关系是缺一不可，相互制约又共同生效的，缺少了权就像指挥家缺少了手，无法顺畅的指挥交响乐，缺少了责容易成为“渣男”，只分派任务却不用担责，导致人心不平衡，缺少了利就是“想让马儿跑，却不给马儿吃草”，三者任缺其一都会导致管理出现问题，要做到权责利平衡，需要先做到薪资等利益和岗位责任对等，其次对应的岗位责任需要赋予对应的权利，岗位责任最大，工作难度越高，赋予的权力也需要越大，成功获取的利益大，失败承受的后果也更严重，三者相互制约，可以理清工作的边界，让我们认清工作的本质，知道什么是我需要做的，做成功能获得什么收益，这样我们工作的积极性也就提升起来了。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>再看 whwhorere 方法论</title>
    <url>/2021/03/18/2021-03-18-whwhorere/</url>
    <content><![CDATA[<p>Whwhorere 是美团提出的一个适用于产品规划和思考的方法论，其构成为 Why, What, Object, Resource, Roadmap, Evaluation，其实和我们经常提到的 5W1H 比较类似，但是更加适合用于产品规划方面。</p>
<ul>
<li>Why：我们为什么要做这个产品，为什么是现在做，是业务发展到了什么阶段导致瓶颈还是有其他的原因</li>
<li>What：我们的产品是什么，要解决哪些痛点问题，提供了哪些能力，</li>
<li>Object：我们产品的目标是什么，用哪些方案来解决提到的问题，为什么选择当前的方案，有没有其他的替代方案</li>
<li>Resource：为了实现这些目标，需要使用多少资源和人力</li>
<li>Roadmap：详细的产品实现路径和 milestone 规划</li>
<li>Evaluation：如何评估产品做出来的效果，每个功能如何证明达到了既定的目标</li>
</ul>
<p>使用这个方法论，可以让我们对于产品的思考更加的清晰明确，建立起一个更加直观的框架结构，也便于我们将自己的产品规划讲述给他人。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>Slice、Map 和 Channel 那些事儿</title>
    <url>/2021/04/16/2021-04-16-slice-map-channel/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>我是加入字节之后才开始学习使用 Golang 的，在学习和应用这门语言的过程中，踩过很多坑，但是踩坑的同时也学习到了很多有用的知识和技巧。通过不断沉淀这些知识和技巧，我们能够更叫高效和保证质量的完成业务代码，避免造成不必要的损失。</p>
<p>建议大家都先去看一下 <span class="exturl" data-url="aHR0cDovL2RldnMuY2xvdWRpbW11bml0eS5jb20vZ290Y2hhcy1hbmQtY29tbW9uLW1pc3Rha2VzLWluLWdvLWdvbGFuZy8=">50 Shades of Go<i class="fa fa-external-link-alt"></i></span>，里面涉及了 Golang 开发初期最容易踩得 50 个坑。</p>
<span id="more"></span>

<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><h2 id="slice-与-array-的区别"><a href="#slice-与-array-的区别" class="headerlink" title="slice 与 array 的区别"></a>slice 与 array 的区别</h2><p>讲到 slice，一定会与 array 做一个对比，那么两者的区别是什么呢，其实最浅层的区别就是，slice 是可以变长的而 array 是定长的，这是由于两者的底层数据结构决定的：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">type slice struct &#123;</span><br><span class="line">   <span class="built_in"> array </span>unsafe.Pointer</span><br><span class="line">    len<span class="built_in"> int</span></span><br><span class="line"><span class="built_in"></span>    cap<span class="built_in"> int</span></span><br><span class="line"><span class="built_in"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>slice 在空间不足的情况下，再 append，会发生扩容新建一个 newSlice，在空间扩展之后，通过 copy，将原有的 slice 拷贝到新的 newSlice 中。因此，扩容时，还会有一个内存地址变化。如果将 slice 作为函数参数，并且在函数中修改 slice 的话，如果没有发生扩容，函数内的修改会更改函数外的源 slice，而如果在方法内部发生扩容的话，修改会发生在新的内存中，函数外的源 slice 不会受到影响。</p>
<p>而 array 需要在初始化的时候指明长度，并且这个长度是不可改变的，是 array 的类型中的组成部分。</p>
<p>除此之外两者还有一个重要的区别，在函数参数中进行值传递时，slice 传的是指针的地址，而 array 会发生拷贝，所以在传递函数参数时注意一定不要传一个大 array，会十分消耗资源。</p>
<h2 id="Slice-使用姿势"><a href="#Slice-使用姿势" class="headerlink" title="Slice 使用姿势"></a>Slice 使用姿势</h2><p>上面说到 Slice 的一个特点就是可以自动扩容，那么他是怎么进行扩容的呢？</p>
<ul>
<li>当 cap &lt; 1024 时，每次扩容容量 * 2</li>
<li>当 cap &gt;= 1024 时，每次扩容容量 *1.25</li>
</ul>
<p>所以如果我们的 Slice 可以预知将会有比较大的容量时，提前分配容量大小可以节约大量的扩容时间，提升性能。此外，如果使用的 Slice 容量是提前知道的话，直接使用 index 赋值会比 append 性能更高。</p>
<h2 id="slice-json-marshal-的小坑"><a href="#slice-json-marshal-的小坑" class="headerlink" title="slice json marshal 的小坑"></a>slice json marshal 的小坑</h2><p>如果使用 <code>var x []Type</code> 初始化 slice，json marshal 之后的值会是 nil</p>
<p>如果使用 <code>[]Type&#123;&#125;</code> 或 <code>make([]Type)</code> 初始化 slice，json marshal 之后返回的值会是 <code>[]</code></p>
<h2 id="Bounds-Checking-Elimination"><a href="#Bounds-Checking-Elimination" class="headerlink" title="Bounds Checking Elimination"></a>Bounds Checking Elimination</h2><p>在对数组进行循环访问时，由于每次循环都会检查数组越界，会影响一定的性能，所以可以使用 bce 来优化性能</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">func <span class="attribute">normal</span>(s []int) &#123;</span><br><span class="line">    <span class="selector-tag">i</span> := <span class="number">0</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[0]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[1]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[2]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[3]</span></span><br><span class="line">    <span class="built_in">println</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="built_in">bce</span>(s <span class="selector-attr">[]</span>int) &#123;</span><br><span class="line">    _ = s<span class="selector-attr">[3]</span></span><br><span class="line">    <span class="selector-tag">i</span> := <span class="number">0</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[0]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[1]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[2]</span></span><br><span class="line">    <span class="selector-tag">i</span> += s<span class="selector-attr">[3]</span></span><br><span class="line">    <span class="built_in">println</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bce 性能更加的原因在于使编译器提前优化，减少了数组越界的检查</p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>map 也是我们常用的数据结构，比较特别的一点是 Golang 中没有 set 这个数据结构，如果我们需要使用 set 的话，需要使用 <code>map[interface&#123;&#125;]struct&#123;&#125;</code> 来实现。需要注意的一点是 Golang 中的 map 不是一个线程安全的数据结构，其数据结构如下：<br><img data-src="/uploads/in-post/slice-map-channel/hmap.png"><br><img data-src="/uploads/in-post/slice-map-channel/map-type.png"><br>map 的内部使用 buckets 来存储 hash 后的数据，map 实际上的值是一个指针，如果函数传参使用 map 其实传的是这个 map 的指针，所以在函数中修改 map 会修改到函数外源 map 的值，此时，如果有多个地方使用了这个 map，全部都会受到影响，这个需要十分注意，如果对 map 产生了并发写入，会直接抛出 fatal，不会被 recover(）捕获。</p>
<p>另外还有一点需要注意的就是如果删除了 map 中的 key，这个 map 并不会自动缩容，如果需要缩容的话可以让这个 map = make（新 map, 缩容后长度）)，然后将剩余的值赋给新 map。</p>
<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><p>最重要的一点就是 <code>channel 是有锁的</code>，是有锁的，是有锁的，重要的事情说三遍，所以所谓的用 channel 实现代码从而减少锁的使用是一个伪命题。channel 的数据结构如下：</p>
<p><img data-src="/uploads/in-post/slice-map-channel/channel.png"></p>
<p>可以看出来其底层其实是一个 ringbuffer，而 channel 放在 Golang 的 runtime 包里最重要的意义在于 channel 可以直接触发 goroutine 的调度，提高 cpu 的利用率。而由于其底层其实是有锁的，所以 channel 其实不适合用于高并发高性能编程的场景。</p>
<h2 id="buffered-channel-与-unbufferd-channel"><a href="#buffered-channel-与-unbufferd-channel" class="headerlink" title="buffered channel 与 unbufferd channel"></a>buffered channel 与 unbufferd channel</h2><p>两者最主要的区别如下：</p>
<ul>
<li>buffered channel 会发生两次 copy</li>
<li>unbuffered channel 只会发生一次 copy</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>方法论的作用</title>
    <url>/2021/03/30/2021-03-30-about-methodology/</url>
    <content><![CDATA[<p>今天周年庆的仪式上，一鸣提到了他觉得方法论可以说是没有什么作用，抽象相当于在思维上加杠杆，是一种思考上的偷懒，并列举了一个“赋能、闭环”的例子来论证这个事。我部分赞同他的观点，但我还是觉得方法论是有其意义和使用场景的，在我看来，方法论其实是一种对日常工作工程中的经验模型的一种总结，可以帮助我们快速找到一个正确的方式来应对某些事件，比如做预案的时候，需要考虑到哪些方面的内容才能做到不缺不漏，需要联系哪些方向的同学进行共同处理，这些一点一点沉淀下来的经验我认为是一种有用的方法论，是有其实际意义的，如果没有这种方法论进行参考，下次做预案的时候又要重新去想类似的内容，还可能会有缺漏。当然如果只按照方法论沉淀下来的既定内容做事，就会出现一鸣说的“思考上的偷懒”这个问题，所以我们不仅仅要按照方法论做事情，还应该去思考这个方法论是不是适用于当前的环境，是否有更加优化的方式来进行实施，能否把当前的方法论再进行优化，这样方法论不仅能够避免犯一些人为的错误，同样也能够锻炼我们的思维，做到思考上不偷懒。</p>
<p>此外，我觉得方法论对于不同的人来说其实意义也是不一样的，对于已经有很多成熟经验的人来说，方法论可能会在一定程度上限制他的思想；但是对于小白或者首次经历做事的人来说，方法论可以指导他快速上手，有章法的做事，避免在并没有形成良好的工作习惯的时候犯下超过限制的错误。在框架内做事是能够防止犯大错的，总的来说方法论就像是一个框，在这个框里做事不容易犯错，但是无法做跳出这个框的事，当我们在这个框中已经形成了良好的习惯之后，我们却要敢于打破这个框，打破他的限制，让我们的思考和思想能够不断的发散，甚至于把这个框变得更大，限制更小，更加灵活。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>苦练基本功，延迟满足感</title>
    <url>/2021/04/22/2021-04-22-basics-delay-satisfication/</url>
    <content><![CDATA[<p>所谓基本功，即为我们日常工作中的专业技能，比如程序员的编码能力、系统设计能力，产品经理的文档能力、产品设计能力，销售的推销能力等，为什么说要苦练呢？因为练习基本功是一个长期持续，可能伴随着重复和枯燥的过程，热血上头坚持几天不是什么难事，难就难在长期坚持，不断缓慢的提升自己，正所谓“合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下”，就像我之前提到过的，坚持做重要不紧急的事情，可以让最终的效果达到 120% 甚至更高。苦练，不仅仅是一个形容，更是一个要求，我们都知道人最喜欢的事情就是得到快速的即时反馈，但是我们在练习基本功的时候往往无法得到即时反馈，所以才会很难坚持，才会很苦，为了跨过这个苦，我们需要设立长期目标和短期目标，长期目标是让我们有一个被指引的方向不至于走岔路，而短期目标是让我们尽可能快的获得反馈，提升成功的可能性。</p>
<p>延迟满足感则是苦练基本功必须具备的素质，同时也是苦练基本功可以锻炼出的一种能力，两者相辅相成，相互促进。举一个学生时期的例子，我们做题的时候，如果一道题很简单，轻轻松松就做出来了，我们是不会有什么满足感和成就感的，但是如果是一道难题，我们费尽九牛二虎之力终于做出来了，那种满足感和成就感相信大家都曾经感受过，这就是延迟满足感。同样的，在我们工作过程中，如果总是做一些自己能力之内的事情，轻易的就完成了，那我们不但没有什么满足感，还会没有任何进步。如果我们能够去做一些要花比较大的力气才能做成的事情，甚至一些自己无法独立完成，必须和他人合作才能完成的事情，这样的成长和满足感足以让我们久久回味。就像我们的 OKR 一样，其实就是为了让我们可以再往上够一够，让我们的满足感更强烈一些，让我们的成长更快一些。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 的强人锁难</title>
    <url>/2021/04/24/2021-04-24-golang-lock/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>冯敏老师从一个不加锁并发修改导致出现问题的例子讲起，用最佳实践匹配我们工作中的实际场景，提出一些避免踩坑的建议，从而引出锁的进化和原理。</p>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="减少持有时间"><a href="#减少持有时间" class="headerlink" title="减少持有时间"></a>减少持有时间</h2><h3 id="缩小临界区，注意-defer-的使用"><a href="#缩小临界区，注意-defer-的使用" class="headerlink" title="缩小临界区，注意 defer 的使用"></a>缩小临界区，注意 defer 的使用</h3><p>通过缩小临界区的方式，可以避免在加锁和解锁之间，由于有较为耗时的代码，导致锁持有时间过长，从而造成性能问题，例子如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Users = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckUser</span><span class="params">(name, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    realPwd, exist: = Users[name]</span><br><span class="line">    <span class="keyword">return</span> exist &amp; realPwd == password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乍看之下这段代码是没有什么问题的，但是如果代码像下面这样</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">Func <span class="built_in">SomeFunc</span>() &#123;</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">    mu<span class="selector-class">.Lock</span>()</span><br><span class="line">    defer mu<span class="selector-class">.Unlock</span>()</span><br><span class="line">    ...</span><br><span class="line">    ...<span class="comment">// long code</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 defer 之后的代码特别耗时，那这个 mu 锁的时间就会非常长了，会拖慢整个程序的速度。</p>
<span id="more"></span>

<p>有人可能会问了，那我显示调用 mu.Lock() 和 mu.Unlock() 不就好了，像下面这样</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">SomeFunc</span>() &#123;</span><br><span class="line">    mu<span class="selector-class">.Lock</span>()</span><br><span class="line">    ... <span class="comment">// do sth</span></span><br><span class="line">    mu<span class="selector-class">.Unlock</span>()</span><br><span class="line">    ... <span class="comment">// long code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案是不太行，除非 do sth 的时候绝对不会出错，否则 mu 将无法得到释放，如果有令一个线程再次对 mu 加锁将产生死锁，而用 <code>defer mu.Unlock()</code> 的话，能够保证就算出错了 mu 也可以正确释放，这点比提升性能更加重要。</p>
<p>所以我们应该怎么解决这个问题呢？答案是使用临界区减少锁的持有时间：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckUser</span><span class="params">(name, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> realPwd <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> exist <span class="type">bool</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        mu.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">        realPwd, exist: = Users[name]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exist &amp; realPwd == password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用匿名函数的方式把需要加锁的代码包一层进行调用，可以避免上述提到的影响</p>
<h2 id="优化锁的粒度"><a href="#优化锁的粒度" class="headerlink" title="优化锁的粒度"></a>优化锁的粒度</h2><p>最常用的方式就是使用分段锁：</p>
<p><img data-src="/uploads/in-post/golang-lock/segment-lock.png"></p>
<p>举一个 Golang 的 rand 的例子：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">var</span> globalRand = <span class="type">New</span>(&amp;lockedSource&#123;</span><br><span class="line">    src: <span class="type">NewSource</span>(<span class="number">1</span>).(<span class="type">Source64</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> lockedSource struct &#123;</span><br><span class="line">    lk sync.<span class="type">Mutex</span></span><br><span class="line">    src <span class="type">Source64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出 Golang 的 rand 是全局持有一个锁，这样就会导致所有执行 rand 函数的地方会去竞争同一个锁，可能会导致性能降低，提升性能的方式是可以使用分段锁的方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SafeRander <span class="keyword">struct</span> &#123;</span><br><span class="line">    pos     <span class="type">uint32</span></span><br><span class="line">    randers [<span class="number">128</span>]*rand.Rand</span><br><span class="line">    locks   [<span class="number">128</span>]*sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sr *SafeRander)</span></span> Intn(n <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    x := atomic.AddUint32(&amp;sr.pos, <span class="number">1</span>)</span><br><span class="line">    x %= <span class="number">128</span></span><br><span class="line">    sr.locks[x].Lock()</span><br><span class="line">    n = sr.randers[x].Intn(n)</span><br><span class="line">    sr.locks[x].Unlock()</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>使用读写锁可以大大降低整个锁的持有时间：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">type Counter struct &#123;</span><br><span class="line">    count int</span><br><span class="line">    mutex sync<span class="selector-class">.Mutex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (w *Counter) <span class="built_in">Count</span>() &#123;</span><br><span class="line">    w<span class="selector-class">.mutex</span><span class="selector-class">.Lock</span>()</span><br><span class="line">    defer w<span class="selector-class">.mutex</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">    w.count++</span><br><span class="line">    <span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(<span class="selector-tag">time</span>.Microsecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (w *Counter) <span class="built_in">Read</span>() &#123;</span><br><span class="line">    w<span class="selector-class">.mutex</span><span class="selector-class">.Lock</span>()</span><br><span class="line">    defer w<span class="selector-class">.mutex</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">    _ = w<span class="selector-class">.count</span></span><br><span class="line">    <span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(<span class="selector-tag">time</span>.Microsecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type RWCounter struct &#123;</span><br><span class="line">    count int</span><br><span class="line">    mutex sync<span class="selector-class">.RWMutex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (w *RWCounter) <span class="built_in">Count</span>() &#123;</span><br><span class="line">    w<span class="selector-class">.mutex</span><span class="selector-class">.Lock</span>()</span><br><span class="line">    defer w<span class="selector-class">.mutex</span><span class="selector-class">.Unlock</span>()</span><br><span class="line">    w.count++</span><br><span class="line">    <span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(<span class="selector-tag">time</span>.Microsecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (w *RWCounter) <span class="built_in">Read</span>() &#123;</span><br><span class="line">    w<span class="selector-class">.mutex</span><span class="selector-class">.RLock</span>()</span><br><span class="line">    defer w<span class="selector-class">.mutex</span><span class="selector-class">.RUnlock</span>()</span><br><span class="line">    _ = w<span class="selector-class">.count</span></span><br><span class="line">    <span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(<span class="selector-tag">time</span>.Microsecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/golang-lock/counter-rwcounter.png"></p>
<p>通过 Benchmark 可以看出使用读写锁比单纯使用普通锁的性能更好，效率更高</p>
<h2 id="使用原子操作"><a href="#使用原子操作" class="headerlink" title="使用原子操作"></a>使用原子操作</h2><p>相比读写锁，使用原子操作具有更高的性能，因为原子操作不会触发 Go 的调度，也不会阻塞执行流，可以使用 Golang 的 sync/atomic 包中的提供的方法</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">sync/atomic</span><br><span class="line">.AddInt32 (or int64, uint*)</span><br><span class="line">.CompareAndSwapInt32</span><br><span class="line">.(<span class="keyword">Load</span>|<span class="type">Store</span>|<span class="type">Swap</span>)Int32</span><br><span class="line">.(<span class="keyword">Load</span>|<span class="type">Store</span>|<span class="type">Swap</span>)Pointer</span><br><span class="line">.Value</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> v atomic<span class="selector-class">.Value</span></span><br><span class="line">v<span class="selector-class">.Store</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">s, ok := v<span class="selector-class">.Load</span>().(string)</span><br></pre></td></tr></table></figure>

<p>使用原子操作的 AtomicCounter 的 Benchmark，证明原子操作的性能是更高的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> AtomicCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *AtomicCounter)</span></span> Count() &#123;</span><br><span class="line">    atomic.AddInt32(&amp;c.count, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *AtomicCounter)</span></span> Read() &#123;</span><br><span class="line">    _ = atomic.LoadInt32(&amp;c.count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/golang-lock/rwcounter-atomiccounter.png"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本节主要讲解了使用锁的最佳实践，可以使用以下四种方式：</p>
<ol>
<li>减少持有时间</li>
<li>优化锁的粒度</li>
<li>读写分离</li>
<li>使用原子操作</li>
</ol>
<h1 id="避免踩坑"><a href="#避免踩坑" class="headerlink" title="避免踩坑"></a>避免踩坑</h1><h2 id="不要拷贝-Mutex"><a href="#不要拷贝-Mutex" class="headerlink" title="不要拷贝 Mutex"></a>不要拷贝 Mutex</h2><p>如果在我们使用过程中直接传入 mutex 对象作为参数的话，会由于传值而发生拷贝，所以会生成新的 Mutex，导致无法正确的加锁，Goland 会对这种不正确的用法进行提示，非常的人性化</p>
<p><img data-src="/uploads/in-post/golang-lock/mutex.png"></p>
<p>所以如果要使用同一个锁进行加锁可以使用传递指针的形式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">Worker</span>(m *sync.Mutex) &#123;</span><br><span class="line">    m<span class="selector-class">.Lock</span>()</span><br><span class="line">    defer m<span class="selector-class">.Unlock</span>()</span><br><span class="line">    <span class="comment">// do sth, like counting</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    <span class="selector-tag">var</span> mu sync<span class="selector-class">.Mutex</span></span><br><span class="line">    go <span class="built_in">Worker</span>(&amp;mu)</span><br><span class="line">    <span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(<span class="selector-tag">time</span>.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mutex-不可重入"><a href="#Mutex-不可重入" class="headerlink" title="Mutex 不可重入"></a>Mutex 不可重入</h2><p>下面这段代码会发生死锁，原因是 Golang 中 Mutex 是不可重入的，两次加锁会导致自己等待加锁的自己解锁，形成死锁</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">example</span>() &#123;</span><br><span class="line">    <span class="selector-tag">var</span> m sync<span class="selector-class">.Mutex</span></span><br><span class="line"></span><br><span class="line">    m<span class="selector-class">.Lock</span>()</span><br><span class="line">    defer m<span class="selector-class">.Unlock</span>()</span><br><span class="line"></span><br><span class="line">    m<span class="selector-class">.Lock</span>()</span><br><span class="line">    defer m<span class="selector-class">.Unlock</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="atomic-Value-误用"><a href="#atomic-Value-误用" class="headerlink" title="atomic.Value 误用"></a>atomic.Value 误用</h2><p>下面这段代码对 p 这个 map 可能会进行并发读写，从而产生 fatal 错误，使用 atomic 的做法原则上存入的对象都应该是只读的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">ProcessRequest</span>() &#123;</span><br><span class="line">    <span class="selector-tag">p</span> := pacing<span class="selector-class">.Load</span>().(map<span class="selector-attr">[string]</span>int)</span><br><span class="line">    value = <span class="selector-tag">p</span><span class="selector-attr">[x]</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[x]</span> = <span class="built_in">adjust</span>(value)</span><br><span class="line">    pacing<span class="selector-class">.Store</span>(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="race-detector"><a href="#race-detector" class="headerlink" title="race detector"></a>race detector</h2><p>Golang 集成了 race detector，可以使用命令 -race 开启</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -race mypkg</span><br><span class="line">$ <span class="keyword">go</span> run -race mysrc.<span class="keyword">go</span></span><br><span class="line">$ <span class="keyword">go</span> build -race mycmd</span><br><span class="line">$ <span class="keyword">go</span> install -race mypkg</span><br></pre></td></tr></table></figure>

<p>race detector 可以帮我们检测出来我们的代码中可能存在的并发写问题，我们可以在测试环境找出这类问题进行相应的修正</p>
<p><img data-src="/uploads/in-post/golang-lock/race.png"></p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>本节主要展示了一些工作中可能遇到的锁的错误使用方式，我们应当避免踩坑</p>
<ol>
<li>不要拷贝 Mutex</li>
<li>Mutex 不可重入</li>
<li>atomic.Value 应当只存入只读对象</li>
<li>可以使用 race detector 帮助我们检测出代码中的问题<h1 id="锁的进化"><a href="#锁的进化" class="headerlink" title="锁的进化"></a>锁的进化</h1><h2 id="锁的历史"><a href="#锁的历史" class="headerlink" title="锁的历史"></a>锁的历史</h2>单核时期：屏蔽 CPU 中断 -&gt; CAS 指令</li>
</ol>
<p>多核时期：Lock 内存总线 -&gt; MESI 协议（Modified Exclusive Shared Invalid）</p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁：多个 goroutine 可能被同时唤醒，浪费 CPU，并且可能抢不到锁，导致 p99 耗时毛刺</p>
<p>并且由于 Golang 1.14 之前没有实现非抢占式调度，可能会由于 GC 导致锁没有正常释放而造成死锁</p>
<p><img data-src="/uploads/in-post/golang-lock/goroutine-schedule.png"></p>
<h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><p>为了解决上述的问题，Golang 实现了一套「效率优先，兼顾公平」的锁</p>
<p><img data-src="/uploads/in-post/golang-lock/efficient-fair.png"></p>
<p>整体的流程如下：</p>
<p><img data-src="/uploads/in-post/golang-lock/lock-flow.png"></p>
<p>大致分为三个步骤：原子操作直接获取锁，如果失败进入自旋，如果自旋获取锁失败四次则进入等待队列</p>
<p>这个部分是全篇的难点，在这里用文字难以描述，建议大家直接看代码对照着这个流程图来理解，源码位于<code>sync/mutex.go</code>这个文件</p>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>本节主要是讲了锁的历史和 Golang 的实现（虽然没有详细讲），希望大家可以对照着流程图详细理解一下这个过程</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章主要从最佳实践，避免踩坑和锁的历史及 Golang 的实现几个方面为我们拉开了 Golang 锁的序幕，帮助我们更加直观的去学习和理解锁，提升我们代码的正确性^_^</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 并发数据结构和算法实践</title>
    <url>/2021/04/28/2021-04-28-concurrent-data-structure%20copy/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>云浩老师这门课程中，从引入 Golang 本身数据结构对多核性能使用不足的场景讲起，然后由并发安全问题讲起，阐述了解决并发问题的通用方案，并基于此，提出了有序链表的并行化方案，由猜想到验证一步一步引导我们实现一个在多核场景下 scalable 的数据结构，由浅入深，令人印象深刻。</p>
<h1 id="并发安全问题"><a href="#并发安全问题" class="headerlink" title="并发安全问题"></a>并发安全问题</h1><p>并发安全问题，表现为对一个变量发生更改的同时有另一个线程对同一个变量进行了读写，导致产生了不可预知的行为，也叫 data race</p>
<span id="more"></span>

<p>认定可能发生 data race 的条件是：有两个或以上 goroutine 同时接触一个变量，其中至少有一个 goroutine 为写操作</p>
<p>Golang 为我们提供了检查 data race 的方式，就是 <code>-race</code> 参数，我们可以使用<br><code>go run -race</code> 或者 <code>go test -race</code> 来检测我们的代码中是否存在 data race</p>
<p>解决方案：</p>
<ol>
<li>单个变量一写多读 -&gt; atomic</li>
<li>单个变量多写多读 -&gt; sync.Mutex</li>
<li>多个变量多写多读 -&gt; sync.Mutex</li>
</ol>
<h1 id="有序链表并行化"><a href="#有序链表并行化" class="headerlink" title="有序链表并行化"></a>有序链表并行化</h1><p>插入：<br><img data-src="/uploads/in-post/concurrent-data-structure/insert.png"><br>第二步的时候还需要检查 A.marked 是否为 true，如果是的话说明 A 已经被别的节点删除了，此时也需要解锁 Aing 返回 step 1</p>
<p>删除：<br><img data-src="/uploads/in-post/concurrent-data-structure/delete.png"></p>
<p>读取：<br><img data-src="/uploads/in-post/concurrent-data-structure/read.png"></p>
<p>到此并发有序链表就实现完成了，其优缺点如下：</p>
<ol>
<li>优点</li>
</ol>
<ul>
<li>将写操作限制在某个区域，区域内⼀一写多读，全局并发读写</li>
<li>读操作完全⽆无锁，使⽤用 atomic 可以⽆无限制访问节点</li>
</ul>
<ol start="2">
<li>缺点</li>
</ol>
<ul>
<li>查询过程只能遍历链表，成本较⾼</li>
</ul>
<h1 id="skiplist-并行化"><a href="#skiplist-并行化" class="headerlink" title="skiplist 并行化"></a>skiplist 并行化</h1><p>针对上述并发有序链表的缺点，可以使用跳表来提升查询性能：</p>
<p><img data-src="/uploads/in-post/concurrent-data-structure/skiplist.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上述数据结构的适用场景如下：</p>
<ul>
<li>实例核数较多</li>
<li>并发读写中，读操作占比更大</li>
<li>需要元素始终有序</li>
<li>内存敏感（占用内存只有 sync.Map 的一般）</li>
</ul>
<h2 id="开源实现"><a href="#开源实现" class="headerlink" title="开源实现"></a>开源实现</h2><p><a href="/uploads/in-post/concurrent-data-structure/concurrentOrderedLinkList.zip">我的实现（非跳表）</a><br>skipset: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3poYW5neXVuaGFvMTE2L3NraXBzZXQ=">https://github.com/zhangyunhao116/skipset<i class="fa fa-external-link-alt"></i></span><br>skipmap: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3poYW5neXVuaGFvMTE2L3NraXBtYXA=">https://github.com/zhangyunhao116/skipmap<i class="fa fa-external-link-alt"></i></span><br>fastrand: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3poYW5neXVuaGFvMTE2L2Zhc3RyYW5k">https://github.com/zhangyunhao116/fastrand<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang On The Toilet</title>
    <url>/2021/04/18/2021-04-18-gott/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>本文提供了一些 Golang 工程项目的最佳实践，分别从可读性、健壮性和效率三个方面进行描述。</p>
<h1 id="Readable"><a href="#Readable" class="headerlink" title="Readable"></a>Readable</h1><p>可读性对于机器来说其实没有什么区别，但是对于作为开发者的每一个<code>人</code>来说，可读性就显得极其重要了。对于个人开发者来说，一个人不可能记住他写的每一行代码，很多时候我们自己写的代码，经过两三个月之后，我们基本上就会忘记当初写的逻辑，高可读的代码可以让我们更加轻易地进行阅读回忆；而对于协同开发来说，代码的可读性直接决定了多人合作开发的效率，高可读的代码可以让我们协作开发的效率得到巨大的提升，那么常用的代码中有哪些方式可以提升代码的可读性呢？</p>
<span id="more"></span>

<h2 id="if，else-and-happy-path"><a href="#if，else-and-happy-path" class="headerlink" title="if，else and happy path"></a>if，else and happy path</h2><p>Talk is cheap，show me the code.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个例子是去掉不必要的 else，这样可以让我们的代码可读性更高，此外公司 gitlab CI 的时候 lint 会自动检测出这个问题，辅助我们写出更加可读的代码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    err := doSomething()</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        err := doAnotherThing()</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// happy path</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">aFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    err := doSomething()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    err := doAnotherThing()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显而易见，第二种代码可读性比第一种要高得多，这就是尽早返回错误的写法，同时也消除了 happy path，让我们的代码变得更加的清晰易懂</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example 3</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> int</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">    <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> = -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Good example 3</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">    <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行类似 bool 判断后赋值操作时，我们可以提前分配默认值，提升可读性</p>
<h2 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h2><p>我们尽量不要使用 init() 函数来进行赋值和初始化等操作，因为 init() 函数在包被引用时就会自动调用，可能会产生意想不到的副作用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example</span></span><br><span class="line"><span class="keyword">package</span> tiktokclients</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tiktokclient = buildNewTiktokClient()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的写法会在每一个即使不想 build tiktokclient 的引用 tiktokclients 包的地方都调用一次 init() 方法，导致 tiktokclient 不断的 build，从而产生问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Good example</span></span><br><span class="line"><span class="keyword">package</span> tiktokclients</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tiktokclient = buildNewTiktokClient()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用显示的初始化方法，需要初始化的地方才进行初始化，从而避免 init() 函数的副作用。</p>
<h2 id="comments"><a href="#comments" class="headerlink" title="comments"></a>comments</h2><p>注释可以辅助我们更好的理解代码，但是不好的注释反而可能起到反作用</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example 1</span></span><br><span class="line">func Abs(<span class="built_in">num</span> <span class="built_in">int</span>) <span class="built_in">int</span> &#123;</span><br><span class="line">    <span class="comment">// if num is negative</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">num</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">        reutrn -<span class="built_in">num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if num is non-negative</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example 1</span></span><br><span class="line"><span class="comment">// Return abosulote value of an int value</span></span><br><span class="line">func Abs(<span class="built_in">num</span> <span class="built_in">int</span>) <span class="built_in">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">num</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">        reutrn -<span class="built_in">num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释不用解释函数里面每一个逻辑是什么样的，直接解释这个函数是什么作用就可以了。</p>
<p>对于我们而言，其实写出可读性更加好的代码的意义要比写注释更加大，因为注释可能会过时，而代码一定是最新的，如果改了代码却没有更新注释，很可能会误导阅读代码的人，所以加强我们的代码可读性是更加重要的。</p>
<h1 id="Robust"><a href="#Robust" class="headerlink" title="Robust"></a>Robust</h1><p>健壮的代码指的是我们的代码发生错误之后，我们的程序不至于崩溃而还能继续执行。在 Golang 中，最重要的就是处理 panic 和 error。</p>
<h2 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(&quot;start&quot;)</span><br><span class="line">    <span class="built_in">panic</span>(errors.New(&quot;this is a panic))</span><br><span class="line">    <span class="selector-tag">p</span> := <span class="built_in">recover</span>()</span><br><span class="line">    fmt.<span class="built_in">Print</span>(<span class="string">&quot;panic: %v&quot;</span>, p)</span><br><span class="line">    fmt.<span class="built_in">Println</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    defer <span class="built_in">func</span>() &#123;</span><br><span class="line">        <span class="selector-tag">p</span> := <span class="built_in">recover</span>()</span><br><span class="line">        fmt.<span class="built_in">Print</span>(<span class="string">&quot;panic: %v&quot;</span>, p)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(&quot;start&quot;)</span><br><span class="line">    <span class="built_in">panic</span>(errors.New(&quot;this is a panic))</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(&quot;end&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发生 panic 的函数会直接抛出 panic 而不会继续运行之后的代码，所以为了捕获 panic，我们需要在函数开头使用 defer 匿名函数来保证可以捕获到 panic</p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example 1 (Go &lt; 1.13)</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    e := io<span class="selector-class">.EOF</span></span><br><span class="line">    fmt<span class="selector-class">.Println</span>(e == io.EOF) <span class="comment">// true</span></span><br><span class="line">    e = fmt<span class="selector-class">.Errorf</span>(<span class="string">&quot;contenxt: %w&quot;</span>, io.EOF)</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(e == io.EOF) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example 1</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    e := io<span class="selector-class">.EOF</span></span><br><span class="line">    fmt<span class="selector-class">.Println</span>(errors<span class="selector-class">.Is</span>(e, io.EOF)) <span class="comment">// true</span></span><br><span class="line">    e = fmt<span class="selector-class">.Errorf</span>(<span class="string">&quot;contenxt: %w&quot;</span>, io.EOF)</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(errors<span class="selector-class">.Is</span>(e, io.EOF)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad example 2 (Go &lt; 1.13)</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    _, err := os<span class="selector-class">.Open</span>(<span class="string">&quot;non-existing&quot;</span>)</span><br><span class="line">    _, ok := err.(*fs.PathError)</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(ok) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    e := fmt<span class="selector-class">.Errorf</span>(<span class="string">&quot;contenxt: %w&quot;</span>, err)</span><br><span class="line">    _, ok := err.(*fs.PathError)</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(ok) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example 2</span></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    _, err := os<span class="selector-class">.Open</span>(<span class="string">&quot;non-existing&quot;</span>)</span><br><span class="line">    <span class="selector-tag">var</span> pathError *fs<span class="selector-class">.PathError</span></span><br><span class="line">    fmt<span class="selector-class">.Println</span>(errors<span class="selector-class">.As</span>(err, &amp;pathError) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    e := fmt<span class="selector-class">.Errorf</span>(<span class="string">&quot;contenxt: %w&quot;</span>, err)</span><br><span class="line">    fmt<span class="selector-class">.Println</span>(errors<span class="selector-class">.As</span>(e, &amp;pathError) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Golang 的 1.13 版本之前对于 err 的处理可能会出现一些不符合直觉的错误，比如 fmt.Errorf 拼接之后的错误无法溯源和正确转化等，此时我们可以使用 errors.Is() 和 errors.As() 方法解决此类问题。</p>
<h1 id="Efficient"><a href="#Efficient" class="headerlink" title="Efficient"></a>Efficient</h1><p>关于效率，可以使用指针，因为传递指针的时候不会发生值的 copy，可以节省资源提高性能，那么在哪些情况下我们应当使用指针或不使用指针呢？<br>|Good|Bad|<br>|-|-|<br>|当方法内部需要修改传递进来的参数时|指针指向一个 interface|<br>|需要传递一个很大的数据时|方法内部不需要修改传递进来的参数时|<br>|为了保持代码一致性，都使用了指针时|需要传递的数据很小时|</p>
<h2 id="指针的坑"><a href="#指针的坑" class="headerlink" title="指针的坑"></a>指针的坑</h2><p>使用指针是还有一个坑，就是如果在循环中使用指针，会导致循环时取到的值是同一个</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad example</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    r := <span class="built_in">make</span>([]*<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(x))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">        r = <span class="built_in">append</span>(r, &amp;v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print out 3,3,3</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> r &#123;</span><br><span class="line">        fmt.Print(*v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    r := <span class="built_in">make</span>([]*<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(x))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">        c := v</span><br><span class="line">        r = <span class="built_in">append</span>(r, &amp;c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print out 1,2,3</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> r &#123;</span><br><span class="line">        fmt.Print(*v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种写法也是标准的循环中使用 goroutine 时的写法，先用一个局部变量承接循环的值，再将局部变量传递到 goroutine 中。</p>
<h2 id="deprecation"><a href="#deprecation" class="headerlink" title="deprecation"></a>deprecation</h2><p>我们的代码是不断更新的，当旧的方法不再使用时，我们需要在其上添加 <code>Deprecated</code> 注释，以表示不再建议使用，在 Goland 等 IDE 中还会根据这个注释进行相应的强提示，告诉我们使用更新的方法。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收和 Golang 内存管理</title>
    <url>/2021/05/06/2021-05-06-go-gc-memory/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>陆老师今天的课程从 GC 的发展历程讲起，渐次讲解了垃圾回收的流派以及基础的垃圾回收方法，从而引出 Golang 的 GC，向我们讲述了 Golang 垃圾回收的特点与触发时机，最终为我们简述了一些编程过程中可能使用到的工具和指标，帮助我们更快的找到和分析问题。</p>
<h1 id="GC-基本理论"><a href="#GC-基本理论" class="headerlink" title="GC 基本理论"></a>GC 基本理论</h1><p>GC 的发展从 1959 年的 Lisp 语言就开始了，他所做的事情其实就是把需要程序员手动申请和释放内存这件事情自动化了，解放了程序员的生产力，能够用更多的精力放在业务代码上而不是去关心内存，经历了几十年的发展，GC 也变得越来越完善，功能也变得越来越强大了。</p>
<span id="more"></span>
<h2 id="GC-流派"><a href="#GC-流派" class="headerlink" title="GC 流派"></a>GC 流派</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>引用计数是最简单的垃圾回收算法，原理就是发生调用则计数器加一，不再调用了则计数器减一，计数器为零的对象就是垃圾可以直接回收，这个算法的特点是实现十分简单，但是缺点也很明显，就是无法解决循环引用的问题</p>
<h3 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h3><p>可达性分析是最为常用的垃圾回收算法，java，python 和 Golang 都是基于这个方式来找到活对象的，原理就是从一个 GCROOT 出发，依次标记其引用的对象，标记为活对象，完成标记后清除掉所有的死对象，这个算法解决了循环引用的问题，但是缺点是耗费时间会比较长</p>
<h4 id="垃圾回收方式"><a href="#垃圾回收方式" class="headerlink" title="垃圾回收方式"></a>垃圾回收方式</h4><ol>
<li><p>Copying<br>复制的算法需要有两块内存区域，假设为 A 和 B，此时对象都在 A 区域分配，发生回收时会标记 A 区域活着的对象，然后全部复制到 B 区域，然后将 A 区域清空，特点是速度比较快，且没有内存碎片，缺点是会比较浪费内存。java 的分代回收的年轻代就是用的这个回收方式</p>
</li>
<li><p>Mark-sweep GC<br>标记清除的算法是发生回收时标记存活的对象，然后把所有不存活的对象全部回收，特点是速度比较快，缺点是会产生大量的内存碎片</p>
</li>
<li><p>Mark-compact GC<br>标记整理的算法和标记清除类似，但是在清除之后多了一步压缩的步骤，就是把清理后活着的对象重新整理，移动到一块连续的内存区域，解决了标记清除内存碎片的问题，但是缺点就是速度会更慢</p>
</li>
</ol>
<h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><ol>
<li><p>并发<br>所谓并发其实就是标记程序和用户程序同时运行，标记时不会 Stop The World<br><img data-src="/uploads/in-post/go-gc/concurrent-gc.png"></p>
</li>
<li><p>并行<br>并行时标记程序会 Stop The World，导致用户程序暂停<br><img data-src="/uploads/in-post/go-gc/parallel-gc.png"><br>GC 优化的思路大体上都是要减少 STW 的时间，减小对用户程序的影响</p>
</li>
</ol>
<h1 id="Go-内存管理"><a href="#Go-内存管理" class="headerlink" title="Go 内存管理"></a>Go 内存管理</h1><p>GC 的设计需要考虑的因素特别多，不同语言的 GC 侧重点也会有所区别，Golang<br>GC 设计的考量主要是减少暂停时间。</p>
<p><img data-src="/uploads/in-post/go-gc/go-pause-time.png"></p>
<p>从上图可以看到从 1.4 到 1.5 GC 时间有一个质的飞跃，这是因为在 1.5 中实现了基于三色标记清扫的并发垃圾收集器，而 1.6 实现了去中心化的垃圾收集协调器，使用密集的位图替代空闲链表表示的堆内存，降低了清除阶段的 CPU 占用。</p>
<h2 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h2><p>Golang 使用 Tcmalloc （Thread Cache）风格的分配器，将内存空间按照尺寸划分成不同大小的格子，大对象优先在大格内存中进行分配，小对象优先在小格内存中进行分配</p>
<p><img data-src="/uploads/in-post/go-gc/memory-alloc.png"></p>
<p>内存分配方式还分为内部分配和外部分配，内部分配是指对象不管是否占满一个内存格子都分配到一个格子里，缺点是分配时可能会有很多空间的浪费，但是回收之后会有连续的比较大的内存段，而外部分配则是分配时尽量让对象相连，好处是分配的时候没有浪费内存空间，但是回收之后却可能会产生内存碎片，两种方式各有优缺点</p>
<p><img data-src="/uploads/in-post/go-gc/in-out-alloc.png"></p>
<h2 id="回收"><a href="#回收" class="headerlink" title="回收"></a>回收</h2><p>Golang 的垃圾回收有以下特点：</p>
<ul>
<li>并发标记</li>
<li>标记清除</li>
<li>非分代</li>
</ul>
<p>触发垃圾回收的时机如下：</p>
<ul>
<li>到达 GOGC threshold</li>
<li>调用 runtime.GC()</li>
<li>每 2min 自动调用的 runtime.forcegcperiod</li>
</ul>
<p>其中 GOGC 的 threshold 是我们可以进行配置的</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示到达上一次垃圾回收内存的 1+GOGC% 倍容量的时候才触发 GC</span></span><br><span class="line"><span class="keyword">export</span> GOGC=<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/go-gc/gogc.png"></p>
<p>进行标记时，Golang 是使用的三色标记法进行标记，具体的算法可以参考 <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMjAzMDM1Mw==">Golang 三色标记<i class="fa fa-external-link-alt"></i></span> 这篇文章，在标记时，是有三个过程的，先是短时间的 STW 从 GCROOT 出发标记出直接关联的节点，然后并发标记，在不影响用户程序的基础上找到所有活对象，最后再 STW 找到并发标记期间发生了改变的对象，这样就将所有活对象找到了。</p>
<h1 id="编程者指南"><a href="#编程者指南" class="headerlink" title="编程者指南"></a>编程者指南</h1><h2 id="线上诊断"><a href="#线上诊断" class="headerlink" title="线上诊断"></a>线上诊断</h2><p>如果发生了线上问题，我们可以通过几个手段来进行定位</p>
<ol>
<li>监控系统，比如 Argos，Grafana 等等观察各类指标是否有异常</li>
<li>pprof，通过 pprof 可以看到 Golang 程序运行过程中各类资源的分配和使用状况</li>
<li>GC log，如果是内存问题，通过 GC log 我们可以找出异常的 GC 点，进而优化代码</li>
</ol>
<p>那么如果是内存问题，我们如何导出 GC log 呢？</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">GODEBUG</span>=gctrace=1</span><br></pre></td></tr></table></figure>
<p>通过上述的环境变量我们可以导出 Golang 程序运行的 GC log，其格式如下：</p>
<p><img data-src="/uploads/in-post/go-gc/gc-log.png"></p>
<p>通过公式我们可以算出 GC 损耗比例</p>
<p><img data-src="/uploads/in-post/go-gc/gc-cost.png"></p>
<p>如果 GC 损耗比例过大，说明 GC 耗费时间过多，我们可以通过配置 GOGC 这个环境变量来解决这个问题，当我们把 GOGC 配置的大一些的时候，能够明显减少 GC 的次数，同时由于活对象的比例占所有对象的比例很小，每次回收的时间虽然会有所增加，但是也不会太多，收益还是会比较大的。</p>
<h2 id="面向-GC-编程"><a href="#面向-GC-编程" class="headerlink" title="面向 GC 编程"></a>面向 GC 编程</h2><p>如果内存分配能够不发生逃逸，而是就在栈上进行，就可以退栈即释放，不用进行垃圾回收，所以我们可以用以下方式改造我们的代码</p>
<ul>
<li>使用局部变量</li>
<li>参数和返回值传递值</li>
<li>制造 inline 机会<br>通过 <code>go build -gcflags=&#39;-m=1&#39;</code> 可以判断是否发生了逃逸</li>
</ul>
<p><img data-src="/uploads/in-post/go-gc/gc-escape.png"></p>
<p>为了减少 GC 我们可以针对 GO GC 的特点针对性的改变我们的代码：</p>
<ul>
<li>促成内联<ul>
<li>interface call</li>
<li>循环</li>
</ul>
</li>
<li>避免逃逸，使用局部变量</li>
<li>减少分配次数，提前为 slice 和 map 分配内存</li>
<li>缓存对象</li>
</ul>
<p>但是如果我们每次编程都要去考虑如何针对 GC 进行优化的话，其实又有点回到手动控制内存的老路上了，放弃了 GC 为我们带来的便利，增加了我们的工作量，所以专业的事情其实还是应该交给专业的人来做，GC 优化交给 Golang 自身的垃圾回收演进，我们专注于写好业务代码，如果发生了 GC 导致的问题再来进行对应的优化，不要过早优化，分散精力。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本门课程陆老师主要讲解了以下内容</p>
<ol>
<li>从 GC 的发展历程和基本的垃圾回收方式讲起，讲解了引用计数和可达性分析两种标记手段，并且讲解了对应的复制，标记清除，标记整理三种回收方式，并发标记和并行标记的区别</li>
<li>讲解了 Golang 的内存分配策略和垃圾回收方式</li>
<li>提出了一些面向 GC 编程的方法，但是我们还是应该专注于业务</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>垃圾回收</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang scheduler 浅析</title>
    <url>/2021/04/30/2021-04-30-golang-scheduler/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>饶老师从一个故事讲起，引出了调度器的概念和 Golang 的调度器模型，并深入的讲解了 Golang 的循环调度的实现和抢占式调度的实现，不禁令人感叹，Golang 的循环调度为我们的岁月静好负重前行。</p>
<h1 id="循环调度的建立"><a href="#循环调度的建立" class="headerlink" title="循环调度的建立"></a>循环调度的建立</h1><p>所谓对 goroutine 的调度，实际上就是指 Golang 程序代码按照内置的一些算法，在运行时动态的选择合适的 goroutine 放到 CPU 上去执行的过程， 其本质是通过保存和恢复 CPU 寄存器的值达到切换 goroutine 的目的。</p>
<span id="more"></span>

<p><img data-src="/uploads/in-post/golang-scheduler/schedule.png"></p>
<h2 id="GM-模型与-GMP-模型"><a href="#GM-模型与-GMP-模型" class="headerlink" title="GM 模型与 GMP 模型"></a>GM 模型与 GMP 模型</h2><p><img data-src="/uploads/in-post/golang-scheduler/gm-model.png"></p>
<p>由于全局只有一个 global 队列，所有新创建的 goroutine 都会存放到这个队列中（即使是 goroutine 创建的子 goroutine），导致 GM 模型存在以下问题：</p>
<ul>
<li>全局互斥锁</li>
<li>Goroutine 传递问题</li>
<li>每个 M 持有内存缓存</li>
</ul>
<p>为了解决这个问题，引入一个中间层，即引入本队可运行队列 P，成为现在的 GMP 模型：</p>
<p><img data-src="/uploads/in-post/golang-scheduler/gmp-model.png"></p>
<p>G 为执行代码的基本单元，P 为逻辑 Processor，M 代表一个线程，可以理解为“物理 Processor”，新建的 G 都会优先放入到本地 P 队列中，如果满了会放到 Global 队列中，如果执行完了本队列的所有 G，还会从其他的 P 中 steal 一半的 G 到本地队列中运行以提升性能，其执行流程如下：</p>
<p><img data-src="/uploads/in-post/golang-scheduler/gmp-schedule.png"></p>
<h2 id="循环调度的建立-1"><a href="#循环调度的建立-1" class="headerlink" title="循环调度的建立"></a>循环调度的建立</h2><p>循环调度主要由四个主要步骤组成：</p>
<ol>
<li>osinit 计算 CPU 总数，初始化主线程栈</li>
<li>schedinit 确定 M 总数，初始化 g0 栈</li>
<li>make &amp; queue new g 创建用于执行的 goroutine 栈</li>
<li>mstart 开始执行调度</li>
</ol>
<p><img data-src="/uploads/in-post/golang-scheduler/schedule-loop.png"></p>
<h1 id="协作与抢占"><a href="#协作与抢占" class="headerlink" title="协作与抢占"></a>协作与抢占</h1><p>Golang 是在 1.14 之后才实现了抢占式调度的，如果调度 goroutine 的时候发生了 gc 会导致整个程序卡死，这个坑我们需要格外注意。</p>
<p>协作式调度和抢占式调度的区别如下：</p>
<ul>
<li>协作式调度依靠被调度方主动弃权</li>
<li>抢占式调度依靠调度器强制将被调度方中断</li>
</ul>
<p><img data-src="/uploads/in-post/golang-scheduler/schedule-type.png"></p>
<p>其中需要注意的一点是主动调度弃权必须要有函数调用且有扩栈指令才有机会执行抢占，如果循环中执行的是类似 <code>i++</code> 这类操作是无法抢占的从而会导致死循环，所以在 Golang 1.14 中实现了基于信号的抢占，其主要流程如下：</p>
<p><img data-src="/uploads/in-post/golang-scheduler/signal-schedule.png"></p>
<p>协作式调度与抢占式调度的大致流程为：</p>
<p><img data-src="/uploads/in-post/golang-scheduler/schedule-flow.png"></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><span class="exturl" data-url="aHR0cHM6Ly9xY3Jhby5jb20vMjAxOS8wOS8wNi9kaXZlLWludG8tZ28tc2NoZWR1bGVyLXNvdXJjZS1jb2RlLw==">饶老师的系列博客<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iMjMudHYvODN4SzBQ">Go Scheduler 源码阅读 【 Go 夜读 】<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提升记忆水平</title>
    <url>/2021/05/15/2021-05-15-raise-memory-level/</url>
    <content><![CDATA[<p>我们都知道记忆其实是大脑中神经回路的形成，分为短期记忆和长期记忆，通过重复我们可以把短期记忆变为长期记忆，艾宾浩斯遗忘曲线大家肯定也不陌生，费曼学习法是耳熟能详，今天看了一篇文章，提到了一些其他方式，感觉比较新奇，和大家分享一下：LTP 增强法，狮子记忆法</p>
<ol>
<li>LTP 增强法主要有三点：</li>
</ol>
<ul>
<li>调动好奇心，让自己兴奋和期待，激发θ波，当θ波出现之后记忆效率会提升 十倍，我们平时应该也有这种感觉，背不感兴趣的课文很困难，但是背同样长度的歌词却轻松得多；</li>
<li>用情绪波动辅助记忆，当我们快乐的时候记忆力会更好，莫扎特的音乐可以提升学习效率也是因为可以让人快乐，此外在记忆时带入情绪也可以让我们记得更牢，比如秦始皇公元前 221 年统一六国，死记硬背是比较困难的，但是如果我们想象一些秦始皇统一六国时坐在龙椅上是多么自豪，一下子就记下来了</li>
<li>减少压力，压力会抑制 LTP（长时程增强作用），降低记忆效率，当我们压力大的时候可以坐直，深呼吸来降低压力</li>
</ul>
<ol start="2">
<li>狮子记忆法：</li>
</ol>
<ul>
<li>饥饿激素可以促进海马体产生 LTP，提升记忆力，而饭后血液会流向胃部，大脑供血效率降低，所以吃饭前饥饿时更适合学习，所以最好饭前学习而不是饭后学习</li>
<li>走动或者坐在行驶的车上可以促进产生θ波提升记忆力，对于这点我表示存疑，因为没有实际的例子可以说服我相信这个说法。</li>
<li>降低温度可以提升身体的危机感，促进血液循环，从而提升记忆力，这点相信我们都经历过，当温度比较高时我们会觉得很舒适而导致不想思考或者思考变慢</li>
</ul>
<p>除此之外，睡觉其实也是帮助我们整理记忆内容的好方法，把学习内容划分为一个一个小步骤，分阶段循序渐进的学更能加深我们的印象，当我们掌握了某种能力，再去学习类似的能力时更加容易进行能力迁移，所以学习最好的方式是先提升自己擅长的能力，扩大优势，然后在学习新知识的时候进行能力迁移。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 工程管理与业务实践</title>
    <url>/2021/05/16/2021-05-16-golang-dependency/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>范峥老师从 Golang 的依赖管理的历史和演进过程讲起，详细的阐述了 go mod 的工作原理并讲述了一些常用工具和方法，紧接着，通过几个 case 让我们直观的了解到实际工作中可能遇到的问题及其解决方案。</p>
<h1 id="Golang-工程和依赖管理基本机制"><a href="#Golang-工程和依赖管理基本机制" class="headerlink" title="Golang 工程和依赖管理基本机制"></a>Golang 工程和依赖管理基本机制</h1><h2 id="Golang-管理机制的演进"><a href="#Golang-管理机制的演进" class="headerlink" title="Golang 管理机制的演进"></a>Golang 管理机制的演进</h2><h3 id="第一代：GOPATH"><a href="#第一代：GOPATH" class="headerlink" title="第一代：GOPATH"></a>第一代：GOPATH</h3><p><img data-src="/uploads/in-post/go-dependency/gopath.png"></p>
<span id="more"></span>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>所有依赖库按路径组织在 $GOPATH/src 下</li>
<li>编译时直接使用 $GOPATH/src 下的代码</li>
<li>go get 会下载代码到 $GOPATH/src 下<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4></li>
<li>依赖库的版本控制很麻烦，需要通过控制依赖库代码下载做版本控制</li>
<li>不同环境下依赖库版本不一致</li>
</ul>
<h3 id="第二代：govendor"><a href="#第二代：govendor" class="headerlink" title="第二代：govendor"></a>第二代：govendor</h3><p><img data-src="/uploads/in-post/go-dependency/govendor.png"></p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul>
<li>所有依赖库按路径组织在项目的 vendor 目录下</li>
<li>编译时使用 vendor 中的代码</li>
<li>通过 govendor 工具来更新 vendor 下的代码<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4>虽然 govendor 通过 vendor 目录解决了不同环境下依赖库版本不一致的问题，但是依然没有解决依赖库版本控制麻烦的问题。</li>
</ul>
<h3 id="第三代：go-mod"><a href="#第三代：go-mod" class="headerlink" title="第三代：go mod"></a>第三代：go mod</h3><p><img data-src="/uploads/in-post/go-dependency/gomod.png"></p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul>
<li>所有依赖代码按路径和版本号组织在$GOPATH/pkg/mod 目录下</li>
<li>采用 go.mod 文件描述依赖项的版本</li>
<li>通过 go get/mod 等命令管理依赖</li>
</ul>
<p>通过 go.mod 文件，我们可以轻易的描述出依赖库的版本，并且编译时会使用 mod 目录下的代码，此目录的代码是根据 go.mod 文件描述进行下载的，保证了不同环境依赖库的一致性</p>
<h2 id="go-mod-工作原理"><a href="#go-mod-工作原理" class="headerlink" title="go mod 工作原理"></a>go mod 工作原理</h2><h3 id="版本表达"><a href="#版本表达" class="headerlink" title="版本表达"></a>版本表达</h3><p><img data-src="/uploads/in-post/go-dependency/gomod-version.png"></p>
<p>go.mod 的版本有两种表达方式：</p>
<ol>
<li>semver 语义化表达：</li>
</ol>
<ul>
<li>每个语义版本都采用<code>v 主版本号。次版本号。修订版本号</code></li>
<li><strong>v</strong> 所有版本号都以<code>v</code>开头</li>
<li><strong>主版本号</strong> 如果主版本号更新，将意味着 API 版本不再向下兼容</li>
<li><strong>次版本号</strong> 增加了新特性，并且向下兼容</li>
<li><strong>修订版本号</strong> 向下兼容的 bug 修复</li>
</ul>
<ol start="2">
<li>基于 commit 的伪版本号表达：</li>
</ol>
<ul>
<li>每个伪版本号都采用<code>v 基本版本-commit UTC 时间-commit hash 前 12 位</code></li>
<li><strong>v</strong> 所有版本号都以<code>v</code>开头</li>
<li><strong>commit UTC 时间</strong> 时间使用 yyyymmddhhmmss 格式</li>
<li><strong>commit hash</strong> commit hash 使用前 12 位</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><img data-src="/uploads/in-post/go-dependency/command.png"><br>使用 go mod 的前提是已经初始化了项目，在项目根目录下使用<code>go mod init</code>即可完成初始化。</p>
<p>有了模块定义，然后执行 <code>go mod tidy</code> 会自动生成依赖，填充 go.mod, go.sum 文件</p>
<p>之后我们可以使用 <code>go list -m all</code> 查看当前项目正在使用的 package 版本，然后执行 <code>go get xxx/xxx</code> 来更新指定的 package</p>
<h3 id="版本选择算法"><a href="#版本选择算法" class="headerlink" title="版本选择算法"></a>版本选择算法</h3><p><img data-src="/uploads/in-post/go-dependency/version-select.png"></p>
<h3 id="实际使用中存在的问题"><a href="#实际使用中存在的问题" class="headerlink" title="实际使用中存在的问题"></a>实际使用中存在的问题</h3><p><img data-src="/uploads/in-post/go-dependency/indirect.png"></p>
<p>实际使用过程中，由于不是所有的库都是使用 go mod 进行版本控制，我们的 go.mod 中可能会有如上图的两个标记：</p>
<ol>
<li>// indirect<br>表示非本项目所直接依赖，但在本项目中指定该依赖项的版本，可能原因：</li>
</ol>
<ul>
<li>依赖项没有使用 go mod</li>
<li>不是所有依赖项都在 go.mod 中</li>
<li>手动为依赖的依赖指定较新的版本</li>
</ul>
<ol start="2">
<li>+incompatible<br>表示该依赖未使用 go mod 管理依赖</li>
</ol>
<ul>
<li>不影响使用，但该依赖的依赖的版本没有被显式指定</li>
<li>不再认为不同 major 版本号为不同项目</li>
</ul>
<h1 id="工程和依赖管理常见问题"><a href="#工程和依赖管理常见问题" class="headerlink" title="工程和依赖管理常见问题"></a>工程和依赖管理常见问题</h1><h2 id="case-1-执行-go-get-–u-后项目编译不通过"><a href="#case-1-执行-go-get-–u-后项目编译不通过" class="headerlink" title="case 1 执行 go get –u 后项目编译不通过"></a>case 1 执行 go get –u 后项目编译不通过</h2><p><img data-src="/uploads/in-post/go-dependency/case1.png"></p>
<h2 id="case-2-为什么一些工程不使用-go-mod？"><a href="#case-2-为什么一些工程不使用-go-mod？" class="headerlink" title="case 2 为什么一些工程不使用 go mod？"></a>case 2 为什么一些工程不使用 go mod？</h2><p><img data-src="/uploads/in-post/go-dependency/case2.png"></p>
<h2 id="case-3-部分项目不使用-go-mod-导致的复杂场景"><a href="#case-3-部分项目不使用-go-mod-导致的复杂场景" class="headerlink" title="case 3 部分项目不使用 go mod 导致的复杂场景"></a>case 3 部分项目不使用 go mod 导致的复杂场景</h2><p>最终参与编译的 X 是 v1 还是 v2？</p>
<p><img data-src="/uploads/in-post/go-dependency/case3.png"></p>
<h2 id="case-4-惨遭删-tag-branch-commit"><a href="#case-4-惨遭删-tag-branch-commit" class="headerlink" title="case 4 惨遭删 tag/branch/commit"></a>case 4 惨遭删 tag/branch/commit</h2><p><img data-src="/uploads/in-post/go-dependency/case4.png"></p>
<h2 id="case-5-循环依赖陷阱"><a href="#case-5-循环依赖陷阱" class="headerlink" title="case 5 循环依赖陷阱"></a>case 5 循环依赖陷阱</h2><p><img data-src="/uploads/in-post/go-dependency/case5.png"></p>
<p>循环依赖产生的原因是两个 package 之间不能互相 import，但两个不同工程的不同 package 之间可以互相 import</p>
<p>循环依赖一旦形成，内部所有依赖的所有版本都会一直保留，一旦其中一个进行了修改，就很容易出现问题</p>
<p><strong>经验：公共库之间应明确分工，避免大杂烩和循环依赖</strong></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 开发：单元测试与业务实践</title>
    <url>/2021/05/18/2021-05-18-golang-linter/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>云浩老师以具体的 Golang 代码实例讲起，清晰明了地讲解了 Golang 的代码规范，然后讲解了各类 linter 的优缺点，并给出了一些最佳实践，为我们写出更加规范和一致的代码提供了指导。</p>
<h1 id="Golang-代码规范"><a href="#Golang-代码规范" class="headerlink" title="Golang 代码规范"></a>Golang 代码规范</h1><h2 id="为什么我们需要代码规范"><a href="#为什么我们需要代码规范" class="headerlink" title="为什么我们需要代码规范"></a>为什么我们需要代码规范</h2><p>说到代码规范，其实就是不同语言的代码风格不同，为了便于理解和统一而形成的编码命名等的建议。每个语言的代码风格，大部分来自创始团队的共同”审美”，不同的语言规范甚至有完全相反的规定，但是语言风格和代码规范没有对错之分，他的作用是形成最大共识，减少沟通和理解的成本。</p>
<span id="more"></span>

<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ul>
<li>  只由小写字母组成。不包含大写字母和下划线等字符。</li>
<li>  简短并包含一定的上下文信息。例如 time、list、http 等。</li>
<li>  不能是含义模糊的常用名，或者与标准库同名。例如不能使用 util 或者 strings。</li>
<li>  包名能够作为路径的 base name，在一些必要的时候，需要把不同功能拆分为子包。例如应该使用 encoding/base64 而不是 encoding_base64 或者 encodingbase64。</li>
</ul>
<p>以下规则按照先后顺序尽量满足：</p>
<ul>
<li>  不使用常用变量名作为包名。例如使用 bufio 而不是 buf。</li>
<li>  使用单数而不是复数。例如使用 encoding 而不是 encodings。</li>
<li>  谨慎地使用缩写。例如使用 fmt 在不破坏上下文的情况下比 format 更加简短，以及一些需要用多个单词表达上下文的命名可以使用缩写，例如使用 strconv 而不是 stringconversion。</li>
</ul>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>Function 的命名应该遵循如下原则：</p>
<ul>
<li>  对于可导出的函数使用 MixedCaps，对于内部使用的函数使用 mixedCaps。</li>
<li>  函数名不携带包名的上下文信息。例如使用 http.Server 而不是 http.HTTPServer，因为包名和函数名总是成对出现的。</li>
<li>函数名尽量简短：<ul>
<li>  当名为 foo 的包某个函数返回类型 Foo 时，往往可以省略类型信息而不导致歧义。例如使用 time.Now() 以及 time.Parse()，两者返回的都是 time.Time 类型。</li>
</ul>
</li>
<li>  当名为 foo 的包某个函数返回类型 T 时（T 并不是 Foo），可以在函数名中加入类型信息。例如使用 time.ParseDuration() 返回的是 time.Duration 类型。</li>
<li>  当名为 foo 的包某个函数返回类型 Foo，且 Foo 是其所有方法的入口时，可以使用 New() 来命名而不导致歧义。例如使用 list.New() 返回的是* list.List 类型。</li>
</ul>
<h3 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h3><p>Receiver 的命名应该遵循如下原则：</p>
<ul>
<li>  不要使用面向对象编程中的常用名。例如不要使用 self、this、me 等。</li>
<li>  一般使用 1 到 2 个字母的缩写代表其原来的类型。例如类型为 Client，可以使用 c、cl 等。</li>
<li>  在每个此类型的方法中使用统一的缩写。例如在其中一个方法中使用了 c 代表了 Client，在其他的方法中也要使用 c 而不能使用诸如 cl 的命名。</li>
</ul>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>Interface 的命名应该遵循如下原则：</p>
<ul>
<li>  对于只有一个方法的 interface，通常将其命名为方法名加上 er。例如 Reader 和 Writer。</li>
<li>  interface 的方法不要占用一些惯用名，除非此方法具有同样的作用。例如 Read、Write、Flush、String、ServeHTTP。</li>
</ul>
<h3 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h3><p>Variable 的命名应该遵循如下原则：</p>
<ul>
<li>  对于可导出的变量使用 MixedCaps，对于内部使用的变量使用 mixedCaps。</li>
<li>  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby93aWtpL0NvZGVSZXZpZXdDb21tZW50cyNpbml0aWFsaXNtcw==">缩略词<i class="fa fa-external-link-alt"></i></span> 全大写，但当其位于变量开头且不需要导出时，使用全小写。例如使用 ServeHTTP 而不是 ServeHttp，以及使用 XMLHTTPRequest 或者 xmlHTTPRequest。</li>
<li>  简洁胜于冗长。例如在循环中，使用 i 代替 sliceIndex。</li>
<li>  变量距离其被使用的地方越远，则需要携带越多的上下文信息。例如全局变量在其名字中需要更多的上下文信息，使得在不同地方可以轻易辨认出其含义。</li>
</ul>
<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><h4 id="错误变量的命名和位置"><a href="#错误变量的命名和位置" class="headerlink" title="错误变量的命名和位置"></a>错误变量的命名和位置</h4><p>当某种错误多次出现或者需要在其他地方捕获时，我们需要显式地申明这个变量。错误变量名统一以 err 开头，如果需要暴露给外部使用，则以 Err 开头。</p>
<ul>
<li>  如果某文件仅存在一个错误，将错误变量放入该代码块开头。</li>
<li>  如果某文件存在多个错误，当文件代码量较小的时候，放在文件的开头位置；当文件代码量较大时，不同种类的错误放在相应的代码块开头。</li>
<li>  多个错误变量的申明应该与普通变量分隔开。</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> errProofFailed = errors.<span class="keyword">New</span>(<span class="string">&quot;invalid transparency proof&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="错误的内容"><a href="#错误的内容" class="headerlink" title="错误的内容"></a>错误的内容</h4><p>错误内容不应该包含大写字母（驼峰式变量或者缩写的情况例外），不要使用标点符号（例如。）作为结尾。</p>
<ul>
<li>  对于表意缺少足够上下文的错误，可以考虑在内容的前方加入 package 的名字作为标注。随后再加入一个冒号和一个空格作为与内容的分割。<strong>如果某个 package 中的某错误加入 package 名字标注，需要对 package 中的每个 error 加上此标注来统一格式</strong>。</li>
<li>  不要使用中文等非 ascii 字符来作为内容，也不要使用拼音。<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   errNotEnough = errors.<span class="keyword">New</span>(<span class="string">&quot;gif: not enough image data&quot;</span>)</span><br><span class="line">   errTooMuch   = errors.<span class="keyword">New</span>(<span class="string">&quot;gif: too much image data&quot;</span>)</span><br><span class="line">   errBadPixel  = errors.<span class="keyword">New</span>(<span class="string">&quot;gif: invalid pixel value&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="自定义错误类型"><a href="#自定义错误类型" class="headerlink" title="自定义错误类型"></a>自定义错误类型</h4><p>一般当错误比较复杂且有着共同的上下文信息时，可以考虑引入自定义错误，此时自定义错误需要放在 error.go 文件中。自定义错误类型的命名应该以 Error 结尾。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// PathError records an error and the operation and file path that caused it.</span></span><br><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;</span><br><span class="line">   Op   <span class="type">string</span></span><br><span class="line">   Path <span class="type">string</span></span><br><span class="line">   Err  <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PathError)</span></span> Error() <span class="type">string</span> &#123; <span class="keyword">return</span> e.Op + <span class="string">&quot; &quot;</span> + e.Path + <span class="string">&quot;: &quot;</span> + e.Err.Error() &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PathError)</span></span> Unwrap() <span class="type">error</span> &#123; <span class="keyword">return</span> e.Err &#125;</span><br></pre></td></tr></table></figure>

<h3 id="comments"><a href="#comments" class="headerlink" title="comments"></a>comments</h3><p>注释建议使用英文撰写。</p>
<h4 id="package-1"><a href="#package-1" class="headerlink" title="package"></a>package</h4><p>每个 package 都需要有包注释，用于介绍包的作用和使用方法等信息。</p>
<ul>
<li>  开头为 Package foo 。</li>
<li>  注释需要位于文件顶部，且只在一个文件中加入，内容较少的可以放在与包名同名的文件中，内容较多的放在 doc.go 文件中。<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package log implements a simple logging package. It defines a type, Logger,</span></span><br><span class="line"><span class="comment">// with methods for formatting output. It also has a predefined &#x27;standard&#x27;</span></span><br><span class="line"><span class="comment">// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and</span></span><br><span class="line"><span class="comment">// Panic[f|ln], which are easier to use than creating a Logger manually.</span></span><br><span class="line"><span class="comment">// That logger writes to standard error and prints the date and time</span></span><br><span class="line"><span class="comment">// of each logged message.  package log</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="exported-names"><a href="#exported-names" class="headerlink" title="exported names"></a>exported names</h4><p>对于所有 exported names 都需要加入注释，包括变量、常量、自定义类型、函数（包括结构体中导出的函数）等。<strong>注释以其名字作为前缀</strong>，特殊地，类型的注释允许以冠词 (The、A、An) 加上其名字为前缀。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Flags returns the output flags for the standard logger.</span></span><br><span class="line"><span class="comment">// The flag bits are Ldate, Ltime, and so on.</span></span><br><span class="line"><span class="function">func <span class="title">Flags</span>() <span class="built_in">int</span></span> &#123;   <span class="keyword">return</span> std.Flags()   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码段注释"><a href="#代码段注释" class="headerlink" title="代码段注释"></a>代码段注释</h4><p>如果注释位于单独一行，则需要以大写开头（缩略词或变量名除外）并以。结尾。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> l.flag&amp;(Lshortfile|Llongfile) != <span class="number">0</span> &#123;</span><br><span class="line"> // <span class="keyword">Release</span> <span class="keyword">lock</span> <span class="keyword">while</span> getting caller <span class="keyword">info</span> - it<span class="string">&#x27;s expensive.</span></span><br><span class="line"><span class="string"> l.mu.Lock()</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> l.mu.Unlock()</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果位于语句后方，则不要以大写开头，且结尾不需要加入标点符号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Ldate = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// the date in the local time zone: 2009/01/23</span></span><br></pre></td></tr></table></figure>
<h1 id="Linter-实践"><a href="#Linter-实践" class="headerlink" title="Linter 实践"></a>Linter 实践</h1><h2 id="linter-工具"><a href="#linter-工具" class="headerlink" title="linter 工具"></a>linter 工具</h2><h3 id="检查工具"><a href="#检查工具" class="headerlink" title="检查工具"></a>检查工具</h3><ul>
<li>golint:Go 团队提供的风格检查工具，用于检查<strong>代码风格</strong>的错误部分。</li>
<li>go vet:Go 语言 SDK 的 go 执行程序携带的工具，用于<strong>检查程序正确性</strong>。例如 unsafe.Pointer 的错误使用、unreachable code 等。</li>
<li>gofmt:Go 语言 SDK 自带的 <strong>format 工具</strong>, 用于整理 Go 代码格式。例如整理缩进、给结尾加空等。</li>
</ul>
<h3 id="golint"><a href="#golint" class="headerlink" title="golint"></a>golint</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9saW50">https://github.com/golang/lint<i class="fa fa-external-link-alt"></i></span></p>
<p>常见的检查点：comment s 风格、变量风格、 error string 等</p>
<p>问题一：年久失修，存在一些影响使用的问题，例如对于 error string 的处理，不支持以当前环境变量开头。</p>
<p>问题二：golint 的结果并不ー定正确，并且无法解決 false positives 问题</p>
<h3 id="go-vet"><a href="#go-vet" class="headerlink" title="go vet"></a>go vet</h3><p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL2NtZC92ZXQv">https://golang.org/cmd/vet/<i class="fa fa-external-link-alt"></i></span></p>
<p>常见的正确性检查点：</p>
<ol>
<li>检查 HTTP Body 是否被正确 Closed</li>
<li>原子操作的误用</li>
<li>检查 unsafe.Pointer 的正确使用</li>
</ol>
<h3 id="gofmt"><a href="#gofmt" class="headerlink" title="gofmt"></a>gofmt</h3><p><span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9jbWQvZ29mbXQv">https://golang.org/pkg/cmd/gofmt/<i class="fa fa-external-link-alt"></i></span></p>
<p>Go 团队提供的用于检查和修复代码格式错误的工具。</p>
<h2 id="linter-实践"><a href="#linter-实践" class="headerlink" title="linter 实践"></a>linter 实践</h2><h3 id="只使用官方工具"><a href="#只使用官方工具" class="headerlink" title="只使用官方工具"></a>只使用官方工具</h3><p>只使用官方工具的流程</p>
<ol>
<li>开发者使用 gofmt 格式化代码</li>
<li>开发者使用 golint 检查风格问题并修复</li>
<li>开发者使用 go vet 检查可疑的正确性问题</li>
<li>CICD 使用 gofmt、 golint、 go vet 检查代码</li>
</ol>
<p>存在的问题</p>
<ol>
<li>这些 linters 提示的问题不ー定正确，存在 false positives 的问题</li>
<li>不同的功能分散在多个工具，不够便捷。没有统一的配置。</li>
<li>gofmt 和 go vet 在不同 GO SDK 的内容不同，容易造成不一致</li>
</ol>
<h3 id="golangci-lint"><a href="#golangci-lint" class="headerlink" title="golangci-lint"></a>golangci-lint</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZ2NpL2dvbGFuZ2NpLWxpbnQ=">https://github.com/golangci/golangci-lint<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>解决了 false positives 问题，使用 //nolint 等方式来屏蔽错误提示</li>
<li>统一的配置文件，解决了不同工具的配置文件问题</li>
<li>整个过程只解析一遍 AST，也可以复用文件缓存，大大加快了速度</li>
<li>可插拔 linter 配置自由选配 linters，自身携带了大部分常用 linters</li>
</ol>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="项目启动阶段"><a href="#项目启动阶段" class="headerlink" title="项目启动阶段"></a>项目启动阶段</h3><ol>
<li>下载 golangci-lint</li>
<li>将部门共享的配置下载到本地或者使用 golangci-lint bconfig 下载默认配置<h3 id="正式开发阶段"><a href="#正式开发阶段" class="headerlink" title="正式开发阶段"></a>正式开发阶段</h3></li>
<li>项目开发时，尽量解决 IDE 中所有带有波浪线或者变色的代码段</li>
<li>每次编辑完一个文件，将文件 format 一次</li>
<li>提交 commit 前，运行 golangci-lint，解決相关的问题</li>
<li>解決所有 golangci-lint 问题后将代码 push 到仓库分支<h3 id="Merge-Request-阶段"><a href="#Merge-Request-阶段" class="headerlink" title="Merge Request 阶段"></a>Merge Request 阶段</h3></li>
<li>在代码仓库阶段配置好 golangci-lint</li>
<li>解决所有问题后，再请求 review</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 性能问题排查定位</title>
    <url>/2021/05/21/2021-05-21-golang-pprof/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>梁潇老师从一个使用 pprof 定位问题的实例 step by step 的向我们讲述了如何利用 pprof 工具的不同命令排查不同类型的问题，然后深度剖析了 pprof 采样的流程和原理。</p>
<h1 id="pprof-实战"><a href="#pprof-实战" class="headerlink" title="pprof 实战"></a>pprof 实战</h1><h2 id="pprof-能做什么"><a href="#pprof-能做什么" class="headerlink" title="pprof 能做什么"></a>pprof 能做什么</h2><p><img data-src="/uploads/in-post/go-pprof/pprof.png"></p>
<p>通过 Golang 提供的 pprof 工具，我们可以很轻松的对程序的 CPU，Heap，Goroutine 等进行采样，并且 pprof 工具会帮我们分析好采样数据并且以网页或可视化的方式让我们可以很直观的观察采样结果。</p>
<span id="more"></span>

<h2 id="pprof-排查"><a href="#pprof-排查" class="headerlink" title="pprof 排查"></a>pprof 排查</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dvbGZvZ3JlL2dvLXBwcm9mLXByYWN0aWNl">https://github.com/wolfogre/go-pprof-practice<i class="fa fa-external-link-alt"></i></span> 我们可以使用这个代码仓库来探索 pprof 的使用</p>
<h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// 会自动注册 handler 到 http server，方便通过 http 接口获取程序运行采样报告</span></span><br><span class="line">    _ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>) <span class="comment">// 限制 CPU 使用数，避免过载</span></span><br><span class="line">    runtime.SetMutexProfileFraction(<span class="number">1</span>) <span class="comment">// 开启对锁调用的跟踪</span></span><br><span class="line">    runtime.SetBlockProfileRate(<span class="number">1</span>) <span class="comment">// 开启对阻塞操作的跟踪</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 启动一个 http server</span></span><br><span class="line">        <span class="comment">// 注意 pprof 相关的 handler 已经自动注册过了</span></span><br><span class="line">        <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:6060&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span>&#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们就可以在浏览器中输入 <code>http://localhost:6060/debug/pprof/</code> 查看代码运行情况了，效果如下：</p>
<p><img data-src="/uploads/in-post/go-pprof/pprof-debug.png"></p>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> tool pprof http://localhos<span class="variable">t:6060</span>/<span class="keyword">debug</span>/pprof/<span class="keyword">profile</span>?seconds=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>可以获得一个采样文件：<br><img data-src="/uploads/in-post/go-pprof/cpu-sample.png"></p>
<h4 id="top-N"><a href="#top-N" class="headerlink" title="top N"></a>top N</h4><p>输入 <code>top 10</code>，可以看到消耗资源前十的方法：<br><img data-src="/uploads/in-post/go-pprof/cpu-top.png"></p>
<p>flat 表示样本中当前函数占用的 CPU 时间，cum 表示当前函数以及当前函数调用其他函数的时间，而 cum - flat 则为当前函数调用其他函数耗费的时间，所以：</p>
<ol>
<li>flat == cum: 表示函数中没有调用其他函数</li>
<li>flat == 0: 表示函数中只有其他函数的调用</li>
</ol>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>输入 <code>list regx</code>，可以根据输入的正则表达式查找代码行</p>
<p><img data-src="/uploads/in-post/go-pprof/cpu-list.png"></p>
<p>可以很明显的看出来哪行代码可能有问题</p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>输入 <code>web</code> 可以生成调用关系图。</p>
<p><img data-src="/uploads/in-post/go-pprof/cpu-web.png"></p>
<h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><h4 id="采样-1"><a href="#采样-1" class="headerlink" title="采样"></a>采样</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> tool pprof http://localhos<span class="variable">t:6060</span>/<span class="keyword">debug</span>/pprof/heap?seconds=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>可以获得一个采样文件：</p>
<p><img data-src="/uploads/in-post/go-pprof/heap-sample.png"></p>
<h4 id="top-N-1"><a href="#top-N-1" class="headerlink" title="top N"></a>top N</h4><p>输入 <code>top 10</code>，可以看到消耗资源前十的方法，不足 10 的话则全部显示：<br><img data-src="/uploads/in-post/go-pprof/heap-top.png"></p>
<h4 id="可视化视图"><a href="#可视化视图" class="headerlink" title="可视化视图"></a>可视化视图</h4><p>使用以下命令可以开启可视化视图：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">go tool pprof -http=:<span class="number">8080</span> /yourPath/pprof/pprof<span class="selector-class">.alloc_objects</span><span class="selector-class">.alloc_space</span><span class="selector-class">.inuse_objects</span><span class="selector-class">.inuse_space</span>.<span class="number">001</span><span class="selector-class">.pb</span>.gz</span><br></pre></td></tr></table></figure>

<p><img data-src="/uploads/in-post/go-pprof/heap-web.png"></p>
<p>在 source 页面我们可以清楚的看到代码的资源消耗：</p>
<p><img data-src="/uploads/in-post/go-pprof/heap-source.png"></p>
<p>当然 top 之类的页面也可以在这里看到：</p>
<p><img data-src="/uploads/in-post/go-pprof/ui-top.png"></p>
<p><img data-src="/uploads/in-post/go-pprof/ui-alloc.png"></p>
<ul>
<li>alloc_objects: 程序累计申请的对象数</li>
<li>alloc_space: 程序累计申请的内存大小</li>
<li>inuse_objects: 当前持有的对象数</li>
<li>inuse_space: 当前持有的内存大小</li>
</ul>
<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><h4 id="采样-2"><a href="#采样-2" class="headerlink" title="采样"></a>采样</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> tool pprof http://localhos<span class="variable">t:6060</span>/<span class="keyword">debug</span>/pprof/goroutine?seconds=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>可以获得一个采样文件：</p>
<p><img data-src="/uploads/in-post/go-pprof/goroutine-sample.png"></p>
<h4 id="火焰图"><a href="#火焰图" class="headerlink" title="火焰图"></a>火焰图</h4><p><img data-src="/uploads/in-post/go-pprof/goroutine-flame.png"></p>
<p>通过火焰图我们可以看出来是 Drink 函数中调用的 time.sleep 占用资源最多，用 source 视图查看：</p>
<p><img data-src="/uploads/in-post/go-pprof/goroutine-source.png"></p>
<p>注释掉问题代码，goroutine 显著降低</p>
<h3 id="Mutex、Block"><a href="#Mutex、Block" class="headerlink" title="Mutex、Block"></a>Mutex、Block</h3><p>也是类似的排查方式</p>
<h1 id="pprof-指标采样的流程和原理"><a href="#pprof-指标采样的流程和原理" class="headerlink" title="pprof 指标采样的流程和原理"></a>pprof 指标采样的流程和原理</h1><h2 id="CPU-采样"><a href="#CPU-采样" class="headerlink" title="CPU 采样"></a>CPU 采样</h2><ul>
<li>采样对象：函数调用和它们的占用时间</li>
<li>采样率：100 次/秒，固定值</li>
<li>采样时间：从手动启动到手动结束</li>
</ul>
<p><img data-src="/uploads/in-post/go-pprof/cpu-get-sample.png"></p>
<p>采样过程：</p>
<ul>
<li>操作系统：每 10ms 向进程发送一次 SIGPROF 信号</li>
<li>进程：每次接收到 SIGPROF 会记录调用栈</li>
<li>写缓冲：每 100ms 读取一次已经记录的调用栈并写入输出流</li>
</ul>
<p><img data-src="/uploads/in-post/go-pprof/sigprof.png"></p>
<h2 id="Goroutine-amp-ThreadCreate-采样"><a href="#Goroutine-amp-ThreadCreate-采样" class="headerlink" title="Goroutine &amp; ThreadCreate 采样"></a>Goroutine &amp; ThreadCreate 采样</h2><ol>
<li><p>Goroutine<br>记录所有用户发起且在运行中的 goroutine（即入口非 runtime 开头的）和 runtime.main 的调用栈信息</p>
</li>
<li><p>ThreadCreate<br>记录程序创建的所有系统线程的信息<br><img data-src="/uploads/in-post/go-pprof/goroutine-get-sample.png"></p>
</li>
</ol>
<h2 id="Heap-采样"><a href="#Heap-采样" class="headerlink" title="Heap 采样"></a>Heap 采样</h2><ul>
<li>采样程序通过内存分配器在<strong>堆上</strong>分配和释放的内存，记录分配/释放的<strong>大小和数量</strong></li>
<li>采样率：每分配 512KB 记录一次，可在运行开头修改，设置为 1 表示每次分配均记录</li>
<li>采样时间：从程序运行开始到采样时</li>
<li>采样指标：alloc_space, alloc_objects, inuse_space, inuse_objects</li>
<li>计算方式：inuse = alloc - free</li>
</ul>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvX0xvdm5JcUpZQXVEcFRtMlFtVWdyQQ==">使用 pprof 和 go-torch 排查 golang 的性能问题<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLndvbGZvZ3JlLmNvbS9wb3N0cy9nby1wcG9mLXByYWN0aWNlLw==">golang pprof 实战<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 事务隔离</title>
    <url>/2021/06/05/2021-06-05-mysql-transaction-isolationn/</url>
    <content><![CDATA[<p>提到事务，我们一定都不陌生，最常用的例子就是银行转账，你的银行卡有 1000 元，要给小明转 1000 元，转账过程具体到程序⾥会有⼀系列的操作，⽐如查询余额、做加减法、更新余额等，这些操作必须保证是⼀体的，不然等程序查完之后，还没做减法之前，你这 1000 块钱，完全可以借着这个时间差再查⼀次，然后再给另外⼀个朋友转账，这种情况对于银行来说是不可接受的，这个时候就需要用到<code>事务</code>这个概念了。</p>
<p>在维基百科中，对事务的定义是：事务是数据库管理系统 (DBMS) 执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。简单来说，事务就是要保证⼀组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务⽀持是在引擎层实现的。所以并不是所有引擎都支持事务的，MyISAM 引擎被取代的重要原因就是他不支持事务。</p>
<span id="more"></span>

<h1 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h1><p>事务包含四大特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）(ACID)。</p>
<ol>
<li><strong>原子性（Atomicity）</strong><br>原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况。以转账场景为例，一个账户的余额减少，另一个账户的余额增加，这两个操作一定是同时成功或者同时失败的。</li>
<li><strong>一致性（Consistency）</strong><br>一致性是指数据库的完整性约束没有被破坏，在事务执行前后都是合法的数据状态。这里的一致可以表示数据库自身的约束没有被破坏，比如某些字段的唯一性约束、字段长度约束等等；还可以表示各种实际场景下的业务约束，比如上面转账操作，一个账户减少的金额和另一个账户增加的金额一定是一样的。</li>
<li><strong>隔离性（Isolation）</strong><br>隔离性指的是多个事务彼此之间是完全隔离、互不干扰的。隔离性的最终目的也是为了保证一致性。</li>
<li><strong>持久性（Durability）</strong><br>持久性是指只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态。</li>
</ol>
<h1 id="事务的状态"><a href="#事务的状态" class="headerlink" title="事务的状态"></a>事务的状态</h1><p>根据事务所处的不同阶段，事务大致可以分为以下 5 个状态：</p>
<ol>
<li><strong>活动的（active）</strong><br>当事务对应的数据库操作正在执行过程中，则该事务处于活动状态。</li>
<li><strong>部分提交的（partially committed）</strong><br>当事务中的最后一个操作执行完成，但还未将变更刷新到磁盘时，则该事务处于部分提交状态。</li>
<li><strong>失败的（failed）</strong><br>当事务处于活动或者部分提交状态时，由于某些错误导致事务无法继续执行，则事务处于失败状态。</li>
<li><strong>中止的（aborted）</strong><br>当事务处于失败状态，且回滚操作执行完毕，数据恢复到事务执行之前的状态时，则该事务处于中止状态。</li>
<li><strong>提交的（committed）</strong><br>当事务处于部分提交状态，并且将修改过的数据都同步到磁盘之后，此时该事务处于提交状态。</li>
</ol>
<p>这几种状态的状态转移如下：<br><img data-src="/uploads/in-post/mysql/transaction-status.png"></p>
<h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p>事务的四大特性之一是必须具有隔离性。实现隔离性最简单的方式就是不允许事务并发，每个事务都排队执行，但是这样的性能会很差。所以为了兼顾事务的隔离性和性能，事务支持不同的隔离级别。</p>
<p>为了方便表述后续的内容，我们先建一张示例表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(c <span class="type">int</span>) engine<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T(c) <span class="keyword">values</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="事务并发执行遇到的问题"><a href="#事务并发执行遇到的问题" class="headerlink" title="事务并发执行遇到的问题"></a>事务并发执行遇到的问题</h2><p>在事务并发执行时，如果不进行任何控制，可能会出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读 （phantom read）的问题</p>
<h3 id="脏读（Dirty-Read）"><a href="#脏读（Dirty-Read）" class="headerlink" title="脏读（Dirty Read）"></a>脏读（Dirty Read）</h3><p><strong>脏读是指一个事务读到了其它事务未提交的数据。</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">事务 A</th>
<th align="center">事务 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">①</td>
<td align="center">启动事务</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">②</td>
<td align="center"></td>
<td align="center">启动事务</td>
</tr>
<tr>
<td align="center">③</td>
<td align="center"></td>
<td align="center">查询得到值 1</td>
</tr>
<tr>
<td align="center">④</td>
<td align="center"></td>
<td align="center">将 1 改为 2</td>
</tr>
<tr>
<td align="center">⑤</td>
<td align="center">查询得到值 V1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑥</td>
<td align="center"></td>
<td align="center">提交事务 B</td>
</tr>
<tr>
<td align="center">⑦</td>
<td align="center">提交事务 A</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>如上表，事务 A 和事务 B 分别开启了一个事务，事务 B 中的事务先将 c 列为 1 的记录更新为 2，然后事务 A 中的事务再去查询 c 列 的记录，读到列 c 的 V1 值为 2，这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了，这种现象就称之为<code>脏读</code>。</p>
<h3 id="不可重复读（non-repeatable-read）"><a href="#不可重复读（non-repeatable-read）" class="headerlink" title="不可重复读（non-repeatable read）"></a>不可重复读（non-repeatable read）</h3><p><strong>不可重复读指的是在一个事务执行过程中，读取到其它事务已提交的数据，导致两次读取的结果不一致。</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">事务 A</th>
<th align="center">事务 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">①</td>
<td align="center">启动事务</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">②</td>
<td align="center"></td>
<td align="center">启动事务</td>
</tr>
<tr>
<td align="center">③</td>
<td align="center"></td>
<td align="center">查询得到值 1</td>
</tr>
<tr>
<td align="center">④</td>
<td align="center"></td>
<td align="center">将 1 改为 2</td>
</tr>
<tr>
<td align="center">⑤</td>
<td align="center">查询得到值 V1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑥</td>
<td align="center"></td>
<td align="center">提交事务 B</td>
</tr>
<tr>
<td align="center">⑦</td>
<td align="center">查询得到值 V2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑧</td>
<td align="center">提交事务 A</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>如上表，事务 A 和事务 B 分别开启了一个事务，事务 B 中的事务先将 c 列为 1 的记录更新为 2，在事务 B 提交之前，事务 A 读取到的值 V1 是 1，事务 B 提交后，事务 A 读取到的值 V2 是 2。不管事务 A 有没有提交，事务 B 的更新在提交后就能被 A 看到，这种现象就称之为<code>不可重复读</code>。</p>
<h3 id="幻读-（phantom-read）"><a href="#幻读-（phantom-read）" class="headerlink" title="幻读 （phantom read）"></a>幻读 （phantom read）</h3><p><strong>幻读是指的是在一个事务执行过程中，读取到了其他事务新插入数据，导致两次读取的结果不一致。</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">事务 A</th>
<th align="center">事务 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">①</td>
<td align="center">启动事务</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">②</td>
<td align="center">查询 c &lt; 10</td>
<td align="center">启动事务</td>
</tr>
<tr>
<td align="center">③</td>
<td align="center"></td>
<td align="center">插入新行 c=2</td>
</tr>
<tr>
<td align="center">④</td>
<td align="center"></td>
<td align="center">提交事务 B</td>
</tr>
<tr>
<td align="center">⑤</td>
<td align="center">查询 c &lt; 10</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑥</td>
<td align="center">提交事务 A</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>如上表，事务 A 和事务 B 分别开启了一个事务，事务 A 根据条件 c&lt;10 进行查询，得到记录 c=1，事务 B 中的事务 插入一条 c=2 的新记录，提交事务，事务 A 再次根据条件 c&lt;10 进行查询，得到记录 c=1 和 c=2，这种现象也被称之为<code>幻读</code>。</p>
<h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h2><p>在谈隔离级别之前，⾸先要知道，隔离级别越高，一致性越强，但是效率就会越低。为了解决上面提到的读一致性问题，设立了四种隔离级别。</p>
<p><code>SQL</code>标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read） 和串⾏化（serializable ）。</p>
<ul>
<li>读未提交，指⼀个事务还没提交时，它做的变更就能被别的事务看到。</li>
<li>读提交，指⼀个事务提交之后，它做的变更才会被其他事务看到。</li>
<li>可重复读，指⼀个事务执⾏过程中看到的数据，总是跟这个事务在启动时看到的数据是⼀致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可⻅的。</li>
<li>串⾏化，顾名思义是对于同⼀⾏记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前⼀个事务执⾏完成，才能继续执⾏，整个执行流程是串行的。</li>
</ul>
<p>还是以之前的表为例：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">事务 A</th>
<th align="center">事务 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">①</td>
<td align="center">启动事务</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">②</td>
<td align="center"></td>
<td align="center">启动事务</td>
</tr>
<tr>
<td align="center">③</td>
<td align="center"></td>
<td align="center">查询得到值 1</td>
</tr>
<tr>
<td align="center">④</td>
<td align="center"></td>
<td align="center">将 1 改为 2</td>
</tr>
<tr>
<td align="center">⑤</td>
<td align="center">查询得到值 V1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑥</td>
<td align="center"></td>
<td align="center">提交事务 B</td>
</tr>
<tr>
<td align="center">⑦</td>
<td align="center">查询得到值 V2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑧</td>
<td align="center">提交事务 A</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">⑨</td>
<td align="center">查询得到值 V3</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>不同的隔离级别下，事务 A 会有不同的返回结果，也就是表中 V1、V2、V3 的返回值会不同。</p>
<ul>
<li>若隔离级别是“读未提交”，则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都 是 2。</li>
<li>若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。</li>
<li>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执⾏期间看到的数据前 后必须是⼀致的。</li>
<li>若隔离级别是“串⾏化”，则在事务 B 执⾏“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执⾏。所以从 A 的⻆度看， V1、V2 值是 1，V3 的值是 2。</li>
</ul>
<p>在实现上，数据库⾥⾯会创建⼀个<code>视图</code>，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在<code>事务启动</code>时创建的，整个事务存在期间都⽤这个视图。在“读提交”隔离级别下，这个视图是在<code>每个 SQL 语句开始执⾏</code>的时候创建的。 这⾥需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；⽽“串⾏化”隔离级别下直接⽤加锁的⽅式来避免并⾏访问。</p>
<p>各个隔离级别下可能出现的读一致性问题如下：</p>
<table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">未提交读（READ UNCOMMITTED）</td>
<td align="center">可能</td>
<td align="center">可能</td>
<td align="center">可能</td>
</tr>
<tr>
<td align="center">已提交读（READ COMMITTED）</td>
<td align="center">不可能</td>
<td align="center">可能</td>
<td align="center">可能</td>
</tr>
<tr>
<td align="center">可重复读（REPEATABLE READ）</td>
<td align="center">不可能</td>
<td align="center">不可能</td>
<td align="center">可能（对 InnoDB 不可能）</td>
</tr>
<tr>
<td align="center">串行化（SERIALIZABLE）</td>
<td align="center">不可能</td>
<td align="center">不可能</td>
<td align="center">不可能</td>
</tr>
</tbody></table>
<h1 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h1><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的，这里我们重点关注“可重复读”。</p>
<p>从上一篇我们知道在 MySQL 中，每条记录在更新的时候都会同时记录⼀条回滚操作 (undo log)。记录上的最新值，通过回滚操作，都可以得到前⼀个状态的值。</p>
<p>假设⼀个值从 1 被按顺序改成了 2、3、4，在回滚⽇志⾥⾯就会有类似下⾯的记录。<br><img data-src="/uploads/in-post/mysql/undo-log.png"></p>
<p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C⾥⾯， 这⼀个记录的值分别是 1、2、4，同⼀条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执⾏图中所有的回滚操作得到。</p>
<p>并且，即使现在有另外⼀个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。</p>
<p>对于 undo log 来说，当系统⾥没有⽐这个 undo log 更早的 read-view 的时候 undo log 就会被删除。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本篇中，我们了解了什么是事务，事务的四大特性 (ACID)，事务的状态和事务的隔离级别及其实现。</p>
<p>提几个问题检验一下阅读效果：</p>
<ol>
<li>事务的概念是什么，有哪些特性？</li>
<li>MySQL 事务的状态有哪些，他们直接如何状态转移？</li>
<li>MySQL 事务并发时可能遇到哪些问题？请举例说明</li>
<li>MySQL 的事务隔离级别都有哪些？请举例说明</li>
<li>读已提交，可重复读是如何构建视图的？</li>
<li>事务隔离是如何实现的？</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>一条 SQL 语句是如何执行的？</title>
    <url>/2021/06/04/2021-06-04-mysql-execution/</url>
    <content><![CDATA[<p>我们平时经常使用 MySQL，那么一条 MySQL 的语句从输入到返回结果，到底经历了哪些过程呢？下面我们一起来了解一下</p>
<h1 id="MySQL-逻辑架构"><a href="#MySQL-逻辑架构" class="headerlink" title="MySQL 逻辑架构"></a>MySQL 逻辑架构</h1><p>首先，我们一起来看一下 MySQL 的逻辑架构：<br><img data-src="/uploads/in-post/mysql/logic-structure.png"></p>
<p>我们可以看出，MySQL 可以分为 Server 层和存储引擎层两大模块。</p>
<p>Server 层包括连接器、查询缓存、分析器、优化器、执⾏器等，MySQL 的⼤多数核⼼服务功能，所有内置函数，以及跨存储引擎的功能都在这⼀层实现。</p>
<p>存储引擎层负责数据的读写。其架构模式是插件式的，⽀持 InnoDB、MyISAM、Memory 等多个存储引擎。我们最常⽤的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。可以使用 <code>engine=引擎名</code> 的方式来指定使用的引擎。</p>
<span id="more"></span>

<h1 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h1><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><p>首先我们需要通过连接器连接上数据库，连接器负责跟客户端建⽴连接、获取权限、维持和管理连接，其命令如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -h<span class="variable">$ip</span> -P<span class="variable">$port</span> -u<span class="variable">$user</span> -p</span><br></pre></td></tr></table></figure>

<p>输入密码完成连接之后，在本次连接中的权限逻辑判断都会<strong>依赖此时读到的权限</strong> (⼀个⽤户成功建⽴连接后，即使⽤管理员账号对这个⽤户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使⽤新的权限设置）</p>
<p>客户端如果长时间没有运行指令，连接器会自动断开，自动断开时间由 <code>wait_timeout</code> 参数控制，默认 8 小时。</p>
<p>建立连接比较耗时，所以通常会使用长连接，但是如果长时间不断开连接的话，由于 MySQL 执行过程中的内存是管理在连接中的，只有连接断开时才会释放，所以长时间积累长连接的话，可能会导致 OOM，所以一般我们需要定期断开长连接，或执行 <code>mysql_reset_connection</code> 来初始化连接资源 (5.7 之后）。</p>
<h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>建立连接之后，就可以开始执行语句了，以如下查询语句为例：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> T <span class="keyword">where</span> ID=<span class="number">10</span>；</span><br></pre></td></tr></table></figure>

<p>MySQL 获取到此命令后，会先去查询缓存，看这条语句是否执行过，如果是则直接返回结果。但是一般我们不要开启查询缓存，因为只要有一个对表的更新，这个表上的所有查询缓存都会清空，所以查询缓存的命中率很低，并且 MySQL 8.0 之后的版本移除了这个功能，说明他们确实也觉得这个功能没有必要。</p>
<h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>如果没有命中缓存，就要开始解析 SQL 语句了。</p>
<p>首先，分析器会做<code>词法分析</code>，把输入的字符串解析成一个一个有意义的关键字，然后对整个语句做<code>语法分析</code>，根据语法规则对词法分析的结果进行校验，如果语句不对，就会抛出<code>You hanve an error in your SQL syntax</code>的错误。</p>
<p>分析器处理语法和解析查询之后会生成一棵解析树，进⼀步检查解析树的合法性。⽐如：数据表和数据列是否存在，别名是否有歧义等。如果通过则⽣成新的解析树，再提交给优化器。</p>
<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>优化器主要是将 SQL 经过语法解析/词法解析后得到的语法树，通过 MySQL 的数据字典和统计信息的内容，经过一系列运算，从而得出一个执行计划树的构成。比如在表⾥⾯有多个索引的时候，决定使⽤哪个索引；或者在⼀个语句有多表关联（join）的时候，决定各个表的连接顺序等。</p>
<p>优化器的输入是一棵语法树，输出是一棵执行树（也称为执行计划）。</p>
<h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>开始执⾏的时候，要先判断⼀下你对这个表 T 有没有执⾏查询的权限，如果没有，就会返回没有权限的错误；如果有权限，就打开表继续执⾏。打开表的时候，执⾏器就会根据表的引擎定义，去使⽤这个引擎提供的接⼝。</p>
<p>其执行过程如下：</p>
<ol>
<li>调⽤InnoDB 引擎接⼝取这个表的第⼀⾏（如果有索引则取满足条件的第一行），判断 ID 值是不是 10，如果不是则跳过，如果是则将这⾏存在结果集中；</li>
<li>调⽤引擎接⼝取“下⼀⾏”，重复相同的判断逻辑，直到取到这个表的最后⼀⾏。</li>
<li>执⾏器将上述遍历过程中所有满⾜条件的⾏组成的记录集作为结果集返回给客户端。</li>
</ol>
<h1 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h1><p>以下面这条更新语句为例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; update T <span class="built_in">set</span> <span class="attribute">c</span>=c+1 where <span class="attribute">ID</span>=2;</span><br></pre></td></tr></table></figure>

<p>我们要更新一个字段，一定需要先查出来这个字段，所以查询的流程一定也会走一遍，然后还会涉及三个重要的日志文件：<code>Undo Log（回滚日志），Redo Log（重做日志），和 Binlog（归档日志）</code></p>
<h2 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h2><p>undo log 主要记录了数据的逻辑变化，比如一条修改 +3 的逻辑语句，undo log 会记录对应一条 -3 的逻辑日记，一条插入语句则会记录一条删除语句，这样发生错误时，根据执行 undo log 就可以回滚到事务之前的数据状态。</p>
<p>undo log 就像你刚刚在 Git 中 Commit 了一下，然后再做一个较为复杂的改动，但是改着改着你的心态崩了，不想要刚刚的改动了，于是直接 git reset –hard $lastCommitId 回到了上一个版本。</p>
<h2 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h2><p>redo log 是 InnoDB 独有的日志，包括两部分：一个是内存中的日志缓冲 (redo log buffer)，另一个是磁盘上的日志文件 (redo log file)。mysql 每执行一条 DML 语句，先将记录写入 redo log buffer，后续某个时间点再一次性将多个操作记录写到 redo log file。这种先写日志，再写磁盘的技术就是 MySQL 里经常说到的 WAL(Write-Ahead Logging) 技术。</p>
<p>InnoDB 的 redo log 是固定⼤⼩的，⽐如可以配置为⼀组 4 个⽂件，每个⽂件的⼤⼩是 1GB，那么总共就可以记录 4GB 的操作。实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志，如下图所示：<br><img data-src="/uploads/in-post/mysql/redo-log.png"></p>
<p>write pos 是当前记录的位置，⼀边写⼀边后移，写到第 4 号⽂件末尾后就回到 1 号⽂件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据⽂件。write pos 和 checkpoint 之间的是缓存中还空着的部分，可以⽤来记录新的操作。如果 write pos 追上 checkpoint，表示缓存满了，这时候不能再执⾏新的更新，得停下来先擦掉⼀些记录，把 checkpoint 推进⼀下。</p>
<p>有了 redo log，InnoDB 就可以保证即使数据库发⽣异常重启，之前提交的记录都不会丢失，这个能⼒称为 crash-safe。</p>
<p>redo log 就像你在命令行敲了很长的命令，敲回车执行，结果报错了。此时我们只需要再敲个↑就会拿到上一条命令，再执行一遍即可。</p>
<h2 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h2><p>binlog 用于记录数据库执行的写入性操作（不包括查询）信息，以二进制的形式保存在磁盘中。binlog 是 mysql 的逻辑日志，并且由 Server 层进行记录，使用任何存储引擎的 mysql 数据库都会记录 binlog 日志。可以简单理解为记录的就是 sql 语句。</p>
<p>在实际应用中，binlog 的主要使用场景有两个，分别是主从复制和数据恢复。</p>
<ol>
<li>主从复制：在 Master 端开启 binlog，然后将 binlog 发送到各个 Slave 端，Slave 端重放 binlog 从而达到主从数据一致。</li>
<li>数据恢复：通过使用 mysqlbinlog 工具来恢复数据。</li>
</ol>
<h2 id="Redo-Log-与-Binlog-区别"><a href="#Redo-Log-与-Binlog-区别" class="headerlink" title="Redo Log 与 Binlog 区别"></a>Redo Log 与 Binlog 区别</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">redo log</th>
<th align="center">binlog</th>
</tr>
</thead>
<tbody><tr>
<td align="center">文件大小</td>
<td align="center">redo log 的大小是固定的。</td>
<td align="center">binlog 可通过配置参数 max_binlog_size 设置每个 binlog 文件的大小。</td>
</tr>
<tr>
<td align="center">实现方式</td>
<td align="center">redo log 是 InnoDB 引擎层实现的，并不是所有引擎都有。</td>
<td align="center">binlog 是 Server 层实现的，所有引擎都可以使用 binlog</td>
</tr>
<tr>
<td align="center">日志记录方式</td>
<td align="center">redo log 采用循环写的方式记录，当写到结尾时，会回到开头循环写日志。</td>
<td align="center">binlog 通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上</td>
</tr>
<tr>
<td align="center">日志记录内容</td>
<td align="center">redo log 是物理⽇志，记录的是“在某个数据⻚上做了什么修改”。</td>
<td align="center">binlog 是逻辑⽇志，记录的是这个语句的原始逻辑，⽐ 如“给 ID=2 这⼀⾏的 c 字段加 1”。</td>
</tr>
<tr>
<td align="center">适用场景</td>
<td align="center">redo log 适用于崩溃恢复 (crash-safe)</td>
<td align="center">binlog 适用于主从复制和数据恢复</td>
</tr>
</tbody></table>
<p>由 binlog 和 redo log 的区别可知：binlog 日志只用于归档，只依靠 binlog 是没有 crash-safe 能力的。但只有 redo log 也不行，因为 redo log 是 InnoDB 特有的，且日志上的记录落盘后会被覆盖掉。因此需要 binlog 和 redo log 二者同时记录，才能保证当数据库发生宕机重启时，数据不会丢失。</p>
<p>那么为什么 redo log 具有 crash-safe 的能力，而 binlog 没有？</p>
<p>举个栗子，binlog 记录了两条日志：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. 给 ID=<span class="number">2</span> 这一行的 c 字段加 <span class="number">1</span></span><br><span class="line"><span class="attribute">2</span>. 给 ID=<span class="number">2</span> 这一行的 c 字段加 <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>在记录 1 刷盘后，记录 2 未刷盘时，数据库 crash。重启后，只通过 binlog 数据库无法判断这两条记录哪条已经写入磁盘，哪条没有写入磁盘，不管是两条都恢复至内存，还是都不恢复，对 ID=2 这行数据来说，都不对。</p>
<p>但 redo log 不一样，只要刷入磁盘的数据，都会从 redo log 中抹掉，数据库重启后，直接把 redo log 中的数据都恢复至内存就可以了。这就是为什么 redo log 具有 crash-safe 的能力，而 binlog 不具备。</p>
<h2 id="Update-执行流程"><a href="#Update-执行流程" class="headerlink" title="Update 执行流程"></a>Update 执行流程</h2><ol>
<li>执⾏器先找引擎取 ID=2 这⼀⾏。ID 是主键，引擎直接⽤树搜索找到这⼀⾏。如果 ID=2 这⼀⾏所在的数据⻚本来就在内存中，就直接返回给执⾏器；</li>
<li>如果数据页不在内存中，需要先从磁盘读⼊内存，然后再返回。</li>
<li>生成修改的反向语句，写入 undo log。</li>
<li>执⾏器拿到引擎给的⾏数据，把这个值加上 1，⽐如原来是 N，现在就是 N+1，得到新的⼀⾏数据，再调⽤引擎接⼝写⼊这⾏新数据。</li>
<li>执行器将修改写入 redo log buffer 中。</li>
<li>引擎将这⾏新数据更新到内存中，同时将这个更新操作记录到 redo log ⾥⾯，此时 redo log 处于 prepare 状态。然后告知执⾏器执⾏完成了，随时可以提交事务。</li>
<li>执⾏器⽣成这个操作的 binlog，并把 binlog 写⼊磁盘。</li>
<li>执⾏器调⽤引擎的提交事务接⼝，引擎把刚刚写⼊的 redo log 改成提交（commit）状态，更新完成。</li>
</ol>
<p>其流程图如下：<br><img data-src="/uploads/in-post/mysql/update-process.png"></p>
<p>从第 6 到第 8 步可以看出，redo log 的写⼊有两个步骤：prepare 和 commit，这就是 2PC（两阶段提交）。之所以要有两阶段提交，是为了让两份⽇志之间的逻辑能够保持⼀致，那么为什么两阶段提交就可以保证逻辑一致呢？</p>
<ol>
<li><p>假设 redo log 刷入成功了，但是还没来得及刷入 binlog MySQL 就挂了。此时重启之后会发现 redo log 并没有 Commit 标识，此时会进行回滚。</p>
</li>
<li><p>假设 redo log 刷入成功，而且 binlog 也刷入成功了，但是还没有来得及将 redo log 从 prepare 改成 commit MySQL 就挂了，此时重启会发现虽然 redo log 没有 commit 标识，但是查询到的 binlog 却已经成功刷入磁盘了，此时会自动提交这个事务，并将 redo log 状态改为 commit。</p>
</li>
<li><p>假设两者都写入成功并且 redo log 也是 commit 状态，万事大吉。</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇中，我们了解了 MySQL 的逻辑架构，查询和更新的流程，知道了连接器，查询缓存，分析器，优化器以及执行器的作用和工作流程，知道了 MySQL 三种重要的日志：undo log，redo log 和 binlog，同时知道了两阶段提交及其意义。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MOI 模型</title>
    <url>/2021/06/01/2021-06-01-moi-model/</url>
    <content><![CDATA[<p>近期正在看《成为技术领导者》这本书，其中对“领导力”的定义是“所谓领导力，就是创造这样一个环境，每个人都能在其中发挥出更多的能力。”，所以领导力应该注重管理过程而不是人，需要在过程中帮助大家发挥出自己更大的能力。书中提到了一个领导力的模型——MOI 模型（Motivation，Organization，Innovation），想要让团队产生变化，需要通过这三个要素来促进或抑制，Motivation 是奖励或惩罚，Organization 是通过组织架构把想法转变为现实，Innovation 是对未来的规划，想要促进变化需要三者同时作用，但是如果想阻碍变化，只需要抑制其中一条即可：M：打击激励，让人觉得变化是不受欢迎的，O：增加混乱，阻碍合作，I：阻碍思维，自己的想法第一位不听他人意见。只善于激励的人可能是明星销售或者政客，只善于组织的人可能是高效率的行政主管，只善于创新的人可能是天才但是无法与人合作。我们每个人擅长的方面都不相同，但是如果想要保证领导力的效果，需要在 MOI 三者之间寻求一个平衡，并且要相信一定存在更好的方法并不断去寻找这个方法。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>打造好「自己」这个产品</title>
    <url>/2021/06/11/2021-06-11-practise-self-as-a-product/</url>
    <content><![CDATA[<p>今天听到梁宁的一个观点：产品能力是人生的一个底层能力。她说，产品能力，就是训练一个人判断信息，抓住要点，整合有限的资源，把自己的价值打造成一个产品向世界交付，并且获得回报。</p>
<p>作为程序员，我们首要提升的当然是自己的代码能力，但是我们一定要知道，通过自己对产品的思考输出价值是更有意义的，代码实现只是实现产品的最终步骤，软件工程告诉我们，越是前置步骤的改变成本越低，通过我们对各种技术信息的理解，可以让产品在设计之初就能够变得更加完善，这样带来的收益十分可观。</p>
<p>作为程序员，我们非常容易在讨论问题的时候陷入细节，经常会在需求提出的时候就想到该怎么去实现，而缺乏了对信息的判断。之前提到过，我们需要抓主要矛盾，我们不能仅仅去实现需求，那样不就成了实现需求的机器了吗？我们需要对自己的业务有独立的思考，需要在面对需求时有自己的判断，该拒绝的需求不能因为实现简单而去做，因为人的精力是有限的，做了无效的需求一定会耽误去做真正有效需求的时间和精力。所以在讨论需求时我们还需要从需求和合理性，收益性等方面加上自己的思考，做完需求时最好还能够总结和复盘，让自身在下次评估的时候能够拥有更加准确的判断能力。</p>
<p>其实我们都是从一无所有的状态走过来的，初入职场，我们缺乏对信息的判断和处理能力，往往会做出不准确甚至错误的判断，导致挫败和被 diss，但是通过一次次的训练，我们逐渐掌握了处理信息和抓住要点的能力，渐渐的能够建立起自己的影响圈，不断的释放自己的能力和价值，在我看来，我们每个人都在不断打造「自己」这个产品，并通过交付这个产品来获取物质的或者精神的回报。所以，想要获得更多的回报，最好的方式就是把「自己」这个产品打造的更加强大，对外释放的能力越强，影响力越大，收获也会越多。</p>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ 简析</title>
    <url>/2021/06/13/2021-06-13-mq-introduction/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>消息队列（Message Queue），是分布式系统中重要的组件，它的特点是异步的，即消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。</p>
<p>其通用的使用场景可以简单地描述为：当不需要立即获得结果，但是并发量又需要进行控制时，就可以使用消息队列。</p>
<p>当前使用较多的消息队列有 RabbitMQ、RocketMQ、ActiveMQ、Kafka 等，而部分数据库如 Redis、Mysql 以及 phxsql 也可实现消息队列的功能。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>消息队列在实际应用中一般包括如下四个场景：</p>
<ol>
<li>应用解耦：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；</li>
<li>异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；</li>
<li>限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；</li>
<li>消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者（可能有多个）负责对消息进行处理；</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li><p>系统可用性降低：系统引入的外部依赖越多，越不稳定，万一 MQ 挂了可能导致整套系统崩溃。</p>
</li>
<li><p>系统复杂性提高：增加了 MQ，需要考虑更多的情况，比如如何保证消息没有重复消费？如何处理消息丢失的情况？如何保证消息传递的顺序性？</p>
</li>
<li><p>一致性问题：A 系统处理完了直接返回成功了，MQ 下游的 B 系统消费之后却写入失败了，数据就不一致了。</p>
<span id="more"></span></li>
</ol>
<h1 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h1><p>消息队列包括两种模式，点对点模式（point to point， queue）和发布/订阅模式（publish/subscribe，topic）。</p>
<h2 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h2><p>点对点模式下包括三个角色：</p>
<ul>
<li>消息队列</li>
<li>发送者 （生产者）</li>
<li>接收者（消费者）<br><img data-src="/uploads/in-post/mq/point_to_point.png"></li>
</ul>
<p>消息发送者生产消息发送到 queue 中，然后消息接收者从 queue 中取出并且消费消息。消息被消费以后，queue 中不再有存储，所以消息接收者不可能消费到已经被消费的消息。</p>
<p>点对点模式特点：</p>
<ul>
<li>每个消息只有一个接收者（Consumer）（即一旦被消费，消息就不再在消息队列中）；</li>
<li>发送者和接收者间没有依赖性，发送者发送消息之后，不管有没有接收者在运行，都不会影响到发送者下次发送消息；</li>
<li>接收者在成功接收消息之后需向队列应答成功，以便消息队列删除当前接收的消息；</li>
</ul>
<h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>发布/订阅模式下包括三个角色：</p>
<ul>
<li>主题（Topic）</li>
<li>发布者 (Publisher)</li>
<li>订阅者 (Subscriber)<br><img data-src="/uploads/in-post/mq/pub_sub.png"></li>
</ul>
<p>发布者将消息发送到 Topic, 系统将这些消息传递给多个订阅者。</p>
<p>发布/订阅模式特点：</p>
<ul>
<li>每个消息可以有多个订阅者；</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li>
<li>为了消费消息，订阅者需要提前订阅该角色主题，并保持在线运行；</li>
</ul>
<h1 id="常见-MQ-对比"><a href="#常见-MQ-对比" class="headerlink" title="常见 MQ 对比"></a>常见 MQ 对比</h1><p><img data-src="/uploads/in-post/mq/comparison.png"></p>
<p>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃。</p>
<p>RabbitMQ 优势在于低延时，但是吞吐量较低，并且 erlang 语言阻止了大量的工程师去深入研究和掌控他，对公司而言，几乎处于不可控的状态，不过是开源的，有比较稳定的支持，活跃度也高；</p>
<p>RocketMQ 接口简单易用，而且在阿里大规模应用过，有阿里品牌保障，日处理消息上百亿，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，可靠性和可用性都很好，还可以支撑大规模的 topic 数量，支持复杂 MQ 业务场景。</p>
<p>kafka 的特点其实很明显，就是提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。kafka 唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略。如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准，社区活跃度很高</p>
<h1 id="如何保证-MQ-的高可用"><a href="#如何保证-MQ-的高可用" class="headerlink" title="如何保证 MQ 的高可用"></a>如何保证 MQ 的高可用</h1><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ 有 3 种部署模式：</p>
<ul>
<li>单机模式</li>
<li>普通集群模式</li>
<li>镜像集群模式</li>
</ul>
<p>单机模式与高可用完全没关系，咱就不说了，直接看看这 2 种集群模式。</p>
<h3 id="普通集群模式"><a href="#普通集群模式" class="headerlink" title="普通集群模式"></a>普通集群模式</h3><p><img data-src="/uploads/in-post/mq/rabbitmq_normal_cluster.jpeg"></p>
<p>某一个 Queue 是在集群中的某一个 Broker 上，各个 Broker 会同步元数据，但不会同步 Queue 的消息数据。</p>
<p>如果某一个 Broker 故障了，其中的 Queue 便无法使用。如果消息没有配置消息持久化，则消息丢失。</p>
<p>可以看到，这种方式并没有实现高可用，只是扩展性比较好，扩充 Broker 可以容纳更多的 Queue，提高吞吐量。</p>
<h3 id="镜像集群模式"><a href="#镜像集群模式" class="headerlink" title="镜像集群模式"></a>镜像集群模式</h3><p><img data-src="/uploads/in-post/mq/rabbitmq_mirror_cluster.jpeg"></p>
<p>一个 Broker 中 Queue 的元数据和消息数据都会同步到其他 Broker 上，就是做了全量备份，所以称为 “镜像模式”。</p>
<p>实现了高可用，如果一个 Broker 故障了，没关系，可以使用其他 Broker 继续工作，消息数据不会丢失。</p>
<p>可用性上去了，但扩展性没有了。因为如果某个 Queue 负载很重，加机器的话，新增的机器也包含了这个 queue 的所有数据，并没有办法线性扩展 Queue</p>
<p>一个 Queue 的数据是全量存在 Broker 中的，所以 Queue 的消息容量、消息处理能力，都受限于 Broker。</p>
<p><code>普通集群模式</code> 没有达到高可用，扩展性较好。</p>
<p><code>镜像集群模式</code> 实现了高可用，但扩展性差。</p>
<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p><img data-src="/uploads/in-post/mq/kafka.jpeg"></p>
<p>Kafka 把 Topic（主题）分为了多个 Partition（分区），Topic 只是逻辑概念，Partition 才是实际的消息存储单元。</p>
<p>一个 Topic 的多个 Partition 分散在多个 Broker 中，每个 Partition 存放 Topic 的一部分数据。</p>
<p>有了 Partition 之后，Topic 就具有了极强的扩展性，可以指定 N 个 Partition。<br><img data-src="/uploads/in-post/mq/kafka_replica.jpeg"></p>
<p>可以为 Partition 指定多个“副本”，分散在不同的 Broker，从而实现其高可用。</p>
<p>当某个 Broker 故障的时候，其中存放的 Partition 不可用，但没有关系，可以使用其他 Broker 上的副本。<br><img data-src="/uploads/in-post/mq/kafka_sync.jpeg"></p>
<p>Partition 的多个副本分为两种角色，Leader 和 Follower。</p>
<p>Leader 是由 Kafka 选举出来的，负责处理消息的读写。Leader 收到新消息后，会同步给 Follower。</p>
<p>Follower 的作用是候选人，当 Leader 宕机之后，Kafka 会从 Follower 中选举出新的 Leader。</p>
<p>可以配置消息写入完成的标准：</p>
<ul>
<li>写入 Leader 既可 – 速度快，但可能会有消息丢失，例如在同步到 Follower 之前 Broker 故障了，则消息丢失。</li>
<li>Follower 同步完成之后才算写入成功 – 消息可靠性极高，但影响写入速度。<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><img data-src="/uploads/in-post/mq/rocketmq.jpeg"></li>
</ul>
<p>这是 RocketMQ 的官方结构图，左右是 Producer 和 Consumer，中间是 RocketMQ，分为两个部分：</p>
<ul>
<li>NameServer 集群 – 存放元数据</li>
<li>Broker 集群 – 存放队列数据</li>
</ul>
<p>这两部分都需要保证高可用。<br><img data-src="/uploads/in-post/mq/rocketmq_nameserver.jpeg"></p>
<p>NameServer 是独立运行的，保存着集群完整的集群元数据，例如路由信息、Broker 信息、数据信息。</p>
<p>为了保证其高可用，可以运行多个 NameServer，之间完整的同步数据即可。</p>
<p>这样只要有一个 NameServer 是可用的，就不会影响集群的正常工作。</p>
<p>Broker 集群的部署方式可以分为 3 种。</p>
<h3 id="多-master"><a href="#多-master" class="headerlink" title="多 master"></a>多 master</h3><p><img data-src="/uploads/in-post/mq/rocketmq_multi_master.jpeg"></p>
<p>部署多个 Broker，角色都是 Master，Topic 的数据会分散存储在这些 Broker 中。</p>
<p>单个 Master 故障会导致其中数据无法使用，需要等待修复。类似于 RabbitMQ 的普通集群模式。</p>
<p>如果想保障数据的可靠性，可以使用【RAID10 + 同步刷盘】机制。</p>
<h3 id="多-master-多-slave"><a href="#多-master-多-slave" class="headerlink" title="多 master 多 slave"></a>多 master 多 slave</h3><p><img data-src="/uploads/in-post/mq/rocketmq_multi_master_slave.jpeg"></p>
<p>为 Master 配置了 Slave，Master 会把数据同步到 Slave。</p>
<p>当 Master 故障之后，可以用 Slave 顶上去，数据和服务都不影响，但会有短暂的停顿，需要修改配置并重启才能完成切换动作。</p>
<p>数据同步的方式分为：</p>
<ul>
<li>异步 – Master 写入完成即可，异步同步给 Slave。写入速度快，但同步会有延迟，可能会丢数据。</li>
<li>同步 – Master 与 Slave 都写入之后才算成功。不会丢消息，但写入速度降低。</li>
</ul>
<h3 id="Dledger-Group"><a href="#Dledger-Group" class="headerlink" title="Dledger Group"></a>Dledger Group</h3><p><img data-src="/uploads/in-post/mq/rocketmq_dledger_group.jpeg"></p>
<p>Dledger 模式要求为 Master 配置 2 个 Slave，3 者组成一个 Dledger Group。</p>
<p>Dledger 也是 Master-Slave 同步的方式，好处在于可以实现自动选举 Master，自动切换。</p>
<p>当 Master 故障的时候，RocketMQ 可以从组内选出一个新的 Master，完成自动切换，这样更进一步提高了集群的可用性。</p>
<h1 id="如何处理消息丢失的问题"><a href="#如何处理消息丢失的问题" class="headerlink" title="如何处理消息丢失的问题"></a>如何处理消息丢失的问题</h1><p>一条消息从生产到被消费，将会经历三个阶段：</p>
<p><img data-src="/uploads/in-post/mq/mq_process.jpeg"></p>
<ul>
<li>生产阶段，Producer 新建消息，然后通过网络将消息投递给 MQ Broker</li>
<li>存储阶段，消息将会存储在 Broker 端磁盘中</li>
<li>消费阶段， Consumer 将会从 Broker 拉取消息</li>
</ul>
<p>以上任一阶段都可能会丢失消息，我们只要找到这三个阶段丢失消息原因，采用合理的办法避免丢失，就可以彻底解决消息丢失的问题。所有的 MQ 处理消息丢失的方法都是类似的。</p>
<h2 id="生产阶段"><a href="#生产阶段" class="headerlink" title="生产阶段"></a>生产阶段</h2><p>生产者 (Producer) 调用 send 方法发送消息之后，消息可能因为网络问题并没有发送过去。</p>
<p>所以，我们不能默认在调用 send 方法发送消息之后消息消息发送成功了。为了确定消息是发送成功，我们要判断消息发送的结果。</p>
<p>生产者（Producer） 通过网络发送消息给 Broker，当 Broker 收到之后，返回确认响应信息给 Producer。所以生产者只要接收到返回的确认响应，就代表消息在生产阶段未丢失。如果消息发送失败的话，我们检查失败的原因之后重新发送即可。</p>
<p>发送失败的话，Producer 需要进行重试， Producer 的 retries（重试次数）可以设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔，因为间隔太小的话重试的效果就不明显了，网络波动的话 3 次一下就重试完了。</p>
<h2 id="存储阶段"><a href="#存储阶段" class="headerlink" title="存储阶段"></a>存储阶段</h2><p>默认情况下，消息只要到了 Broker 端，将会优先保存到内存中，然后立刻返回确认响应给生产者。随后 Broker 定期批量的将一组消息从内存异步刷入磁盘。</p>
<p>这种方式减少 I/O 次数，可以取得更好的性能，但是如果发生机器掉电，异常宕机等情况，消息还未及时刷入磁盘，就会出现丢失消息的情况。</p>
<p>若想保证 Broker 端不丢消息，保证消息的可靠性，我们需要将消息保存机制修改为同步刷盘方式，即消息存储磁盘成功，才会返回响应。</p>
<p>若 Broker 未在同步刷盘时间内完成刷盘，返回相应的超时状态给生产者。</p>
<h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><p>为了保证可用性，Broker 通常采用一主（master）多从（slave）部署方式。为了保证消息不丢失，消息还需要复制到 slave 节点。</p>
<p>默认方式下，消息写入 master 成功，就可以返回确认响应给生产者，接着消息将会异步复制到 slave 节点。</p>
<p>但是此时若 master 突然宕机且不可恢复，那么还未复制到 slave 的消息将会丢失。</p>
<p>为了进一步提高消息的可靠性，我们可以采用同步的复制方式，master 节点将会同步等待 slave 节点复制完成，才会返回确认响应。</p>
<p>异步复制与同步复制区别如下图：<br><img data-src="/uploads/in-post/mq/mq_cluster_sync.png"></p>
<blockquote>
<p>注： 大家不要被上图误导，broker master 只能配置一种复制方式，上图只为解释同步复制的与异步复制的概念。</p>
</blockquote>
<p>如果 slave 节点未在指定时间内同步返回响应，将会返回相应的超时状态。</p>
<p><strong>虽然上述配置提高消息的高可靠性，但是会降低性能，生产实践中需要综合选择。</strong></p>
<h2 id="消费阶段"><a href="#消费阶段" class="headerlink" title="消费阶段"></a>消费阶段</h2><p>消费者从 broker 拉取消息，然后执行相应的业务逻辑。一旦执行成功，将会返回确认相应信息给 Broker。</p>
<p>如果 Broker 未收到消费确认响应或收到其他状态，消费者下次还会再次拉取到该条消息，进行重试。这样的方式有效避免了消费者消费过程发生异常，或者消息在网络传输中丢失的情况。</p>
<p>这种方式虽然提高消息可靠性，但是可能导致消息重发和重复消费。所以对于消费客户端，需要注意保证<strong>幂等性</strong>。</p>
<h1 id="如何保证消息消费时的幂等性"><a href="#如何保证消息消费时的幂等性" class="headerlink" title="如何保证消息消费时的幂等性"></a>如何保证消息消费时的幂等性</h1><h2 id="什么是消息幂等"><a href="#什么是消息幂等" class="headerlink" title="什么是消息幂等"></a>什么是消息幂等</h2><p>任意多次执行所产生的影响均与一次执行的影响相同就可以称为幂等</p>
<p>消息幂等就是当出现消费者对某条消息重复消费的情况时，重复消费的结果与消费一次的结果是相同的，并且多次消费并未对业务系统产生任何负面影响</p>
<h2 id="为什么需要保证消息幂等"><a href="#为什么需要保证消息幂等" class="headerlink" title="为什么需要保证消息幂等"></a>为什么需要保证消息幂等</h2><p>这个问题其实没法准确回答。回答这个问题的根源得从业务场景上进行分析。比如正常业务情况下，我们是不允许同个订单重复支付，这种业务场景我们就需要确保幂等性。再比如日志记录，这种业务场景，我们可能就不需要做幂等判断。</p>
<p>因此是否要保证幂等性，得基于业务进行考量</p>
<h2 id="消息队列可以保证幂等吗？"><a href="#消息队列可以保证幂等吗？" class="headerlink" title="消息队列可以保证幂等吗？"></a>消息队列可以保证幂等吗？</h2><p>rabbitmq、rocketmq、kafka 都有可能会出现消费重复消费的问题，这是正常情况，因为由于网络原因闪断，ACK 返回失败等等故障，确认信息没有传送到消息队列，导致消息队列不知道该消息已经被消费了，再次将该消息分发给其他的消费者。所以这类问题 MQ 本身是无法保证的，而是需要我们写业务的时候自己保证的。</p>
<h2 id="常见的保证幂等的方法"><a href="#常见的保证幂等的方法" class="headerlink" title="常见的保证幂等的方法"></a>常见的保证幂等的方法</h2><ol>
<li><p>利用数据库的唯一约束实现幂等<br>比如将订单表中的订单编号设置为唯一索引，创建订单时，根据订单编号就可以保证幂等</p>
</li>
<li><p>去重表<br>这个方案本质也是根据数据库的唯一性约束来实现。其实现大体思路是：首先在去重表上建唯一索引，其次操作时把业务表和去重表放在同个本地事务中，如果出现重现重复消费，数据库会抛唯一约束异常，操作就会回滚</p>
</li>
<li><p>利用 redis 的原子性<br>每次操作都直接 set 到 redis 里面，然后将 redis 数据定时同步到数据库中</p>
</li>
<li><p>多版本（乐观锁）控制<br>此方案多用于更新的场景下。其实现的大体思路是：给业务数据增加一个版本号属性，每次更新数据前，比较当前数据的版本号是否和消息中的版本一致，如果不一致则拒绝更新数据，更新数据的同时将版本号+1</p>
</li>
<li><p>token 机制<br>生产者发送每条数据的时候，增加一个全局唯一的 id，这个 id 通常是业务的唯一标识，比如订单编号。在消费端消费时，则验证该 id 是否被消费过，如果还没消费过，则进行业务处理。处理结束后，在把该 id 存入 redis，同时设置状态为已消费。如果已经消费过了，则不进行处理。</p>
</li>
</ol>
<h1 id="如何保证消息的顺序性"><a href="#如何保证消息的顺序性" class="headerlink" title="如何保证消息的顺序性"></a>如何保证消息的顺序性</h1><h2 id="为什么需要保证消息的顺序性"><a href="#为什么需要保证消息的顺序性" class="headerlink" title="为什么需要保证消息的顺序性"></a>为什么需要保证消息的顺序性</h2><p>在生产中经常会有一些类似报表系统这样的系统，需要做 MySQL 的 binlog 同步。比如订单系统要同步订单表的数据到大数据部门的 MySQL 库中用于报表统计分析，通常的做法是基于 Canal 这样的中间件去监听订单数据库的 binlog，然后把这些 binlog 发送到 MQ 中，再由消费者从 MQ 中获取 binlog 落地到大数据部门的 MySQL 中。</p>
<p>在这个过程中，可能会有对某个订单的增删改操作，比如有三条 binlog 执行顺序是增加、修改、删除；如果消费者不按照这个顺序执行结果肯定就错误了，所以针对此类场景需要保证消息的发送和消费都是有序的。</p>
<h2 id="乱序原因和保证顺序性的方法"><a href="#乱序原因和保证顺序性的方法" class="headerlink" title="乱序原因和保证顺序性的方法"></a>乱序原因和保证顺序性的方法</h2><h3 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>对于 RabbitMQ 来说，导致上面顺序错乱的原因通常是消费者是集群部署，不同的消费者消费到了同一订单的不同的消息，如消费者 A 执行了增加，消费者 B 执行了修改，消费者 C 执行了删除，但是消费者 C 执行比消费者 B 快，消费者 B 又比消费者 A 快，就会导致消费 binlog 执行到数据库的时候顺序错乱，本该顺序是增加、修改、删除，变成了删除、修改、增加。</p>
<p>如下图是 RabbitMQ 可能出现顺序错乱的问题示意图：<br><img data-src="/uploads/in-post/mq/rabbitmq_not_inorder.png"></p>
<p>RabbitMQ 的问题是由于不同的消息都发送到了同一个 queue 中，多个消费者都消费同一个 queue 的消息。解决这个问题，我们可以给 RabbitMQ 创建多个 queue，每个消费者固定消费一个 queue 的消息，生产者发送消息的时候，同一个订单号的消息发送到同一个 queue 中，由于同一个 queue 的消息是一定会保证有序的，那么同一个订单号的消息就只会被一个消费者顺序消费，从而保证了消息的顺序性。</p>
<p>如下图是 RabbitMQ 保证消息顺序性的方案：<br><img data-src="/uploads/in-post/mq/rabbitmq_inorder.png"></p>
<h3 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h3><p>对于 Kafka 来说，一个 topic 下同一个 partition 中的消息肯定是有序的，生产者在写的时候可以指定一个 key，通过订单号作为 key，这个 key 对应的消息都会发送到同一个 partition 中，所以消费者消费到的消息也一定是有序的。</p>
<p>那么为什么 Kafka 还会存在消息错乱的问题呢？问题就出在消费者身上。通常消费到同一个 key 的多条消息后，会使用多线程技术去并发处理来提高消息处理速度，否则一条消息的处理需要耗时几十毫秒，一秒只能处理几十条消息，吞吐量太低了。而多线程并发处理的话，binlog 执行到数据库的时候就不一定还是原来的顺序了。</p>
<p>如下图是 Kafka 可能出现乱序现象的示意图：<br><img data-src="/uploads/in-post/mq/kafka_not_inorder.png"></p>
<p>Kafka 从生产者到消费者消费消息这一整个过程其实都是可以保证有序的，导致最终乱序是由于消费者端需要使用多线程并发处理消息来提高吞吐量，比如消费者消费到了消息以后，开启 32 个线程处理消息，每个线程线程处理消息的快慢是不一致的，所以才会导致最终消息有可能不一致。</p>
<p>所以对于 Kafka 的消息顺序性保证，其实我们只需要保证同一个订单号的消息只被同一个线程处理的就可以了。由此我们可以在线程处理前增加个内存队列，每个线程只负责处理其中一个内存队列的消息，同一个订单号的消息发送到同一个内存队列中即可。</p>
<p>如下图是 Kafka 保证消息顺序性的方案：</p>
<p><img data-src="/uploads/in-post/mq/kafka_inorder.png"></p>
<h3 id="RocketMQ-1"><a href="#RocketMQ-1" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>对于 RocketMQ 来说，每个 Topic 可以指定多个 MessageQueue，当我们写入消息的时候，会把消息均匀地分发到不同的 MessageQueue 中，比如同一个订单号的消息，增加 binlog 写入到 MessageQueue1 中，修改 binlog 写入到 MessageQueue2 中，删除 binlog 写入到 MessageQueue3 中。</p>
<p>但是当消费者有多台机器的时候，会组成一个 Consumer Group，Consumer Group 中的每台机器都会负责消费一部分 MessageQueue 的消息，所以可能消费者 A 消费了 MessageQueue1 的消息执行增加操作，消费者 B 消费了 MessageQueue2 的消息执行修改操作，消费者 C 消费了 MessageQueue3 的消息执行删除操作，但是此时消费 binlog 执行到数据库的时候就不一定是消费者 A 先执行了，有可能消费者 C 先执行删除操作，因为几台消费者是并行执行，是不能够保证他们之间的执行顺序的。</p>
<p>如下图是 RocketMQ 可能出现乱序现象的示意图：<br><img data-src="/uploads/in-post/mq/rocketmq_not_inorder.png"></p>
<p>RocketMQ 的消息乱序是由于同一个订单号的 binlog 进入了不同的 MessageQueue，进而导致一个订单的 binlog 被不同机器上的 Consumer 处理。</p>
<p>要解决 RocketMQ 的乱序问题，我们只需要想办法让同一个订单的 binlog 进入到同一个 MessageQueue 中就可以了。因为同一个 MessageQueue 内的消息是一定有序的，一个 MessageQueue 中的消息只能交给一个 Consumer 来进行处理，所以 Consumer 消费的时候就一定会是有序的。</p>
<p>如下图是 RocketMQ 保证消息顺序性的方案：<br><img data-src="/uploads/in-post/mq/rocketmq_inorder.png"></p>
<h1 id="如何解决消息队列的大量-lag"><a href="#如何解决消息队列的大量-lag" class="headerlink" title="如何解决消息队列的大量 lag"></a>如何解决消息队列的大量 lag</h1><p>消息堆积是消息中间件的一大特色，消息中间件的流量削峰、冗余存储等功能正是得益于消息中间件的消息堆积能力。然而消息堆积其实是一把亦正亦邪的双刃剑，如果应用场合不恰当反而会对上下游的业务造成不必要的麻烦，比如消息堆积势必会影响上下游整个调用链的时效性，影响上下游的业务，堆积过多有可能会造成磁盘爆满，或者触发日志清除策略而造成消息丢失的情况。</p>
<h2 id="lag-一直堆积，消费速度跟不上生产速度"><a href="#lag-一直堆积，消费速度跟不上生产速度" class="headerlink" title="lag 一直堆积，消费速度跟不上生产速度"></a>lag 一直堆积，消费速度跟不上生产速度</h2><p>首先，我们需要有一个比较及时的监控，在 lag 达到一个风险数量的时候把情况暴露出来，lag 堆积的可能性有以下几种：</p>
<ol>
<li>consumer 出 bug 导致消费速度降低<br>这种情况一般在报警足够及时的情况下，可以在 lag 达到风险量级之前修复好 bug 就可以解决了，否则就会成为情况 4</li>
<li>consumer quota 不够用导致性能下降<br>这种情况可能是由于当前的消费方式使 CPU 处理速度已经达到极限，无法更快速的处理消息了，此时可以对消费者现有逻辑进行梳理，看是否有代码优化的空间，比如批量消费，跳过非重要信息，减少处理流程等方式。如果已经无法对消费者进行优化了，可以采用扩容的形式增加消费者的处理能力。</li>
<li>producer 由于业务发展提升了消息产生速度过快<br>这种情况是好现象，说明业务在向前发展，如果消费端已经优化到极致了，并且需要考虑扩容成本的情况下，可以考虑对消息进行前期聚合之后再发送，或者跳过非重要信息的发送等</li>
<li>报警不及时导致堆积了大量消息</li>
</ol>
<ul>
<li>如果不是时效性要求很高的业务，修复 bug 之后，等待一段时间是可以处理完堆积的消息的</li>
<li>如果业务需要快速消费完这些消息，可以有两种做法。<ul>
<li>丢弃所有堆积的消息，通过查表将缺失的信息重新导入 mq 或直接写入消费方的数据库</li>
<li>紧急扩容，不过这种方式成本比较高<ul>
<li>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 暂时停掉。</li>
<li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</li>
<li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li>
<li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li>
<li>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="mq-磁盘写满了"><a href="#mq-磁盘写满了" class="headerlink" title="mq 磁盘写满了"></a>mq 磁盘写满了</h2><p>消息队列的磁盘写满之后，再进入的消息会被直接丢弃，这种情况下是无论如何也没办法通过 mq 找回了，只能丢弃所有堆积的消息，通过查表将缺失的信息重新导入 mq 了</p>
<h1 id="如何设计一个消息队列的架构"><a href="#如何设计一个消息队列的架构" class="headerlink" title="如何设计一个消息队列的架构"></a>如何设计一个消息队列的架构</h1><p>其实在这篇文章上面讨论的内容就是设计一个消息队列架构需要考虑的点了，这里再总结一下。</p>
<ol>
<li>可扩展性<br>即可以在需要的时候快速扩容，参照 kafka 的设计理念，broker -&gt; topic -&gt; partition，每个 partition 放一个 broker，只存一部分数据。如果现在资源不够了，只需给 topic 增加 partition，然后做数据迁移，增加机器，就可以存放更多数据，提供更高的吞吐量。</li>
<li>数据落盘<br>mq 接收到的消息需要落盘，这样才能保证宕机时数据不会丢失，可以参考 kafka 采用磁盘顺序读写的方式，提升性能</li>
<li>可用性<br>可以参考 kafka 的高可用保障机制。多副本 -&gt; leader &amp; follower -&gt; broker 挂了重新选举 leader 即可对外服务。</li>
<li>消息和数据不丢失<br>参考之前提到的生产阶段，存储阶段，消费阶段三个阶段的保证方式</li>
</ol>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2h1emhpZHVvLmNvbS9BL21vNWswZTk0ZHcv">Kafka 如何保证高吞吐<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>An introduction of OAuth</title>
    <url>/2023/11/22/2023-11-22-an-introduction-of-oauth/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="What-is-OAuth-2-0？"><a href="#What-is-OAuth-2-0？" class="headerlink" title="What is OAuth 2.0？"></a>What is OAuth 2.0？</h2><blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5yZmNyZWFkZXIuY29tLyNyZmM2NzQ5">RFC Reader - An online reader for IETF RFCs<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>The OAuth (Open Authorization) 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.</p>
<span id="more"></span>

<h2 id="Analogy"><a href="#Analogy" class="headerlink" title="Analogy"></a>Analogy</h2><h3 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h3><p>I live in a large residential community with a gated access system that requires a password for entry.</p>
<p>As a frequent online shopper and food delivery recipient, I receive daily visits from delivery personnel.</p>
<p>I need to find a solution to allow these delivery personnel to access the community through the gate without having to share my personal password.</p>
<p>If I were to share my password with them, they would have the same level of access as I do, which doesn’t seem appropriate. Additionally, it would be troublesome if I ever wanted to revoke their access, as I would need to change my password and inform other delivery personnel as well.</p>
<p>Is there a way to grant the delivery personnel the freedom to enter the community for deliveries without them knowing the my passwords, while restricting their access to only delivery-related activities and preventing access to other secured areas that require a password?</p>
<h3 id="Authorization-mechanism"><a href="#Authorization-mechanism" class="headerlink" title="Authorization mechanism"></a>Authorization mechanism</h3><p>As a result, I have devised an authorization mechanism:</p>
<p>Step 1: Under the password input panel of the access control system, add a button called “Request Authorization.” Delivery personnel need to press this button to apply for access authorization.</p>
<p>Step 2: After pressing the button, a dialogue box will appear on the my phone, indicating that someone is requesting authorization. The system will also display the name, employee ID, and the delivery company the personnel belongs to.</p>
<p>Upon verifying the request, I can click the button to inform the access control system that I agree to grant them access to the community.</p>
<p>Step 3: Once the access control system receives my confirmation, it will display an access token to the delivery personnel. The token is a unique set of numbers similar to a password, valid for a short period (e.g., seven days).</p>
<p>Step 4: The delivery personnel will input the access token into the access control system to enter the community.</p>
<p>Some may wonder why not remotely open the door for the delivery personnel instead of generating a unique access token for them. The reason for this is that delivery personnel may come to make deliveries daily, and the next day, they can reuse the same access token.</p>
<h3 id="Difference-between-token-and-password"><a href="#Difference-between-token-and-password" class="headerlink" title="Difference between token and password"></a>Difference between token and password</h3><p>(1) Tokens are <code>short-term</code> and expire automatically, whereas passwords tend to be <code>long-term</code> unless actively changed by the user.</p>
<p>(2) Tokens <code>can be revoked</code> by the data owner <code>at any time</code>, immediately becoming invalid. In the example above, the homeowner could revoke the courier’s token access. Passwords generally cannot be rescinded by others.</p>
<p>(3) Tokens have <code>scoped permissions</code>, such as only granting access through Gate. For web services, a read-only token is more secure than read/write. Passwords usually convey full permissions.</p>
<p>In summary, tokens and passwords serve similar roles in granting system access, but tokens provide more granular control and can be revoked remotely.</p>
<h2 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h2><table>
<thead>
<tr>
<th>name</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>Third-Party Application</td>
<td>Obtains user information. The delivery personnel acts as a third-party application and seeks to pass through the access control system to enter the residential community.</td>
</tr>
<tr>
<td>Resource Owner</td>
<td>The individual who owns or possesses the resources, and in this context, it refers to the user. The term “resources” denotes various URL interfaces and data requested.</td>
</tr>
<tr>
<td>Authorization Server</td>
<td>The server responsible for authentication, specifically designated by the service provider (e.g., the community) for handling the authentication process.</td>
</tr>
<tr>
<td>Resource Server</td>
<td>The server where the service provider stores user resources. It can be the same server as the authorization server or a different one.</td>
</tr>
<tr>
<td>Access Token</td>
<td>A token granted to the client for accessing resources from the Resource Server (API). Access tokens are typically short-lived and have a limited duration.</td>
</tr>
</tbody></table>
<h1 id="Authorization-flow"><a href="#Authorization-flow" class="headerlink" title="Authorization flow"></a>Authorization flow</h1><p><img data-src="/uploads/in-post/security/OAuth-workflow.png" alt="OAuth workflow"></p>
<p>The workflow of OAuth 2.0 is shown in the following diagram, excerpted from RFC 6749.</p>
<p><img data-src="/uploads/in-post/security/OAuth-workflow-table.png" alt="OAuth workflow table"></p>
<p>(A) After the user opens the client application, the client requests authorization from the user.</p>
<p>(B) The user agrees to grant authorization to the client.</p>
<p>(C) The client utilizes the obtained authorization to apply for an access token from the authorization server.</p>
<p>(D) After authenticating the client, the authorization server confirms the accuracy and grants the access token.</p>
<p>(E) The client employs the access token to request resources from the resource server.</p>
<p>(F) The resource server verifies the access token’s validity and grants access to the resources to the client.</p>
<h1 id="Authorization-mode"><a href="#Authorization-mode" class="headerlink" title="Authorization mode"></a>Authorization mode</h1><p>There are four types of authorization modes.</p>
<ol>
<li>Authorization code</li>
<li>Implicit</li>
<li>Resource owner password credentials</li>
<li>Client credentials</li>
</ol>
<h2 id="Authorization-code"><a href="#Authorization-code" class="headerlink" title="Authorization code"></a>Authorization code</h2><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><p><em><strong>The authorization code grant involves the client requesting an authorization code first, then using that code to obtain a token</strong></em>.</p>
<p>This is the most common and secure workflow, suitable for web apps that have a backend. The authorization code is passed via the frontend, while the token stored in the backend. All communication with the resource server also happens in the backend. This separation of frontend and backend prevents the token from leaking.</p>
<h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p><img data-src="/uploads/in-post/security/authorization-code-workflow-table.png" alt="authorization code workflow table"></p>
<p>(A) The user visits the client, which then redirects the user to the authorization server.</p>
<p>(B) The user decides whether to grant authorization to the client.</p>
<p>(C) Assuming authorization is granted, the authorization server redirects the user back to the client’s pre-specified “redirection URI”, along with an authorization code.</p>
<p>(D) The client receives the authorization code, and sends it along with the original “redirection URI” to the authorization server to request a token. This step happens on the backend server of the client, invisible to the user.</p>
<p>(E) The authorization server verifies the authorization code and redirection URI, and if valid, sends an access token and refresh token to the client.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Website A want to get authorization from Website B</p>
<h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>Website A provides a link which, when clicked by the user, redirects them to Website B to authorize Website A to access the user’s data. Below is an example redirect link from Website A to Website B:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/authorize?</span><br><span class="line">  response_type=code&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  redirect_uri=CALLBACK_URL&amp;</span><br><span class="line">  scope=read</span><br></pre></td></tr></table></figure>

<p>In the above URL, the <code>response_type</code> parameter indicates a request for an authorization code (<code>code</code>). The <code>client_id</code> parameter informs Website B of the identity of the requesting party. The <code>redirect_uri</code> parameter specifies where Website B should redirect after accepting or denying the request. Finally, the <code>scope</code> parameter indicates the requested scope of authorization (in this case, read-only access).</p>
<p><img data-src="/uploads/in-post/security/get-authorization-code.png" alt="get authorization code"></p>
<h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>After the user is redirected, Website B prompts the user to log in and then asks if they consent to authorize Website A. The user agrees, at which point Website B redirects back to the URL specified in the <code>redirect_uri</code> parameter, passing back an authorization code, as follows:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://a.com/callback?code=AUTHORIZATION_CODE</span><br></pre></td></tr></table></figure>

<p>In the URL above, the code parameter represents the authorization code.<br><img data-src="/uploads/in-post/security/return-authorization-code.png" alt="return authorization code"></p>
<h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>Once Website A has obtained the authorization code, it can then make a request to Website B’s backend for a token.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/token?</span><br><span class="line"> client_id=CLIENT_ID&amp;</span><br><span class="line"> client_secret=CLIENT_SECRET&amp;</span><br><span class="line"> grant_type=authorization_code&amp;</span><br><span class="line"> code=AUTHORIZATION_CODE&amp;</span><br><span class="line"> redirect_uri=CALLBACK_URL</span><br></pre></td></tr></table></figure>

<p>In the URL above, the <code>client_id</code> and <code>client_secret</code> parameters allow Website B to verify Website A’s identity (the <code>client_secret</code> parameter is confidential and can only be used in backend requests), the <code>grant_type</code> parameter with a value of <code>AUTHORIZATION_CODE</code> indicates that authorization is via an authorization code, the <code>code</code> parameter is the authorization code obtained in the previous step, and the <code>redirect_uri</code> parameter is the callback URL after the token is issued.</p>
<p><img data-src="/uploads/in-post/security/get-authorization-token.png" alt="get authorization token"></p>
<h4 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h4><p>After receiving the request, Website B issues a token. Specifically, it sends a JSON payload to the URL specified in <code>redirect_uri</code>.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,</span><br><span class="line">  &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;:2592000,</span><br><span class="line">  &quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;,</span><br><span class="line">  &quot;scope&quot;:&quot;read&quot;,</span><br><span class="line">  &quot;uid&quot;:100101,</span><br><span class="line">  &quot;info&quot;:&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In the JSON payload above, the <code>access_token</code> field contains the issued token that Website A receives in its backend.</p>
<p><img data-src="/uploads/in-post/security/return-authorization-token.png" alt="return authorization token"></p>
<h2 id="Implicit"><a href="#Implicit" class="headerlink" title="Implicit"></a>Implicit</h2><h3 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h3><p>Some web applications are purely frontend without a backend. In these cases, the above method cannot be used and the token must be stored in the frontend. <em><strong>RFC 6749 specifies a second approach that allows tokens to be issued directly to the frontend. Since this method lacks the intermediate authorization code step, it is referred to as the (authorization code) “implicit” flow.</strong></em></p>
<h3 id="Workflow-1"><a href="#Workflow-1" class="headerlink" title="Workflow"></a>Workflow</h3><p><img data-src="/uploads/in-post/security/implicit-workflow-table.png" alt="implicit workflow table"></p>
<p>(A) The client directs the user to the authorization server.</p>
<p>(B) The user decides whether to grant the client authorization.</p>
<p>(C) Assuming authorization is granted, the authorization server redirects the user to the “redirection URI” specified by the client, with an access token embedded in the Hash portion of the URI.</p>
<p>(D) The browser makes a request to the resource server without including the Hash value received in the previous step.</p>
<p>(E) The resource server returns a web page containing code that can extract the token from the Hash value.</p>
<p>(F) The browser executes the script obtained in the previous step to retrieve the token from the Hash.</p>
<p>(G) The browser passes the token to the client.</p>
<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Website A want to get authorization from Website B</p>
<h4 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>Website A provides a link asking the user to redirect to Website B to authorize Website A to access the user’s data.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/authorize?</span><br><span class="line">  response_type=token&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  redirect_uri=CALLBACK_URL&amp;</span><br><span class="line">  scope=read</span><br></pre></td></tr></table></figure>

<p>In the URL above, the <code>response_type</code> parameter with a value of <code>token</code> indicates a request to return the token directly.</p>
<h4 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h4><p>The user is redirected to Website B and after logging in, consents to authorize Website A. Website B then redirects back to the URL specified in the <code>redirect_uri</code> parameter, passing the token to Website A as a URL parameter.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://a.com/callback#token=ACCESS_TOKEN</span><br></pre></td></tr></table></figure>

<p>In the URL above, the <code>token</code> parameter represents the token that Website A receives directly in its frontend.</p>
<p>Note that the token is placed in the URL fragment instead of the query string because OAuth 2.0 allows redirect URIs using the HTTP protocol, which carries the risk of a “man-in-the-middle” attack. By placing the token in the fragment, it is not sent to the server on redirect, reducing the risk of token exposure.</p>
<p><img data-src="/uploads/in-post/security/implicit-workflow.png" alt="implicit workflow"></p>
<p>This approach of directly transmitting tokens to the frontend is highly insecure. Therefore, it should only be used in scenarios with low security requirements. The token lifetime must be extremely short, usually valid only for the duration of a session. The token becomes invalid when the browser is closed.</p>
<h2 id="Resource-owner-password-credentials"><a href="#Resource-owner-password-credentials" class="headerlink" title="Resource owner password credentials"></a>Resource owner password credentials</h2><h3 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h3><p><em><strong>RFC 6749 also allows users to directly provide their username and password to highly trusted applications. The application then uses those credentials to obtain a token. This approach is referred to as the “password” flow.</strong></em></p>
<h3 id="Workflow-2"><a href="#Workflow-2" class="headerlink" title="Workflow"></a>Workflow</h3><p><img data-src="/uploads/in-post/security/password-credentials-workflow.png" alt="password credentials workflow"></p>
<p>(A) The user provides their username and password to the client.</p>
<p>(B) The client sends the username and password to the authorization server and requests a token.</p>
<p>(C) After validating the credentials, the authorization server returns an access token to the client.</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><p>Website A want to get authorization from Website B</p>
<h4 id="Step-1-2"><a href="#Step-1-2" class="headerlink" title="Step 1"></a>Step 1</h4><p>Website A asks the user to provide their username and password for Website B. After obtaining the credentials, Website A makes a direct request to Website B for a token.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://oauth.b.com/token?</span><br><span class="line">  grant_type=password&amp;</span><br><span class="line">  username=USERNAME&amp;</span><br><span class="line">  password=PASSWORD&amp;</span><br><span class="line">  client_id=CLIENT_ID</span><br></pre></td></tr></table></figure>

<p>In the above URL, the <code>grant_type</code> parameter indicates the authorization method. <code>password</code> signifies the “password” flow, while <code>username</code> and <code>password</code> provide the credentials for Website B.</p>
<h4 id="Step-2-2"><a href="#Step-2-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>After Website B verifies the credentials, it directly returns a token without a redirect. Instead, the token is included in a JSON payload as part of the HTTP response for Website A to retrieve.</p>
<p>This approach requires users to disclose their username/password, which clearly poses significant risks. As such, it should only be used when other authorization methods are unavailable and limited to highly trusted applications.</p>
<h2 id="Client-credentials"><a href="#Client-credentials" class="headerlink" title="Client credentials"></a>Client credentials</h2><h3 id="Overview-4"><a href="#Overview-4" class="headerlink" title="Overview"></a>Overview</h3><p>The client credentials grant refers to the client authenticating directly with the service provider on its own behalf, rather than on behalf of a user. Strictly speaking, this is outside the scope of authorization that OAuth is designed to provide. With this grant type, users register directly with the client, which then requests services from the service provider under its own credentials, rather than via delegation through authorization.</p>
<h3 id="Workflow-3"><a href="#Workflow-3" class="headerlink" title="Workflow"></a>Workflow</h3><p><img data-src="/uploads/in-post/security/client-credentials-workflow.png" alt="client credentials workflow"></p>
<p>(A) The client authenticates with the authorization server and requests an access token.</p>
<p>(B) After validating the credentials, the authorization server returns an access token to the client.</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h3><p>Website A want to get authorization from Website B</p>
<h4 id="Step-1-3"><a href="#Step-1-3" class="headerlink" title="Step 1"></a>Step 1</h4><p>Application A makes a request to B through the command line.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://oauth.b.com/token?</span><br><span class="line">  grant_type=client_credentials&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  client_secret=CLIENT_SECRET</span><br></pre></td></tr></table></figure>

<p>In the URL above, the grant_type parameter set to client_credentials signifies the client credentials flow is in use. The client_id and client_secret parameters allow Application B to verify Application A’s identity.</p>
<h4 id="Step-2-3"><a href="#Step-2-3" class="headerlink" title="Step 2"></a>Step 2</h4><p>After verifying the credentials, Website B directly returns a token.</p>
<p>The token provided through this method pertains to the client application rather than a user. This means the same token may be shared across multiple users.</p>
<h2 id="Refresh-token"><a href="#Refresh-token" class="headerlink" title="Refresh token"></a>Refresh token</h2><p>Once a token expires, forcing the user to repeat the entire flow to acquire a new one would likely create a poor experience and is unnecessary. OAuth 2.0 allows clients to automatically refresh tokens.</p>
<p>The approach is for Website B to issue two tokens at the time of authorization - one for data access and a second to refresh it (the refresh_token field). Before expiration, the client uses the refresh token to request an updated access token.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/token?</span><br><span class="line">  grant_type=refresh_token&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  client_secret=CLIENT_SECRET&amp;</span><br><span class="line">  refresh_token=REFRESH_TOKEN</span><br></pre></td></tr></table></figure>

<p>In the URL above, the <code>grant_type</code> parameter set to <code>refresh_token</code> signifies this is a request to refresh the token. The <code>client_id</code> and <code>client_secret</code> parameters are used to verify identity, while the <code>refresh_token</code> parameter provides the token meant for this purpose.</p>
<p>After Website B confirms the request is valid, it issues a new access token.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 简析</title>
    <url>/2021/06/15/2021-06-15-redis-introduction/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是-Redis"><a href="#什么是-Redis" class="headerlink" title="什么是 Redis"></a>什么是 Redis</h2><p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。</p>
<p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对 (Key-Value) 存储数据库，并提供多种语言的 API。</p>
<p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串 (String)、哈希 (Hash)、列表 (list)、集合 (sets) 和有序集合 (sorted sets) 等类型。</p>
<p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p>
<p>Redis 与其他 key-value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</li>
<li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li>
</ul>
<span id="more"></span>
<h2 id="Redis-特性"><a href="#Redis-特性" class="headerlink" title="Redis 特性"></a>Redis 特性</h2><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><p>正常情况下，Redis 执行命令的速度非常快，官方给出的数字是读写性能可以达到 10 万/秒，当然这也取决于机器的性能，但这里先不讨论机器性能上的差异，只分析一下是什么造就了 Redis 除此之快的速度，可以大致归纳为以下四点：</p>
<ul>
<li>Redis 的所有数据都是存放在内存中的，表 1-1 是谷歌公司 2009 年给出的各层级硬件执行速度，所以把数据放在内存中是 Redis 速度快的<strong>最主要原因</strong>。</li>
<li>Redis 是用 C 语言实现的，一般来说 C 语言实现的程序“距离”操作系统更近，执行速度相对会更快。</li>
<li>Redis 使用了<strong>单线程架构</strong>，预防了多线程可能产生的竞争问题和线程切换开销。使用多路 I/O 复用模型，非阻塞 IO。</li>
<li>作者对于 Redis 源代码可以说是精打细磨，数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的。</li>
</ul>
<p>表 1-1<br><img data-src="/uploads/in-post/cache/hardware_speed.png"></p>
<h3 id="基于键值对的数据结构服务器"><a href="#基于键值对的数据结构服务器" class="headerlink" title="基于键值对的数据结构服务器"></a>基于键值对的数据结构服务器</h3><p>几乎所有的编程语言都提供了类似字典的功能，例如 Java 里的 map、Python 里的 dict，类似于这种组织数据的方式叫作基于键值的方式，与很多键值对数据库不同的是，Redis 中的值不仅可以是字符串，而且还可以是具体的数据结构，这样不仅能便于在许多应用场景的开发，同时也能够提高开发效率。Redis 的全称是 REmote Dictionary Server，它主要提供了 5 种数据结构：字符串、哈希、列表、集合、有序集合，同时在字符串的基础之上演变出了位图（Bitmaps）和 HyperLogLog 两种神奇的“数据结构”，并且随着 LBS（Location Based Service，基于位置服务）的不断发展，Redis3.2 版本中加入有关 GEO（地理信息定位）的功能</p>
<h3 id="丰富的功能"><a href="#丰富的功能" class="headerlink" title="丰富的功能"></a>丰富的功能</h3><p>除了 5 种数据结构，Redis 还提供了许多额外的功能：</p>
<ul>
<li>提供了键过期功能，可以用来实现缓存。</li>
<li>提供了发布订阅功能，可以用来实现消息系统。</li>
<li>支持 Lua 脚本功能，可以利用 Lua 创造出新的 Redis 命令。</li>
<li>提供了简单的事务功能，能在一定程度上保证事务特性。</li>
<li>提供了流水线（Pipeline）功能，这样客户端能将一批命令一次性传到 Redis，减少了网络的开销。</li>
</ul>
<h3 id="简单稳定"><a href="#简单稳定" class="headerlink" title="简单稳定"></a>简单稳定</h3><p>Redis 的简单主要表现在三个方面。首先，Redis 的源码很少，早期版本的代码只有 2 万行左右，3.0 版本以后由于添加了集群特性，代码增至 5 万行左右，相对于很多 NoSQL 数据库来说代码量相对要少很多，也就意味着普通的开发和运维人员完全可以“吃透”它。其次，Redis 使用单线程模型，这样不仅使得 Redis 服务端处理模型变得简单，而且也使得客户端开发变得简单。最后，Redis 不需要依赖于操作系统中的类库（例如 Memcache 需要依赖 libevent 这样的系统类库），Redis 自己实现了事件处理的相关功能。</p>
<h3 id="客户端语言多"><a href="#客户端语言多" class="headerlink" title="客户端语言多"></a>客户端语言多</h3><p>Redis 提供了简单的 TCP 通信协议，很多编程语言可以很方便地接入到 Redis，并且由于 Redis 受到社区和各大公司的广泛认可，所以支持 Redis 的客户端语言也非常多，几乎涵盖了主流的编程语言，例如 Java、PHP、Python、C、C++、Nodejs</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>通常看，将数据放在内存中是不安全的，一旦发生断电或者机器故障，重要的数据可能就会丢失，因此 Redis 提供了两种持久化方式：RDB 和 AOF，即可以用两种策略将内存的数据保存到硬盘中，这样就保证了数据的可持久性<br><img data-src="/uploads/in-post/cache/redis_duration.jpg"></p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>Redis 提供了复制功能，实现了多个相同数据的 Redis 副本，复制功能是分布式 Redis 的基础<br><img data-src="/uploads/in-post/cache/redis_master_slave_copy.jpg"></p>
<h3 id="高可用和分布式"><a href="#高可用和分布式" class="headerlink" title="高可用和分布式"></a>高可用和分布式</h3><p>Redis 从 2.8 版本正式提供了高可用实现 Redis Sentinel，它能够保证 Redis 节点的故障发现和故障自动转移。Redis 从 3.0 版本正式提供了分布式实现 Redis Cluster，它是 Redis 真正的分布式实现，提供了高可用、读写和容量的扩展性。</p>
<h1 id="Redis-使用场景"><a href="#Redis-使用场景" class="headerlink" title="Redis 使用场景"></a>Redis 使用场景</h1><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><p>Redis 主要有 5 种数据类型，包括 String，List，Set，Zset，Hash，满足大部分的使用要求</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">可以存储的值</th>
<th align="center">操作</th>
<th align="center">应用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">STRING</td>
<td align="center">字符串、整数或者浮点数</td>
<td align="center">对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作</td>
<td align="center">做简单的键值对缓存</td>
</tr>
<tr>
<td align="center">LIST</td>
<td align="center">列表</td>
<td align="center">从两端压入或者弹出元素对单个或者多个元素进行修剪，只保留一个范围内的元素</td>
<td align="center">存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据</td>
</tr>
<tr>
<td align="center">SET</td>
<td align="center">无序集合</td>
<td align="center">添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素</td>
<td align="center">交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集</td>
</tr>
<tr>
<td align="center">HASH</td>
<td align="center">包含键值对的无序散列表</td>
<td align="center">添加、获取、移除单个键值对获取所有键值对检查某个键是否存在</td>
<td align="center">结构化的数据，比如一个对象</td>
</tr>
<tr>
<td align="center">ZSET</td>
<td align="center">有序集合</td>
<td align="center">添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名</td>
<td align="center">去重但可以排序，如获取排名前几名的用户</td>
</tr>
</tbody></table>
<h2 id="Redis-可以用于哪些场景"><a href="#Redis-可以用于哪些场景" class="headerlink" title="Redis 可以用于哪些场景"></a>Redis 可以用于哪些场景</h2><ol>
<li>缓存<br>缓存机制几乎在所有的大型网站都有使用，合理地使用缓存不仅可以加快数据的访问速度，而且能够有效地降低后端数据源的压力。Redis 提供了键值过期时间设置，并且也提供了灵活控制最大内存和内存溢出后的淘汰策略。</li>
<li>排行榜系统<br>排行榜系统几乎存在于所有的网站，例如按照热度排名的排行榜，按照发布时间的排行榜，按照各种复杂维度计算出的排行榜，Redis 提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。</li>
<li>计数器应用<br>计数器在网站中的作用至关重要，例如视频网站有播放数、电商网站有浏览数，为了保证数据的实时性，每一次播放和浏览都要做加 1 的操作，如果并发量很大对于传统关系型数据的性能是一种挑战。Redis 天然支持计数功能而且计数的性能也非常好，可以说是计数器系统的重要选择。</li>
<li>社交网络<br>赞/踩、粉丝、共同好友/喜好、推送、下拉刷新等是社交网站的必备功能，由于社交网站访问量通常比较大，而且传统的关系型数据不太适合保存这种类型的数据，Redis 提供的数据结构可以相对比较容易地实现这些功能。</li>
<li>消息队列系统<br>消息队列系统可以说是一个大型网站的必备基础组件，因为其具有业务解耦、非实时业务削峰等特性。Redis 提供了发布订阅功能和阻塞队列的功能，虽然和专业的消息队列比还不够足够强大，但是对于一般的消息队列功能基本可以满足。</li>
<li>分布式锁<br>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</li>
</ol>
<h2 id="Redis-不能用于哪些场景"><a href="#Redis-不能用于哪些场景" class="headerlink" title="Redis 不能用于哪些场景"></a>Redis 不能用于哪些场景</h2><h3 id="数据规模过大"><a href="#数据规模过大" class="headerlink" title="数据规模过大"></a>数据规模过大</h3><p>站在数据规模的角度看，数据可以分为大规模数据和小规模数据，我们知道 Redis 的数据是存放在内存中的，虽然现在内存已经足够便宜，但是如果数据量非常大，例如每天有几亿的用户行为数据，使用 Redis 来存储的话，基本上是个无底洞，经济成本相当的高。</p>
<h3 id="冷数据存储"><a href="#冷数据存储" class="headerlink" title="冷数据存储"></a>冷数据存储</h3><p>站在数据冷热的角度看，数据分为热数据和冷数据，热数据通常是指需要频繁操作的数据，反之为冷数据，如果将冷数据放在 Redis 中，基本上是对于内存的一种浪费</p>
<h1 id="持久化-1"><a href="#持久化-1" class="headerlink" title="持久化"></a>持久化</h1><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p>
<p>Redis 支持 RDB 和 AOF 两种持久化机制</p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB 持久化是把当前进程数据生成快照保存到硬盘的过程，触发 RDB 持久化过程分为手动触发和自动触发。</p>
<h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>手动触发分别对应 save 和 bgsave 命令：</p>
<ul>
<li>save 命令：阻塞当前 Redis 服务器，直到 RDB 过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。</li>
<li>bgsave 命令：Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。</li>
</ul>
<h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p>Redis 内部还存在自动触发 RDB 的持久化机制，例如以下场景：</p>
<ol>
<li>使用 save 相关配置，如”save m n”。表示 m 秒内数据集存在 n 次修改时，自动触发 bgsave。</li>
<li>如果从节点执行全量复制操作，主节点自动执行 bgsave 生成 RDB 文件并发送给从节点。</li>
<li>执行 debug reload 命令重新加载 Redis 时，也会自动触发 save 操作。</li>
<li>默认情况下执行 shutdown 命令时，如果没有开启 AOF 持久化功能则自动执行 bgsave。</li>
</ol>
<h3 id="bgsave-执行流程"><a href="#bgsave-执行流程" class="headerlink" title="bgsave 执行流程"></a>bgsave 执行流程</h3><p><img data-src="/uploads/in-post/cache/redis_bgsave.jpg"></p>
<ol>
<li>执行 bgsave 命令，Redis 父进程判断当前是否存在正在执行的子进程，如 RDB/AOF 子进程，如果存在 bgsave 命令直接返回。</li>
<li>父进程执行 fork 操作创建子进程，fork 操作过程中父进程会阻塞，通过 info stats 命令查看 latest_fork_usec 选项，可以获取最近一个 fork 操作的耗时，单位为微秒。</li>
<li>父进程 fork 完成后，bgsave 命令返回“Background saving started”信息并不再阻塞父进程，可以继续响应其他命令。</li>
<li>子进程创建 RDB 文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行 lastsave 命令可以获取最后一次生成 RDB 的时间，对应 info 统计的 rdb_last_save_time 选项。</li>
<li>进程发送信号给父进程表示完成，父进程更新统计信息，具体见 info Persistence 下的 rdb_* 相关选项。</li>
</ol>
<h3 id="RDB-的优缺点"><a href="#RDB-的优缺点" class="headerlink" title="RDB 的优缺点"></a>RDB 的优缺点</h3><h4 id="RDB-的优点："><a href="#RDB-的优点：" class="headerlink" title="RDB 的优点："></a>RDB 的优点：</h4><ul>
<li>RDB 是一个紧凑压缩的二进制文件，代表 Redis 在某个时间点上的数据快照。非常适用于备份，全量复制等场景。比如每 6 小时执行 bgsave 备份，并把 RDB 文件拷贝到远程机器或者文件系统中（如 hdfs），用于灾难恢复。</li>
<li>Redis 加载 RDB 恢复数据远远快于 AOF 的方式。</li>
</ul>
<h4 id="RDB-的缺点："><a href="#RDB-的缺点：" class="headerlink" title="RDB 的缺点："></a>RDB 的缺点：</h4><ul>
<li>RDB 方式数据没办法做到实时持久化/秒级持久化。因为 bgsave 每次运行都要执行 fork 操作创建子进程，属于重量级操作，频繁执行成本过高。</li>
<li>RDB 文件使用特定二进制格式保存，Redis 版本演进过程中有多个格式的 RDB 版本，存在老版本 Redis 服务无法兼容新版 RDB 格式的问题。</li>
</ul>
<p>针对 RDB 不适合实时持久化的问题，Redis 提供了 AOF 持久化方式来解决。</p>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF（append only file）持久化：以独立日志的方式记录每次写命令，重启时再重新执行 AOF 文件中的命令达到恢复数据的目的。AOF 的主要作用是解决了数据持久化的实时性，目前已经是 Redis 持久化的主流方式。</p>
<p>AOF 的工作流程操作：命令写入（append）、文件同步（sync）、文件重写（rewrite）、重启加载（load）<br><img data-src="/uploads/in-post/cache/redis_aof_process.jpg"></p>
<p>流程如下：</p>
<ol>
<li>所有的写入命令会追加到 aof_buf（缓冲区）中。</li>
<li>AOF 缓冲区根据对应的策略向硬盘做同步操作。</li>
<li>随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</li>
<li>当 Redis 服务器重启时，可以加载 AOF 文件进行数据恢复。</li>
</ol>
<h3 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h3><p>随着命令不断写入 AOF，文件会越来越大，为了解决这个问题，Redis 引入 AOF 重写机制压缩文件体积。AOF 文件重写是把 Redis 进程内的数据转化为写命令同步到新 AOF 文件的过程。</p>
<p>重写后的 AOF 文件为什么可以变小？有如下原因：</p>
<ol>
<li>进程内已经超时的数据不再写入文件。</li>
<li>旧的 AOF 文件含有无效命令，如 del key1、hdel key2、srem keys、seta111、set a222 等。重写使用进程内数据直接生成，这样新的 AOF 文件只保留最终数据的写入命令。</li>
<li>多条写命令可以合并为一个，如：lpush list a、lpush list b、lpush list c 可以转化为：lpush list a b c。</li>
</ol>
<p>当触发 AOF 重写时，流程如下：<br><img data-src="/uploads/in-post/cache/redis_aof_rewrite.jpg"></p>
<ol>
<li>执行 AOF 重写请求。</li>
<li>父进程执行 fork 创建子进程，开销等同于 bgsave 过程。</li>
<li>主进程 fork 操作完成后，继续响应其他命令。所有修改命令依然写入 AOF 缓冲区并根据 appendfsync 策略同步到硬盘，保证原有 AOF 机制正确性。由于 fork 操作运用写时复制技术，子进程只能共享 fork 操作时的内存数据。由于父进程依然响应命令，Redis 使用“AOF 重写缓冲区”保存这部分新数据，防止新 AOF 文件生成期间丢失这部分数据。</li>
<li>子进程根据内存快照，按照命令合并规则写入到新的 AOF 文件。每次批量写入硬盘数据量由配置 aof-rewrite-incremental-fsync 控制，默认为 32MB，防止单次刷盘数据过多造成硬盘阻塞。</li>
<li>新 AOF 文件写入完成后，子进程发送信号给父进程，父进程更新统计信息，具体见 info persistence 下的 aof_* 相关统计。父进程把 AOF 重写缓冲区的数据写入到新的 AOF 文件。使用新 AOF 文件替换老文件，完成 AOF 重写。</li>
</ol>
<h3 id="重启加载"><a href="#重启加载" class="headerlink" title="重启加载"></a>重启加载</h3><p>AOF 和 RDB 文件都可以用于服务器重启时的数据恢复。下图表示 Redis 持久化文件加载流程。<br><img data-src="/uploads/in-post/cache/redis_reload.jpg"></p>
<ol>
<li>AOF 持久化开启且存在 AOF 文件时，优先加载 AOF 文件。</li>
<li>AOF 关闭或者 AOF 文件不存在时，加载 RDB 文件。</li>
<li>加载 AOF/RDB 文件成功后，Redis 启动成功。</li>
<li>AOF/RDB 文件存在错误时，Redis 启动失败并打印错误信息。</li>
</ol>
<h3 id="AOF-的优缺点"><a href="#AOF-的优缺点" class="headerlink" title="AOF 的优缺点"></a>AOF 的优缺点</h3><h4 id="AOF-的优点"><a href="#AOF-的优点" class="headerlink" title="AOF 的优点"></a>AOF 的优点</h4><ol>
<li>AOF 比 RDB 可靠。你可以设置不同的 fsync 策略：no、everysec 和 always。默认是 everysec，在这种配置下，redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据。</li>
<li>AOF 文件是一个纯追加的日志文件。即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机等等）， 我们也可以使用 redis-check-aof 工具也可以轻易地修复这种问题。</li>
<li>当 AOF 文件太大时，Redis 会自动在后台进行重写：重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。整个重写是绝对安全，因为重写是在一个新的文件上进行，同时 Redis 会继续往旧的文件追加数据。当新文件重写完毕，Redis 会把新旧文件进行切换，然后开始把数据写到新文件上。</li>
<li>AOF 文件有序地保存了对数据库执行的所有写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。如果你不小心执行了 FLUSHALL 命令把所有数据刷掉了，但只要 AOF 文件没有被重写，那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>
</ol>
<h4 id="AOF-的缺点"><a href="#AOF-的缺点" class="headerlink" title="AOF 的缺点"></a>AOF 的缺点</h4><ol>
<li>对于相同的数据集，AOF 文件的大小一般会比 RDB 文件大。</li>
<li>根据所使用的 fsync 策略，AOF 的速度可能会比 RDB 慢。通常 fsync 设置为每秒一次就能获得比较高的性能，而关闭 fsync 可以让 AOF 的速度和 RDB 一样快。</li>
</ol>
<h1 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h1><p>在分布式系统中为了解决单点问题，通常会把数据复制多个副本部署到其他机器，满足故障恢复和负载均衡等需求。Redis 也是如此，它为我们提供了复制功能，实现了相同数据的多个 Redis 副本。</p>
<p>参与复制的 Redis 实例划分为主节点（master）和从节点（slave）。默认情况下，Redis 都是主节点。每个从节点只能有一个主节点，而主节点可以同时具有多个从节点。复制的数据流是单向的，只能由主节点复制到从节点。</p>
<h2 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h2><p>Redis 的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。</p>
<h3 id="一主一从结构"><a href="#一主一从结构" class="headerlink" title="一主一从结构"></a>一主一从结构</h3><p>一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持<br><img data-src="/uploads/in-post/cache/redis_one_master_slave.jpg"></p>
<h3 id="一主多从结构"><a href="#一主多从结构" class="headerlink" title="一主多从结构"></a>一主多从结构</h3><p>一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离。<br><img data-src="/uploads/in-post/cache/redis_one_master_multi_slave.jpg"></p>
<p>对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。</p>
<p>对于写并发量较高的场景，多个从节点会导致主节点写命令的多次发送从而过度消耗网络带宽，同时也加重了主节点的负载影响服务稳定性。</p>
<h3 id="树状主从结构"><a href="#树状主从结构" class="headerlink" title="树状主从结构"></a>树状主从结构</h3><p>树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。<br><img data-src="/uploads/in-post/cache/redis_tree_master_slave.jpg"></p>
<p>通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。</p>
<p>当主节点需要挂载多个从节点时为了避免对主节点的性能干扰，可以采用树状主从结构降低主节点压力。</p>
<h2 id="复制流程"><a href="#复制流程" class="headerlink" title="复制流程"></a>复制流程</h2><p><img data-src="/uploads/in-post/cache/redis_copy.jpg"></p>
<p>从图中可以看出复制过程大致分为 6 个过程：</p>
<ol>
<li>保存主节点（master）信息。</li>
<li>从节点（slave）内部通过每秒运行的定时任务维护复制相关逻辑，当定时任务发现存在新的主节点后，会尝试与该节点建立网络连接。</li>
<li>发送 ping 命令。</li>
<li>权限验证。如果主节点设置了 requirepass 参数，则需要密码验证，从节点必须配置 masterauth 参数保证与主节点相同的密码才能通过验证；如果验证失败复制将终止，从节点重新发起复制流程。</li>
<li>同步数据集。主从复制连接正常通信后，对于首次建立复制的场景，主节点会把持有的数据全部发送给从节点，这部分操作是耗时最长的步骤。</li>
<li>命令持续复制。当主节点把当前的数据同步给从节点后，便完成了复制的建立流程。接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。</li>
</ol>
<h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>Redis 在 2.8 及以上版本使用 psync 命令完成主从数据同步，同步过程分为：全量复制和部分复制。</p>
<ul>
<li>全量复制：一般用于初次复制场景，Redis 早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。</li>
<li>部分复制：用于处理在主从复制中因网络闪断等原因造成的数据丢失场景，当从节点再次连上主节点后，如果条件允许，主节点会补发丢失数据给从节点。因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。</li>
</ul>
<p>psync 命令运行需要以下组件支持：</p>
<ul>
<li>主从节点各自复制偏移量。</li>
<li>主节点复制积压缓冲区。</li>
<li>主节点运行 id。</li>
</ul>
<h4 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h4><p>参与复制的主从节点都会维护自身复制偏移量。主节点（master）在处理完写入命令后，会把命令的字节长度做累加记录。</p>
<p>从节点（slave）每秒钟上报自身的复制偏移量给主节点，因此主节点也会保存从节点的复制偏移量。</p>
<p>从节点在接收到主节点发送的命令后，也会累加记录自身的偏移量。<br><img data-src="/uploads/in-post/cache/redis_copy_offset.jpg"></p>
<p>通过对比主从节点的复制偏移量，可以判断主从节点数据是否一致。</p>
<h4 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h4><p>复制积压缓冲区是保存在主节点上的一个固定长度的队列，默认大小为 1MB，当主节点有连接的从节点（slave）时被创建，这时主节点（master）响应写命令时，不但会把命令发送给从节点，还会写入复制积压缓冲区。<br><img data-src="/uploads/in-post/cache/redis_copy_buffer.jpg"></p>
<p>由于缓冲区本质上是先进先出的定长队列，所以能实现保存最近已复制数据的功能，用于部分复制和复制命令丢失的数据补救。</p>
<h4 id="主节点运行-ID"><a href="#主节点运行-ID" class="headerlink" title="主节点运行 ID"></a>主节点运行 ID</h4><p>每个 Redis 节点启动后都会动态分配一个 40 位的十六进制字符串作为运行 ID。运行 ID 的主要作用是用来唯一识别 Redis 节点，比如从节点保存主节点的运行 ID 识别自己正在复制的是哪个主节点。如果只使用 ip+port 的方式识别主节点，那么主节点重启变更了整体数据集（如替换 RDB/AOF 文件），从节点再基于偏移量复制数据将是不安全的，因此当运行 ID 变化后从节点将做全量复制。</p>
<h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p>全量复制是 Redis 最早支持的复制方式，也是主从第一次建立复制时必须经历的阶段。<br><img data-src="/uploads/in-post/cache/redis_all_copy.jpg"></p>
<p>流程说明：</p>
<ol>
<li>发送 psync 命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行 ID，所以发送 psync-1。</li>
<li>主节点根据 psync-1 解析出当前为全量复制，回复 +FULLRESYNC 响应。</li>
<li>从节点接收主节点的响应数据保存运行 ID 和偏移量 offset。</li>
<li>主节点执行 bgsave 保存 RDB 文件到本。</li>
<li>主节点发送 RDB 文件给从节点，从节点把接收的 RDB 文件保存在本地并直接作为从节点的数据文件，接收完 RDB 后从节点打印相关日志。</li>
<li>对于从节点开始接收 RDB 快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完 RDB 文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。</li>
<li>从节点接收完主节点传送来的全部数据后会清空自身旧数据。</li>
<li>从节点清空数据后开始加载 RDB 文件，对于较大的 RDB 文件，这一步操作依然比较耗时，可以通过计算日志之间的时间差来判断加载 RDB 的总耗时。</li>
<li>从节点成功加载完 RDB 后，如果当前节点开启了 AOF 持久化功能，它会立刻做 bgrewriteaof 操作，为了保证全量复制后 AOF 持久化文件立刻可用。</li>
</ol>
<p>通过分析全量复制的所有流程，我们会发现全量复制是一个非常耗时费力的操作。它的时间开销主要包括：</p>
<ul>
<li>主节点 bgsave 时间。</li>
<li>RDB 文件网络传输时间。</li>
<li>从节点清空数据时间。</li>
<li>从节点加载 RDB 的时间。</li>
<li>可能的 AOF 重写时间。</li>
</ul>
<p>正因为全量复制的成本问题，Redis 实现了部分复制功能。</p>
<h3 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h3><p>部分复制主要是 Redis 针对全量复制的过高开销做出的一种优化措施。当从节点（slave）正在复制主节点（master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。补发的这部分数据一般远远小于全量数据，所以开销很小。</p>
<p><img data-src="/uploads/in-post/cache/redis_partial_copy.jpg"></p>
<ol>
<li>当主从节点之间网络出现中断时，如果超过 repl-timeout 时间，主节点会认为从节点故障并中断复制连接。</li>
<li>主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存 1MB。</li>
<li>当主从节点网络恢复后，从节点会再次连上主节点。</li>
<li>当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行 ID。因此会把它们当作 psync 参数发送给主节点，要求进行部分复制操作。</li>
<li>主节点接到 psync 命令后首先核对参数 runId 是否与自身一致，如果一致，说明之前复制的是当前主节点；之后根据参数 offset 在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送 +CONTINUE 响应，表示可以进行部分复制。</li>
<li>主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。</li>
</ol>
<h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>主从节点在建立复制后，它们之间维护着长连接并彼此发送心跳命令。</p>
<p><img data-src="/uploads/in-post/cache/redis_heartbeat.jpg"></p>
<p>主从心跳判断机制：</p>
<ol>
<li>主从节点彼此都有心跳检测机制，各自模拟成对方的客户端进行通信。</li>
<li>主节点默认每隔 10 秒对从节点发送 ping 命令，判断从节点的存活性和连接状态。</li>
<li>从节点在主线程中每隔 1 秒发送 replconf ack {offset} 命令，给主节点上报自身当前的复制偏移量。</li>
</ol>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>Redis 所有的数据都存在内存中，当前内存虽然越来越便宜，但跟廉价的硬盘相比成本还是比较昂贵，因此如何高效利用 Redis 内存非常重要。</p>
<h2 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h2><p>Redis 进程内消耗主要包括：自身内存+对象内存+缓冲内存+内存碎片，其中 Redis 空进程自身内存消耗非常少。<br><img data-src="/uploads/in-post/cache/redis_memory.jpg"></p>
<h3 id="对象内存"><a href="#对象内存" class="headerlink" title="对象内存"></a>对象内存</h3><p>对象内存是 Redis 内存占用最大的一块，存储着用户所有的数据。Redis 所有的数据都采用 key-value 数据类型，每次创建键值对时，至少创建两个类型对象：key 对象和 value 对象。对象内存消耗可以简单理解为 sizeof（keys）+sizeof（values）。</p>
<h3 id="缓冲内存"><a href="#缓冲内存" class="headerlink" title="缓冲内存"></a>缓冲内存</h3><p>缓冲内存主要包括：客户端缓冲、复制积压缓冲区、AOF 缓冲区。</p>
<ul>
<li>客户端缓冲指的是所有接入到 Redis 服务器 TCP 连接的输入输出缓冲。输入缓冲无法控制，最大空间为 1G，如果超过将断开连接。</li>
<li>复制积压缓冲区：Redis 在 2.8 版本之后提供了一个可重用的固定大小缓冲区用于实现部分复制功能，根据 repl-backlog-size 参数控制，默认 1MB。对于复制积压缓冲区整个主节点只有一个，所有的从节点共享此缓冲区，因此可以设置较大的缓冲区空间，如 100MB。</li>
<li>AOF 缓冲区：这部分空间用于在 Redis 重写期间保存最近的写入命令。AOF 缓冲区空间消耗用户无法控制，消耗的内存取决于 AOF 重写时间和写入命令量，这部分空间占用通常很小。</li>
</ul>
<h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>内存分配器为了更好地管理和重复利用内存，分配内存策略一般采用固定范围的内存块进行分配。当存储的数据长短差异较大时，以下场景容易出现高内存碎片问题：</p>
<ul>
<li>频繁做更新操作，例如频繁对已存在的键执行 append、setrange 等更新操作。</li>
<li>大量过期键删除，键对象过期删除后，释放的空间无法得到充分利用，导致碎片率上升。</li>
</ul>
<p>出现高内存碎片问题时常见的解决方式如下：</p>
<ul>
<li>数据对齐：在条件允许的情况下尽量做数据对齐，比如数据尽量采用数字类型或者固定长度字符串等，但是这要视具体的业务而定，有些场景无法做到。</li>
<li>安全重启：重启节点可以做到内存碎片重新整理，因此可以利用高可用架构，如 Sentinel 或 Cluster，将碎片率过高的主节点转换为从节点，进行安全重启。</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>Redis 主要通过控制内存上限和回收策略实现内存管理。</p>
<h3 id="控制内存上限"><a href="#控制内存上限" class="headerlink" title="控制内存上限"></a>控制内存上限</h3><p>Redis 使用 maxmemory 参数限制最大可用内存。限制内存的目的主要有：</p>
<ul>
<li>用于缓存场景，当超出内存上限 maxmemory 时使用 LRU 等删除策略释放空间。</li>
<li>防止所用内存超过服务器物理内存。</li>
</ul>
<h3 id="内存回收策略"><a href="#内存回收策略" class="headerlink" title="内存回收策略"></a>内存回收策略</h3><p>Redis 的内存回收机制主要体现在以下两个方面：</p>
<ul>
<li>删除到达过期时间的键对象。</li>
<li>内存使用达到 maxmemory 上限时触发内存溢出控制策略。</li>
</ul>
<h4 id="删除过期键对象"><a href="#删除过期键对象" class="headerlink" title="删除过期键对象"></a>删除过期键对象</h4><p>Redis 所有的键都可以设置过期属性，内部保存在过期字典中。Redis 采用惰性删除和定时任务删除机制实现过期键的内存回收。</p>
<h5 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h5><p>惰性删除用于当客户端读取带有超时属性的键时，如果已经超过键设置的过期时间，会执行删除操作并返回空，这种策略是出于节省 CPU 成本考虑，不需要单独维护 TTL 链表来处理过期键的删除。但是单独用这种方式存在内存泄露的问题，当过期键一直没有访问将无法得到及时删除，从而导致内存不能及时释放。</p>
<h5 id="定时任务删除"><a href="#定时任务删除" class="headerlink" title="定时任务删除"></a>定时任务删除</h5><p>Redis 内部维护一个定时任务，默认每秒运行 10 次（通过配置 hz 控制）。定时任务中删除过期键逻辑采用了自适应算法，根据键的过期比例、使用快慢两种速率模式回收键。<br><img data-src="/uploads/in-post/cache/redis_cron_delete.jpg"></p>
<p>流程说明：</p>
<ol>
<li>定时任务在每个数据库空间随机检查 20 个键，当发现过期时删除对应的键。</li>
<li>如果超过检查数 25% 的键过期，循环执行回收逻辑直到不足 25% 或运行超时为止，慢模式下超时时间为 25 毫秒。</li>
<li>如果之前回收键逻辑超时，则在 Redis 触发内部事件之前再次以快模式运行回收过期键任务，快模式下超时时间为 1 毫秒且 2 秒内只能运行 1 次。</li>
<li>快慢两种模式内部删除逻辑相同，只是执行的超时时间不同。</li>
</ol>
<h4 id="内存溢出控制策略"><a href="#内存溢出控制策略" class="headerlink" title="内存溢出控制策略"></a>内存溢出控制策略</h4><p>当 Redis 所用内存达到 maxmemory 上限时会触发相应的溢出控制策略。具体策略受 maxmemory-policy 参数控制，Redis 支持 6 种策略，如下所示：</p>
<ol>
<li>noeviction：默认策略，不会删除任何数据，拒绝所有写入操作并返回客户端错误信息（error）OOM command not allowed when used memory，此时 Redis 只响应读操作。</li>
<li>volatile-lru：根据 LRU 算法删除设置了超时属性（expire）的键，直到腾出足够空间为止。如果没有可删除的键对象，回退到 noeviction 策略。</li>
<li>allkeys-lru：根据 LRU 算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</li>
<li>allkeys-random：随机删除所有键，直到腾出足够空间为止。</li>
<li>volatile-random：随机删除过期键，直到腾出足够空间为止。</li>
<li>volatile-ttl：根据键值对象的 ttl 属性，删除最近将要过期数据。如果没有，回退到 noeviction 策略。</li>
</ol>
<p>每次 Redis 执行命令时如果设置了 maxmemory 参数，都会尝试执行回收内存操作。当 Redis 一直工作在内存溢出（used_memory&gt;maxmemory）的状态下且设置非 noeviction 策略时，会频繁地触发回收内存的操作，影响 Redis 服务器的性能。</p>
<p>频繁执行回收内存成本很高，主要包括查找可回收键和删除键的开销，如果当前 Redis 有从节点，回收内存操作对应的删除命令会同步到从节点，导致写放大的问题。建议线上 Redis 内存工作在 maxmemory&gt;used_memory 状态下，避免频繁内存回收开销。</p>
<h2 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h2><p>Redis 存储的所有值对象在内部定义为 redisObject 结构体，内部结构如下：<br><img data-src="/uploads/in-post/cache/redis_object.jpg"></p>
<h3 id="缩减键值对象"><a href="#缩减键值对象" class="headerlink" title="缩减键值对象"></a>缩减键值对象</h3><p>降低 Redis 内存使用最直接的方式就是缩减键（key）和值（value）的长度。</p>
<ul>
<li>key 长度：如在设计键时，在完整描述业务情况下，键值越短越好。如 user：{uid}：friends：notify：{fid}可以简化为 u：{uid}：fs：nt：{fid}。</li>
<li>value 长度：值对象缩减比较复杂，常见需求是把业务对象序列化成二进制数组放入 Redis。首先应该在业务上精简业务对象，去掉不必要的属性避免存储无效数据。其次在序列化工具选择上，应该选择更高效的序列化工具来降低字节数组大小。</li>
</ul>
<h3 id="共享对象池"><a href="#共享对象池" class="headerlink" title="共享对象池"></a>共享对象池</h3><p>共享对象池是指 Redis 内部维护 [0-9999] 的整数对象池。创建大量的整数类型 redisObject 存在内存开销，每个 redisObject 内部结构至少占 16 字节，甚至超过了整数自身空间消耗。所以 Redis 内存维护一个 [0-9999] 的整数对象池，用于节约内存。除了整数值对象，其他类型如 list、hash、set、zset 内部元素也可以使用整数对象池。因此开发中在满足需求的前提下，尽量使用整数对象以节省内存。</p>
<p><strong>注意：当设置 maxmemory 并启用 LRU 相关淘汰策略如：volatile-lru，allkeys-lru 时，Redis 禁止使用共享对象池</strong></p>
<p>原因如下：<br>LRU 算法需要获取对象最后被访问时间，以便淘汰最长未访问数据，每个对象最后访问时间存储在 redisObject 对象的 lru 字段。对象共享意味着多个引用共享同一个 redisObject，这时 lru 字段也会被共享，导致无法获取每个对象的最后访问时间。如果没有设置 maxmemory，直到内存被用尽 Redis 也不会触发内存回收，所以共享对象池可以正常工作。</p>
<h3 id="字符串优化"><a href="#字符串优化" class="headerlink" title="字符串优化"></a>字符串优化</h3><p>字符串对象是 Redis 内部最常用的数据类型。所有的键都是字符串类型，值对象数据除了整数之外都使用字符串存储。</p>
<h4 id="字符串结构"><a href="#字符串结构" class="headerlink" title="字符串结构"></a>字符串结构</h4><p>Redis 没有采用原生 C 语言的字符串类型而是自己实现了字符串结构，内部简单动态字符串（simple dynamic string，SDS）。<br><img data-src="/uploads/in-post/cache/redis_sds.jpg"></p>
<p>Redis 自身实现的字符串结构有如下特点：</p>
<ul>
<li>O（1）时间复杂度获取：字符串长度、已用长度、未用长度。</li>
<li>可用于保存字节数组，支持安全的二进制数据存储。</li>
<li>内部实现空间预分配机制，降低内存再分配次数。</li>
<li>惰性删除机制，字符串缩减后的空间不释放，作为预分配空间保留。</li>
</ul>
<h4 id="字符串重构"><a href="#字符串重构" class="headerlink" title="字符串重构"></a>字符串重构</h4><p>字符串重构：指不一定把每份数据作为字符串整体存储，像 json 这样的数据可以使用 hash 结构，使用二级结构存储也能帮我们节省内存。同时可以使用 hmget、hmset 命令支持字段的部分读取修改，而不用每次整体存取。</p>
<h3 id="编码优化"><a href="#编码优化" class="headerlink" title="编码优化"></a>编码优化</h3><p>Redis 对外提供了 string、list、hash、set、zet 等类型，但是 Redis 内部针对不同类型存在编码的概念，所谓编码就是具体使用哪种底层数据结构来实现。编码不同将直接影响数据的内存占用和读写效率。使用 object encoding {key} 命令获取编码类型。</p>
<p>Redis 针对每种数据类型（type）可以采用至少两种编码方式来实现。<br><img data-src="/uploads/in-post/cache/redis_type_encoding.jpg"></p>
<p>Redis 为什么对一种数据结构实现多种编码方式？</p>
<p>主要原因是 Redis 作者想通过不同编码实现效率和空间的平衡。比如当我们的存储只有 10 个元素的列表，当使用双向链表数据结构时，必然需要维护大量的内部字段如每个元素需要：前置指针，后置指针，数据指针等，造成空间浪费，如果采用连续内存结构的压缩列表（ziplist），将会节省大量内存，而由于数据长度较小，存取操作时间复杂度即使为 O（n2）性能也可满足需求。</p>
<h3 id="控制键的数量"><a href="#控制键的数量" class="headerlink" title="控制键的数量"></a>控制键的数量</h3><p>当使用 Redis 存储大量数据时，通常会存在大量键，过多的键同样会消耗大量内存。对于存储相同的数据内容利用 Redis 的数据结构降低外层键的数量，也可以节省大量内存。</p>
<p>通过在客户端预估键规模，把大量键分组映射到多个 hash 结构中降低键的数量。<br><img data-src="/uploads/in-post/cache/redis_group_hash.jpg"></p>
<p>hash 结构降低键数量分析：</p>
<ul>
<li>根据键规模在客户端通过分组映射到一组 hash 对象中，如存在 100 万个键，可以映射到 1000 个 hash 中，每个 hash 保存 1000 个元素。</li>
<li>hash 的 field 可用于记录原始 key 字符串，方便哈希查找。</li>
<li>hash 的 value 保存原始值对象，确保不要超过 hash-max-ziplist-value 限制。</li>
</ul>
<p>关于 hash 键和 field 键的设计：</p>
<ol>
<li>当键离散度较高时，可以按字符串位截取，把后三位作为哈希的 field，之前部分作为哈希的键。如：key=1948480 哈希 key=group：hash：1948，哈希 field=480。</li>
<li>当键离散度较低时，可以使用哈希算法打散键，如：使 crc32（key）&amp;10000 函数把所有的键映射到“0-9999”整数范围内，哈希 field<br>存储键的原始值。</li>
<li>尽量减少 hash 键和 field 的长度，如使用部分键内容。</li>
</ol>
<p>使用 hash 结构控制键的规模虽然可以大幅降低内存，但同样会带来问题，需要提前做好规避处理。如下所示：</p>
<ul>
<li>客户端需要预估键的规模并设计 hash 分组规则，加重客户端开发成本。</li>
<li>hash 重构后所有的键无法再使用超时（expire）和 LRU 淘汰机制自动删除，需要手动维护删除。</li>
<li>对于大对象，如 1KB 以上的对象，使用 hash-ziplist 结构控制键数量反而得不偿失。</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p>
<ul>
<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>
<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>
<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>
</ul>
<p>一个事务从开始到执行会经历以下三个阶段：</p>
<ul>
<li>开始事务。</li>
<li>命令入队。</li>
<li>执行事务。</li>
</ul>
<p>事务执行过程中，如果服务端收到有 EXEC、DISCARD、WATCH、MULTI 之外的请求，将会把请求放入队列中排队<br><img data-src="/uploads/in-post/cache/redis_transaction.png"></p>
<h2 id="事务相关命令"><a href="#事务相关命令" class="headerlink" title="事务相关命令"></a>事务相关命令</h2><p>Redis 事务功能是通过 MULTI、EXEC、DISCARD 和 WATCH 四个原语实现的</p>
<p>Redis 会将一个事务中的所有命令序列化，然后按顺序执行。</p>
<ul>
<li>redis <strong>不支持回滚</strong>，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， Redis 的作者解释说不支持事务回滚是因为这种复杂的功能和 Redis 追求简单高效的设计主旨不符。</li>
<li>如果在一个事务中的命令出现错误，那么所有的命令都不会执行；</li>
<li>如果在一个事务中出现运行错误，那么正确的命令会被执行。</li>
</ul>
<ol>
<li>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到 EXEC 命令。</li>
<li>MULTI 命令用于开启一个事务，它总是返回 OK。 MULTI 执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当 EXEC 命令被调用时，所有队列中的命令才会被执行。</li>
<li>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。<br>通过调用 DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。</li>
<li>UNWATCH 命令可以取消 watch 对所有 key 的监控。</li>
</ol>
<h1 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h1><p>Redis 的主从复制模式下，一旦主节点由于故障不能提供服务，需要人工将从节点晋升为主节点，同时还要通知应用方更新主节点地址，对于很多应用场景这种故障处理的方式是无法接受的。所以 Redis 从 2.8 开始正式提供了 Redis Sentinel（哨兵）架构来解决这个问题。</p>
<table>
<thead>
<tr>
<th align="center">名词</th>
<th align="center">逻辑结构</th>
<th align="center">物理结构</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主节点 (master)</td>
<td align="center">Redis 主服务/数据库</td>
<td align="center">一个独立的 Redis 进程</td>
</tr>
<tr>
<td align="center">从节点 (slave)</td>
<td align="center">Redis 从服务/数据库</td>
<td align="center">一个独立的 Redis 进程</td>
</tr>
<tr>
<td align="center">Redis 数据节点</td>
<td align="center">主节点和从节点</td>
<td align="center">主节点和从节点的进程</td>
</tr>
<tr>
<td align="center">Sentinel 节点</td>
<td align="center">监控 Redis 数据节点</td>
<td align="center">一个独立的 Sentinel 进程</td>
</tr>
<tr>
<td align="center">Sentinel 节点集合</td>
<td align="center">若干 Sentinel 节点的抽象组合</td>
<td align="center">若干 Sentinel 节点进程</td>
</tr>
<tr>
<td align="center">Redis Sentinel</td>
<td align="center">Redis 高可用实现方案</td>
<td align="center">Sentinel 节点集合和 Redis 数据节点进程</td>
</tr>
<tr>
<td align="center">应用方</td>
<td align="center">泛指一个或多个客户端</td>
<td align="center">泛指一个或多个客户端进程或线程</td>
</tr>
</tbody></table>
<h2 id="主从复制的问题"><a href="#主从复制的问题" class="headerlink" title="主从复制的问题"></a>主从复制的问题</h2><p>Redis 的主从复制模式可以将主节点的数据改变同步给从节点，这样从节点就可以起到两个作用：第一，作为主节点的一个备份，一旦主节点出了故障不可达的情况，从节点可以作为后备“顶”上来，并且保证数据尽量不丢失（主从复制是最终一致性）。第二，从节点可以扩展主节点的读能力，一旦主节点不能支撑住大并发量的读操作，从节点可以在一定程度上帮助主节点分担读压力。</p>
<p>但是主从复制有一个严重的问题：一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。</p>
<p>为了自动化保证 Redis 的高可用性，Redis 提供了 Sentinel</p>
<h2 id="Sentinel-的高可用性"><a href="#Sentinel-的高可用性" class="headerlink" title="Sentinel 的高可用性"></a>Sentinel 的高可用性</h2><p>当主节点出现故障时，Redis Sentinel 能自动完成故障发现和故障转移，并通知应用方，从而实现真正的高可用。<br><img data-src="/uploads/in-post/cache/redis_sentinel_structure.jpg"></p>
<p>从逻辑架构上看，Sentinel 节点集合会定期对所有节点进行监控，特别是对主节点的故障实现自动转移。</p>
<p>整个故障转移的处理逻辑有下面 4 个步骤：</p>
<ol>
<li><p>主节点出现故障，此时两个从节点与主节点失去连接，主从复制失败。<br><img data-src="/uploads/in-post/cache/redis_copy_failed.jpg"></p>
</li>
<li><p>每个 Sentinel 节点通过定期监控发现主节点出现了故障。<br><img data-src="/uploads/in-post/cache/redis_sentinel_master_failed.jpg"></p>
</li>
<li><p>多个 Sentinel 节点对主节点的故障达成一致，选举出 sentinel-3 节点作为领导者负责故障转移。<br><img data-src="/uploads/in-post/cache/redis_sentinel_leader.jpg"></p>
</li>
<li><p>Sentinel 领导者节点执行故障转移。<br><img data-src="/uploads/in-post/cache/redis_sentinel_fix.jpg"></p>
</li>
<li><p>故障转移后整个 Redis Sentinel 的拓扑结构如下：<br><img data-src="/uploads/in-post/cache/redis_sentinel_new.jpg"></p>
</li>
</ol>
<p>通过上面介绍的 Redis Sentinel 逻辑架构以及故障转移的处理，可以看出 Redis Sentinel 具有以下几个功能：</p>
<ul>
<li>监控：Sentinel 节点会定期检测 Redis 数据节点、其余 Sentinel 节点是否可达。</li>
<li>通知：Sentinel 节点会将故障转移的结果通知给应用方。</li>
<li>主节点故障转移：实现从节点晋升为主节点并维护后续正确的主从关系。</li>
<li>配置提供者：在 Redis Sentinel 结构中，客户端在初始化的时候连接的是 Sentinel 节点集合，从中获取主节点信息。</li>
</ul>
<p>同时看到，Redis Sentinel 包含了若个 Sentinel 节点，这样做也带来了两个好处：</p>
<ul>
<li>对于节点的故障判断是由多个 Sentinel 节点共同完成，这样可以有效地防止误判。</li>
<li>Sentinel 节点集合是由若干个 Sentinel 节点组成的，这样即使个别 Sentinel 节点不可用，整个 Sentinel 节点集合依然是健壮的。</li>
</ul>
<h2 id="Sentinel-实现原理"><a href="#Sentinel-实现原理" class="headerlink" title="Sentinel 实现原理"></a>Sentinel 实现原理</h2><p>Redis Sentinel 的基本实现原理，具体包含以下几个方面：Redis Sentinel 的三个定时任务、主观下线和客观下线、Sentinel 领导者选举、故障转移。</p>
<h3 id="三个定时任务"><a href="#三个定时任务" class="headerlink" title="三个定时任务"></a>三个定时任务</h3><ol>
<li>每隔 10 秒，每个 Sentinel 节点会向主节点和从节点发送 info 命令获取最新的拓扑结构。<br><img data-src="/uploads/in-post/cache/redis_sentinel_cron_topology.jpg"></li>
</ol>
<p>这个定时任务的作用具体可以表现在三个方面：</p>
<ul>
<li>通过向主节点执行 info 命令，获取从节点的信息，这也是为什么 Sentinel 节点不需要显式配置监控从节点。</li>
<li>当有新的从节点加入时都可以立刻感知出来。</li>
<li>节点不可达或者故障转移后，可以通过 info 命令实时更新节点拓扑信息。</li>
</ul>
<ol start="2">
<li>每隔 2 秒，每个 Sentinel 节点会向 Redis 数据节点的 <code>__sentinel__:hello</code> 频道上发送该 Sentinel 节点对于主节点的判断以及当前 Sentinel 节点的信息，同时每个 Sentinel 节点也会订阅该频道，来了解其他 Sentinel 节点以及它们对主节点的判断。<br><img data-src="/uploads/in-post/cache/redis_sentinel_cron_hello.jpg"></li>
</ol>
<p>这个定时任务可以完成以下两个工作：</p>
<ul>
<li>发现新的 Sentinel 节点：通过订阅主节点的 <code>__sentinel__:hello</code> 了解其他的 Sentinel 节点信息，如果是新加入的 Sentinel 节点，将该 Sentinel 节点信息保存起来，并与该 Sentinel 节点创建连接。</li>
<li>Sentinel 节点之间交换主节点的状态，作为后面客观下线以及领导者选举的依据。</li>
</ul>
<ol start="3">
<li>每隔 1 秒，每个 Sentinel 节点会向主节点、从节点、其余 Sentinel 节点发送一条 ping 命令做一次心跳检测，来确认这些节点当前是否可达。通过上面的定时任务，Sentinel 节点对主节点、从节点、其余 Sentinel 节点都建立起连接，实现了对每个节点的监控，这个定时任务是节点失败判定的重要依据。<br><img data-src="/uploads/in-post/cache/redis_sentinel_cron_heartbeat.jpg"></li>
</ol>
<h3 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h3><h4 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h4><p>每个 Sentinel 节点会每隔 1 秒对主节点、从节点、其他 Sentinel 节点发送 ping 命令做心跳检测，当这些节点超过 down-after-milliseconds 没有进行有效回复，Sentinel 节点就会对该节点做失败判定，这个行为叫做主观下线。<br><img data-src="/uploads/in-post/cache/redis_sentinel_subject_down.jpg"></p>
<h4 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h4><p>当 Sentinel 主观下线的节点是主节点时，该 Sentinel 节点会通过 sentinel ismaster-down-by-addr 命令向其他 Sentinel 节点询问对主节点的判断，当超过<quorum>个数，Sentinel 节点认为主节点确实有问题，这时该 Sentinel 节点会做出客观下线的决定，这样客观下线的含义是比较明显了，也就是大部分 Sentinel 节点都对主节点的下线做了同意的判定，那么这个判定就是客观的。<br><img data-src="/uploads/in-post/cache/redis_sentinel_object_down.jpg"></p>
<h3 id="Sentinel-领导者选举"><a href="#Sentinel-领导者选举" class="headerlink" title="Sentinel 领导者选举"></a>Sentinel 领导者选举</h3><p>故障转移的工作只需要一个 Sentinel 节点来完成即可，所以 Sentinel 节点之间会做一个领导者选举的工作，选出一个 Sentinel 节点作为领导者进行故障转移的工作。Redis 使用了 <span class="exturl" data-url="aHR0cHM6Ly9yYWZ0LmdpdGh1Yi5pby8=">Raft 算法<i class="fa fa-external-link-alt"></i></span> 实现领导者选举。</p>
<ol>
<li>每个在线的 Sentinel 节点都有资格成为领导者，当它确认主节点主观下线时候，会向其他 Sentinel 节点发送 sentinel is-master-down-by-addr 命令，要求将自己设置为领导者。</li>
<li>收到命令的 Sentinel 节点，如果没有同意过其他 Sentinel 节点的 sentinelis-master-down-by-addr 命令，将同意该请求，否则拒绝。</li>
<li>如果该 Sentinel 节点发现自己的票数已经大于等于 max（quorum，num（sentinels）/2+1），那么它将成为领导者。</li>
<li>如果此过程没有选举出领导者，将进入下一次选举。</li>
</ol>
<p>选举大致过程如下：</p>
<ol>
<li>s1（sentinel-1）最先完成了客观下线，它会向 s2（sentinel-2）和 s3（sentinel-3）发送 sentinel is-master-down-by-addr 命令，s2 和 s3 同意选其为领导者。</li>
<li>s1 此时已经拿到 2 张投票，满足了大于等于 max（quorum，num（sentinels）/2+1）=2 的条件，所以此时 s1 成为领导者。<br><img data-src="/uploads/in-post/cache/redis_sentinel_elect_leader.jpg"></li>
</ol>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>领导者选举出的 Sentinel 节点负责故障转移，具体步骤如下：</p>
<ol>
<li><p>在从节点列表中选出一个节点作为新的主节点，选择方法如下：<br>a）过滤：“不健康”（主观下线、断线）、5 秒内没有回复过 Sentinel 节点 ping 响应、与主节点失联超过 down-after-milliseconds*10 秒。<br>b）选择 slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。<br>c）选择复制偏移量最大的从节点（复制的最完整），如果存在则返回，不存在则继续。<br>d）选择 runid 最小的从节点。<br><img data-src="/uploads/in-post/cache/redis_sentinel_select_slave.jpg"></p>
</li>
<li><p>Sentinel 领导者节点会对第一步选出来的从节点执行 slaveof no one 命令让其成为主节点。</p>
</li>
<li><p>Sentinel 领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点，复制规则和 parallel-syncs 参数有关。</p>
</li>
<li><p>Sentinel 节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点。</p>
</li>
</ol>
<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>Redis Cluster 是 Redis 的分布式解决方案，在 3.0 版本正式推出，有效地解决了 Redis 分布式方面的需求。当遇到单机内存、并发、流量等瓶颈时，可以采用 Cluster 架构方案达到负载均衡的目的。</p>
<h2 id="Redis-数据分区"><a href="#Redis-数据分区" class="headerlink" title="Redis 数据分区"></a>Redis 数据分区</h2><p>虚拟槽分区巧妙地使用了哈希空间，使用分散度良好的哈希函数把所有数据映射到一个固定范围的整数集合中，整数定义为槽（slot）。这个范围一般远远大于节点数，比如 Redis Cluster 槽范围是 0~16383。槽是集群内数据管理和迁移的基本单位。采用大范围槽的主要目的是为了方便数据拆分和集群扩展。每个节点会负责一定数量的槽。<br><img data-src="/uploads/in-post/cache/redis_slot.jpg"></p>
<p>Redis Cluser 采用虚拟槽分区，所有的键根据哈希函数映射到 0~16383 整数槽内，计算公式：slot=CRC16（key）&amp;16383。每一个节点负责维护一部分槽以及槽所映射的键值数据。<br><img data-src="/uploads/in-post/cache/redis_slot_mapping.jpg"></p>
<p>Redis 虚拟槽分区的特点：</p>
<ul>
<li>解耦数据和节点之间的关系，简化了节点扩容和收缩难度。</li>
<li>节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。</li>
<li>支持节点、槽、键之间的映射查询，用于数据路由、在线伸缩等场景。</li>
</ul>
<h2 id="节点通信"><a href="#节点通信" class="headerlink" title="节点通信"></a>节点通信</h2><p>常见的元数据维护方式分为：集中式和 P2P 方式。Redis 集群采用 P2P 的 Gossip（流言）协议，Gossip 协议工作原理就是节点彼此不断通信交换信息，一段时间后所有的节点都会知道集群完整的信息。<br><img data-src="/uploads/in-post/cache/redis_gossip.jpg"></p>
<p>通信过程说明：</p>
<ol>
<li>集群中的每个节点都会单独开辟一个 TCP 通道，用于节点之间彼此通信，通信端口号在基础端口上加 10000。</li>
<li>每个节点在固定周期内通过特定规则选择几个节点发送 ping 消息。</li>
<li>接收到 ping 消息的节点用 pong 消息作为响应。</li>
</ol>
<h2 id="集群伸缩"><a href="#集群伸缩" class="headerlink" title="集群伸缩"></a>集群伸缩</h2><p>Redis 集群提供了灵活的节点扩容和收缩方案。在不影响集群对外服务的情况下，可以为集群添加节点进行扩容也可以下线部分节点进行缩容。<br><img data-src="/uploads/in-post/cache/redis_cluster_node_up_down.jpg"></p>
<p>Redis 集群可以实现对节点的灵活上下线控制。其中原理可抽象为槽和对应数据在不同节点之间灵活移动。<br><img data-src="/uploads/in-post/cache/redis_move_slot.jpg"></p>
<p>图中每个节点把一部分槽和数据迁移到新的节点 6385，每个节点负责的槽和数据相比之前变少了从而达到了集群扩容的目的。集群的水平伸缩的上层原理：集群伸缩=槽和数据在节点之间的移动。</p>
<h1 id="缓存异常"><a href="#缓存异常" class="headerlink" title="缓存异常"></a>缓存异常</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>解决方案</p>
<ol>
<li>接口层增加校验，如用户鉴权校验，id 做基础校验，id&lt;=0 的直接拦截；</li>
<li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将 key-value 对写为 key-null，缓存有效时间可以设置短点，如 30 秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个 id 暴力攻击</li>
<li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力<br><img data-src="/uploads/in-post/cache/redis_penetrate_solution.jpg"></li>
</ol>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p>
<p>解决方案</p>
<ol>
<li>设置热点数据永远不过期。</li>
<li>加互斥锁，互斥锁可以控制查询数据库的线程访问，但这种方案会导致系统的吞吐量下降，需要根据实际情况使用。</li>
</ol>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>解决方案</p>
<ol>
<li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li>
<li>一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。</li>
<li>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。</li>
</ol>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Wenknows的利器</title>
    <url>/2016/06/27/benefit_others/</url>
    <content><![CDATA[<blockquote>
<p>“工具和灵感，都是利器。当来自不同的领域，不同类型的创造者的工具和灵感互相碰撞的时候，才会迸发出更多的可能性。”</p>
</blockquote>
<p><strong>更新记录</strong></p>
<p>2016-06-27  研二期间创建本篇博文<br>2018-05-21  更新工作，更新使用的软件</p>
<h3 id="我和我所做的工作"><a href="#我和我所做的工作" class="headerlink" title="我和我所做的工作"></a>我和我所做的工作</h3><p>我是<code>Wenknows</code>，现在工作于小红书，职位为电商商户平台后台开发，平时喜欢运动和吃吃吃，业余弹弹尤克里里，喜欢听音乐和评书，喜爱编程，希望在程序猿的道路上能走得更远。</p>
<h3 id="我当前使用的硬件"><a href="#我当前使用的硬件" class="headerlink" title="我当前使用的硬件"></a>我当前使用的硬件</h3><p>电脑是 14 年的 15 寸 MacBook Pro with Retina，i7处理器，16 GB RAM＋256 GB SSD。<br><img data-src="/uploads/in-post/macbookpro.png" alt="macbookpro"></p>
<span id="more"></span>

<p>键盘是Cherry的红轴机械键盘MX-BOARD 3.0，键盘比较软，按起来很舒服。</p>
<p><img data-src="/uploads/in-post/cherry.jpg" alt="cherry"></p>
<p>鼠标是罗技的G502。</p>
<p><img data-src="/uploads/in-post/mouse.jpg" alt="Logitech"></p>
<p>手机是小米 Note 3，照相很清晰，但是使用时偶尔会有卡顿。<br><img data-src="/uploads/in-post/xiaomi-mi-note3.jpg" alt="Xiaomi Note 3"></p>
<p>喜欢听音乐，但算不上发烧友，有一个beats录音师的全包式耳机。<br><img data-src="/uploads/in-post/beats.png" alt="beats"></p>
<h3 id="我当前使用的软件"><a href="#我当前使用的软件" class="headerlink" title="我当前使用的软件"></a>我当前使用的软件</h3><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><h5 id="工作相关"><a href="#工作相关" class="headerlink" title="工作相关"></a>工作相关</h5><ul>
<li>科学上网：<code>Tunnelblick</code>和<code>Lantern</code>，前者是免费的OpenVPN客户端，后者是直接科学上网的工具。</li>
<li>Java：<code>IDEA</code>，感觉是目前最好用的Java IDE，功能强大，界面也很好看。</li>
<li>Python：<code>Pycharm</code>，和IDEA是同一家公司的软件，同样有强大的功能，美观的界面。</li>
<li>Terminal：<code>iTerm2</code>，好用的终端软件，在各大论坛也得到了大家的推荐。</li>
<li>MySQL：<code>MySQL Workbench</code>，MySQL自带可视化管理软件，兼容性好，速度快。</li>
<li>API：<code>Dash</code>，使用MAC的程序员应该都知道这款软件吧。</li>
<li>论文：<code>EndNote</code>，各大论文网站都能生成EndNote格式的引用。</li>
<li>FTP：<code>Cyberduck</code>，被大家广泛推荐的FTP客户端。</li>
</ul>
<h5 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h5><ul>
<li>浏览器：<code>chrome</code> + 插件，插件安装了Adblock，vimium，Infinity，crxMouse Chrome Gestures，Tampermonkey + 百度网盘助手</li>
<li>邮件：<code>MAC自带邮件</code>，兼容性好，速度飞快。</li>
<li>虚拟机：<code>Parallels Desktop</code>，安装了win 8.1和Fedora 23.</li>
<li>词典：<code>有道词典</code>。</li>
<li>音乐播放器：<code>网易云音乐</code>，感觉它的推荐算法做得很好。</li>
<li>视频播放器：<code>MPlayer</code>，QuickTime和射手播放器。</li>
<li>视频下载：<code>硕鼠MAC</code>，可以下载搜狐等网站的视频。</li>
<li>pdf阅读器：<code>预览</code>和<code>Skim</code>，优点是速度快，都有缺点就是不能创建目录，创建目录的话要用Adobe Acrobat。</li>
<li>压缩软件：<code>keka</code>和<code>Unarchiver</code>，小巧而精致，也得到了大家的推荐。</li>
<li>聊天软件：<code>QQ</code>，<code>微信</code>，应该都是必装的吧。</li>
<li>下载软件：<code>迅雷</code>，<code>uTorrent</code>，迅雷虽然很流氓，但是速度确实快，uTorrent是用于下载bt资源的。</li>
</ul>
<h5 id="系统增强和提升效率"><a href="#系统增强和提升效率" class="headerlink" title="系统增强和提升效率"></a>系统增强和提升效率</h5><ul>
<li>全局搜索：<code>Alfred</code>，大家应该对这款软件也不陌生。</li>
<li>窗口调整：<code>Moom</code>，预设了几种窗口位置和大小。</li>
<li>个人笔记：<code>有道云笔记</code>和<code>Evernote</code>，用于组织不同形式的文档。</li>
<li>防止睡眠：<code>Caffeine</code>，应该也是耳熟能详的软件了。</li>
<li>文档编辑器：<code>Atom</code>，我是从Sublime转过来的，觉得Atom美观，易用，但是速度方面貌似不如Sublime快。</li>
<li>思维导图：<code>Xmind</code>，实验室导师推荐的思维导图软件，全平台都有。</li>
<li>快捷键：<code>Karabiner</code>，快捷键不够用了吗，使用这款软件吧！</li>
<li>切换：<code>Contexts</code>，一款增强了程序间切换功能的软件。</li>
</ul>
<h5 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h5><ul>
<li>音乐：<code>Guitar Pro 6</code></li>
<li>游戏：<code>Lost Castle</code></li>
<li>平台：<code>Steam</code></li>
</ul>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><h5 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h5><ul>
<li>聊天软件：<code>QQ</code>，<code>微信</code>，这个应该是现在每台中国智能机都会装的软件了吧。</li>
<li>阅读软件：<code>追书小说</code>，<code>Kindle</code>，<code>UC 浏览器</code>，都是用来看书的。</li>
<li>音乐：<code>网易云音乐</code>，比较喜欢的还是中国风和轻音乐。</li>
<li>日历：<code>中华万年历</code>，功能丰富，缺点是广告多了点。</li>
<li>购物：<code>淘宝</code>，<code>京东</code>。</li>
<li>运动：<code>Keep</code>，<code>Pocket Yoga</code>，锻炼身体，责无旁贷。</li>
<li>科学上网：<code>无码VPN</code>，4G也可以科学上网。</li>
<li>音乐学习：<code>Finger</code>，用来练习尤克里里的软件。</li>
<li>记账：<code>口袋记账</code>，功能完善，界面美观。</li>
</ul>
<h5 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h5><ul>
<li><code>小鸡模拟器</code>，可以玩各种主机的游戏</li>
<li><code>开罗系列游戏--暖暖温泉乡等</code>，小巧而精致的时间杀手游戏</li>
<li><code>崩溃大陆</code>，非常棒的Rogue like游戏</li>
<li><code>王者荣耀</code>，最高段位星耀3</li>
</ul>
<h3 id="最理想的工作环境"><a href="#最理想的工作环境" class="headerlink" title="最理想的工作环境"></a>最理想的工作环境</h3><p>喜欢扁平化的管理氛围，每个人都积极向上，朝着同一个目标努力。同时也喜欢轻松愉快的企业文化氛围，愿意和能够让自己得到提升的人一起工作。</p>
<h3 id="平时或者工作灵感的方式"><a href="#平时或者工作灵感的方式" class="headerlink" title="平时或者工作灵感的方式"></a>平时或者工作灵感的方式</h3><p>灵感的迸发不是突然的事情，而必定是靠长期的积累从量变达到质变的过程。</p>
<p>最好的积累方式便是阅读，无论是读书，还是读他人博客的文章，都能得到很好的积累。</p>
<p>还有一个很好的积累方式就是和比自己强的人聊天，了解他们的思维方式，平时的学习习惯，进而对自己进行改变。</p>
<p>工作不要太长时间，要注意劳逸结合，放松的头脑更容易迸发出不一样的能力。</p>
<h3 id="推荐一件生活中的利器给大家"><a href="#推荐一件生活中的利器给大家" class="headerlink" title="推荐一件生活中的利器给大家"></a>推荐一件生活中的利器给大家</h3><p>一个是我正在使用的科学上网利器：<code>lantern</code>，中文名是蓝灯，免费，速度快。</p>
<p>另一个是高端的桌游：<code>一夜终极狼人</code>，喜欢和小伙伴们撕撕撕的你一定不要错过！</p>
<h3 id="利他社群计划"><a href="#利他社群计划" class="headerlink" title="利他社群计划"></a>利他社群计划</h3><p>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<span class="exturl" data-url="aHR0cDovL2xpcWkuaW8vY29tbXVuaXR5Lw==">利他社群计划<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>改善自己的意志力</title>
    <url>/2021/06/27/2021-06-27-practise-your-mind%20copy/</url>
    <content><![CDATA[<p>今天听了樊登对于《意志力》这本书的讲解，有了一些想法。要改善我们的意志力，首先我们需要正确的认识他，意志力其实是有限的，一旦产生了消耗，是需要时间去恢复的，并且应对不同事件的意志力其实是出自同一个账户的，这也就是为什么我们在处理了一些复杂的需要决策的事情之后，再去做其他事情的时候就会松懈、不容易坚持的原因。有一个“胡萝卜”实验，两组大学生，一组可以吃曲奇，一组只能看着曲奇吃胡萝卜，实验后让他们在坚持做一个无解的难题，前一组坚持的时间明显更长。还有一个纪录片实验，实验分为三组，第一组必需控制自己的表情，第二组需要放大他们的表情，第三组自然流露不用控制，看完纪录片后让他们握握力器，第三组的时间明显比前两组长。这是因为我们的意志力是有限的，只要使用了就会消耗，无论是控制自己的思维，控制自己的情绪，控制自己的冲动还是控制自己的表现，只要有控制我们都会消耗我们的意志力，之后就会导致我们的感觉放大，容易产生情绪波动，这也是为什么我们忙碌了一天之后很容易发脾气的原因之一。</p>
<p>那么我们应该怎么改善我们的意志力呢？</p>
<ol>
<li>实现表明，体能葡萄糖含量和意志力息息相关，适量的血糖有助于帮助我们维持意志力，过高或过低的血糖都会影响我们的意志力和判断力，我们可以摄入一些缓慢提供血糖的食物例如蔬菜、水果、鱼类、坚果等来维持我们血糖的稳定。</li>
<li>最好在某个阶段只专注于一个目标，因为过多的目标会极速消耗我们的意志力，并且最好定目标的时候关注更为长期的目标，因为长期的目标可以及时调整每天的进度，不至于因为某天达不到当天的目标就产生消极心理，并且频繁制定短期目标也会更多的消耗我们的意志力。</li>
<li>注意决策疲劳，我们做决策的时候会消耗更多的意志力，所以不要总是去做一些零散的繁杂的决策，以免到真正需要决策的时候导致决策失误。</li>
<li>注重锻炼意志力，通过好习惯的养成可以大幅提升我们的意志力，比如每天坐直、早起，养成习惯时不要设置过高的目标，不断体会自己的进步更能提升自己的意志力。</li>
</ol>
]]></content>
      <categories>
        <category>思考与感想</category>
      </categories>
      <tags>
        <tag>阅读感想</tag>
      </tags>
  </entry>
</search>
